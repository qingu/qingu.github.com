<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: shell | MetMan]]></title>
  <link href="http://qingu.github.com/blog/categories/shell/atom.xml" rel="self"/>
  <link href="http://qingu.github.com/"/>
  <updated>2014-11-17T18:32:21+08:00</updated>
  <id>http://qingu.github.com/</id>
  <author>
    <name><![CDATA[Qingu Jiang]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[shell编程学习笔记：变量篇]]></title>
    <link href="http://qingu.github.com/blog/2014/11/17/shellbian-cheng-xue-xi-bi-ji-%3Abian-liang-pian/"/>
    <updated>2014-11-17T18:30:00+08:00</updated>
    <id>http://qingu.github.com/blog/2014/11/17/shellbian-cheng-xue-xi-bi-ji-:bian-liang-pian</id>
    <content type="html"><![CDATA[<h2 id="shell">Shell简介</h2>

<p>Shell作为一种“胶水”语言，主要目的是将系统中各种工具粘合在一起，其
主要功能是方便的调用各种系统命令。为了这一目的，shell被设计成“面向
字符串”的语言，即<strong>一切皆字符串</strong>。（这有点像Unix设计哲学：一切皆文件）</p>

<!--more-->

<p>刚接触shell编程时，我以为shell脚本只是用来将各种系统命令放在一起顺序执行。
随着学习的深入，才发现shell实际上是一门编程语言。编程语言具有的特点它都有。
如果按照C语言的眼光来看，shell编程语言的学习可以分为两部分：</p>

<ul>
  <li>shell语法</li>
</ul>

<p>变量、逻辑判断与循环流程控制、函数等语法要素齐全。</p>

<ul>
  <li>Unix系统命令</li>
</ul>

<p>系统命令可以看作C语言中的标准库，让用户能够更便捷的完成任务。</p>

<p>但需要注意的是，C是编译型语言，而shell是解释型语言。</p>

<h2 id="section">变量</h2>

<p>Shell主要是字符串处理语言，当然它也提供一些简单的算术预算功能（功能比较弱）。
不同于编译型语言（如C、Fortran），shell是脚本型语言，不需要变量类型声明。
直接<code>var=value</code>这样变量名赋值，变量类型为字符串。也可以通过一些方法声明为数组。</p>

<h3 id="section-1">变量声明与引用</h3>

<p>Shell变量名称的开头是一个字母或下划线符号，后面接任意长度字母、数字或下划线（与C语言
定义类似）。变量名称的字符长度没有限制。<strong>shell变量用来保存字符串值。</strong></p>

<p>以下是Bash的保留字（或称关键字），变量声明时应避免使用它们。</p>

<p><code>
    ! case  coproc  do done elif else esac fi for function if in select then until while { } time [[ ]]
</code></p>

<h4 id="section-2">变量赋值</h4>

<p><code>
    var=value
</code></p>

<p>变量名称紧接着<code>=</code>字符，最后是新值，中间完全没有任何空格。</p>

<p>变量值可以是空值，即不含任何字符，<code>myvar=    </code>，<strong>未定义的变量会展开为<code>null</code>空字符串。</strong></p>

<p>如果变量值内含空格，需要加上引号（注意单引号与双引号的区别）</p>

<p><code>
    var1=abc
    var2=5        #即使是数字，仍以字符串形式存储在变量中
    var3=This_is_a_long_string
    var4="This_is_a_long_string"      #虽然var4被字符串包围，其值与var3一致
    var5="This is a long string with space"  #由于字符串中有空格，必须加引号
    var6=4+5  #看似一个数学表达式，但以字符串形式存储在变量中
</code></p>

<h4 id="section-3">变量引用</h4>

<p>变量的引用有两种方式：</p>

<ul>
  <li>在变量前加上<code>$</code>字符，表示引用这个变量的值。 <code>var7=$var1</code></li>
  <li>使用<code>${}</code>包围变量，如<code>var8=${var2}</code></li>
</ul>

<h3 id="section-4">符号常量</h3>

<p>使用<code>readonly</code>命令使变量称为只读模式，而之后赋值给它们是被禁止的。</p>

<p><code>
    hours_per_day=24
    readonly hours_per_day
    #也可以合并为一句（需要POSIX兼容）
    readonly hours_per_day=24
</code></p>

<h3 id="section-5">环境变量</h3>

<p>环境是一个名称与值得简单列表，可供所有执行中的程序使用。新的进程会从其父进程
继承环境，也可以在建立新的子进程之前修改它。</p>

<p><code>export</code>命令可以将新变量添加到环境变量中去。</p>

<p><code>
    PATH=$PATH:/usr/local/bin
    export PATH
    #或写成一句（须POSIX兼容）
    export PATH=$PATH:/usr/local/bin
</code></p>

<p>注意变量赋值放在某一命令名称与参数前，该变量只对当前命令有效，对后面的命令不会有效。</p>

<p>```
    #!/bin/bash</p>

<pre><code>function cmd1(){
echo local_var is $var
}

var=a
var=b cmd1 
echo org_var is $var

#输出结果为：
local_var is b
org_var is a
</code></pre>

<p>```</p>

<p><code>export</code>命令仅将变量加到环境中，如果需要从程序的环境中删除变量，则要用<code>env</code>命令，
<code>env</code>也可以临时改变环境变量值。</p>

<p><code>
    env -i PATH=$PATH HOME=$HOME awk '...' file1
</code></p>

<p>-i 选项是用来初始化环境变量的，也就是丢弃任何的继承值，仅传递命令行上指定的变量
给程序使用。</p>

<p><code>unset</code>命令从执行中的shell中删除变量或函数。缺省时，会解除变量设置，加上<code>-v</code>选项
可特指解除变量。<code>-f</code>选项删除函数。</p>

<p><code>
    unset var1   #or
    unset -v var1
    unset -f function_name
</code></p>

<h3 id="section-6">小结</h3>

<ul>
  <li>shell是针对字符串处理的一门编程语言。</li>
  <li>通过<code>var=value</code>直接赋值给变量，使用<code>$</code>或<code>${}</code>引用变量值。</li>
  <li><code>readonly</code>声明变量为只读类型，<code>export</code>命令声明变量为环境变量，<code>unset</code>命令删除变量或函数。</li>
</ul>

<h2 id="section-7">参考文献</h2>

<p>[1] Bash脚本编程语言中的美学与哲学 <a href="http://www.cnblogs.com/youxia/p/linux010.html">http://www.cnblogs.com/youxia/p/linux010.html</a></p>

<p>[2] <code>man bash</code></p>

<p>[3] Arnold Robbins, Nelson H.F. Beebe. Shell脚本学习指南</p>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[source命令与./区别]]></title>
    <link href="http://qingu.github.com/blog/2014/11/07/sourceming-ling-yu-dot-slash-qu-bie/"/>
    <updated>2014-11-07T09:37:00+08:00</updated>
    <id>http://qingu.github.com/blog/2014/11/07/sourceming-ling-yu-dot-slash-qu-bie</id>
    <content type="html"><![CDATA[<p>bash执行脚本的方式有以下几种：</p>

<!--more-->

<ul>
  <li><code>source script.sh</code></li>
  <li><code>bash script.sh</code></li>
  <li><code>./script.sh</code>    #脚本中首行应该是<code>#!/usr/bin/env bash</code></li>
</ul>

<p>那么使用<code>source</code>命令和其他两种方式有什么区别呢？可以使用
下面的例子看出它们的区别。</p>

<p>现有一个脚本<code>cmd.sh</code>，其内容如下：</p>

<p><code>
    # cmd.sh
    function cmd1()
    {
        echo "hello from cmd1"
    }
</code></p>

<p>按照以下几种方式执行，看输出结果的区别。</p>

<p>```
    $ ./cmd.sh
    $ cmd1
    cmd1：未找到命令</p>

<pre><code>$ bash cmd.sh
$ cmd1
cmd1：未找到命令

$ source cmd.sh
$ cmd1
hello from cmd1 ```
</code></pre>

<p>可以看出两者区别是：
 * <code>source</code>命令是在当前进程中执行脚本文件中的各个命令，而不是另起
一个子进程（subshell）。
 * 其它两种方式则是另起一个子进程。</p>

<p>这就涉及到变量在哪些环境中生效，环境变量的作用等话题，以后再说。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Bash脚本获取自身路径方法]]></title>
    <link href="http://qingu.github.com/blog/2014/11/05/bashjiao-ben-huo-qu-zi-shen-lu-jing-fang-fa/"/>
    <updated>2014-11-05T20:20:00+08:00</updated>
    <id>http://qingu.github.com/blog/2014/11/05/bashjiao-ben-huo-qu-zi-shen-lu-jing-fang-fa</id>
    <content type="html"><![CDATA[<p>恢复博客的更新^-^</p>

<!--more-->

<p>Shell中有一个命令叫<code>pwd</code>可以获得当前工作目录。如果脚本在脚本
所在目录下执行，使用<code>pwd</code>命令可以得到脚本的当前目录。</p>

<p><code>
    # /home/user/scripts/getmydir.sh
    MYDIR=`pwd`
    echo $MYDIR
</code></p>

<p>在/home/user/scripts目录下执行<code>./getmydir.sh</code>得到脚本所在的绝对路径。</p>

<p>但如果该脚本在其他目录下执行，比如在<code>/home/user</code>下执行<code>scripts/getmydir.sh</code>
得到的路径却是<code>/home/user/</code>。</p>

<hr />

<p>可以看出<code>pwd</code>命令获取脚本自身路径有一定限制。我们可以用以下方法在任意目录
执行该脚本获取其绝对路径：</p>

<p><code>
   # /home/user/scripts/getmydir2.sh
    MYDIR="$( cd "$( dirname "${BASH_SOURCE[0]}" )" &amp;&amp; pwd )"
</code></p>

<p>将以上这条长命令分解来看就是：</p>

<p><code>
    DIR1="{BASH_SOURCE[0]}"   #脚本相对于当前目录的路径，是相对路径
    DIR2="$( dirname $DIR1 )"   #得到脚本的目录名，也是相对路径
    #cd命令切换到脚本所在目录，再执行pwd命令得到脚本绝对路径
    MYDIR="$( cd $DIR2 &amp;&amp; pwd )" 
</code></p>

<p>该脚本能成功的关键是<code>BASH_SOURCE</code>环境变量。当用<code>.</code>或<code>source</code>执行脚本时，
<code>BASH_SOURCE</code>变量会自动设置到源文件路径。</p>

<hr />

<p>还有一种方法是使用<code>readlink</code>命令达到效果。</p>

<p><code>
    DIR1="`dirname $BASH_SOURCE`"
    MYDIR=`readlink -f "$DIR1"`
</code></p>

]]></content>
  </entry>
  
</feed>
