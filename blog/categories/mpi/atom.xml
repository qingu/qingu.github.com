<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: MPI | MetMan]]></title>
  <link href="http://qingu.github.com/blog/categories/mpi/atom.xml" rel="self"/>
  <link href="http://qingu.github.com/"/>
  <updated>2013-04-24T14:31:30+08:00</updated>
  <id>http://qingu.github.com/</id>
  <author>
    <name><![CDATA[Qingu Jiang]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[GRAPES源码分析之计时系统]]></title>
    <link href="http://qingu.github.com/blog/2013/04/23/grapesyuan-ma-fen-xi-zhi-ji-shi-xi-tong/"/>
    <updated>2013-04-23T16:14:00+08:00</updated>
    <id>http://qingu.github.com/blog/2013/04/23/grapesyuan-ma-fen-xi-zhi-ji-shi-xi-tong</id>
    <content type="html"><![CDATA[<h3 id="section">前言</h3>

<p>模式开发者（尤其是并行计算开发者）对模式各部分执行花费的时间很感兴趣，需要了解哪里耗时比较长，进而对其进行优化。普通用户一般不需要这个功能。计时系统的一般思路：在需要计时部分的起点和终点设置计时器（调用计时子程序），两个点时间差即为计时部分所耗时间。</p>

<!--more-->

<h3 id="grapes">GRAPES计时系统</h3>

<p>目前发现GRAPES中有3套计时系统，分别在 <code>module_integrate</code> 、 <code>sovle_grapes</code> 及 <code>ritche_puw_jin</code> 中，对各自调用的子程序进行计时。计时子程序使用MPI墙钟函数。为了使版本统一，使用条件预编译方法控制开启实现计时功能（MPI同步计时会使模式整体运行时间过长，不适用于业务）。</p>

<h4 id="solvegrapes">solve_grapes计时系统</h4>

<p>以下以solve_grapes中计时系统进行说明</p>

<ul>
  <li>计时开始部分（别忘了引入mpi模块， <code>use MPI</code> ）</li>
</ul>

<p>```
	#ifdef DETAIL_TIMING
	   integer :: ierr, comm
	   real<em>8 :: start_time, end_time
	   real</em>8 ,save::  wtimer(80,2)=0. 
	   !保存计时数据的二维数组，第一维指不同计时部分，第二维指不同步和同步两种情况
	#endif</p>

<pre><code>#ifdef DETAIL_TIMING
   comm=mpi_comm_world          
   call mpi_barrier(comm, ierr)  !各进程同步，使各进程计时起点一致
   start_time=mpi_wtime()        !记录起点墙钟时间
   call get_communicator(comm)
#endif ```
</code></pre>

<ul>
  <li>第一个计时部分终点处</li>
</ul>

<p><code>
	#ifdef DETAIL_TIMING
	     end_time=mpi_wtime()             ！本进程计时终点墙钟时间
	     wtimer(1,1)=end_time-start_time  ! 未同步情况本进程该计时部分所用时间
	     call mpi_barrier(comm, ierr)     ! 同步
	     end_time=mpi_wtime()             ！所有进程都执行完该部分时墙钟时间
	     wtimer(1,2)=end_time-start_time  ！同步情况下执行时间
	     start_time=end_time              ! 下一计时部分的起点墙钟时间
	#endif
</code></p>

<ul>
  <li>
    <p>以后每一计时部分计时思路与上述相同</p>
  </li>
  <li>
    <p>在 <code>solve_grapes</code> 最后输出每步积分步各调用部分执行时间</p>
  </li>
</ul>

<p><code>
	#ifdef DETAIL_TIMING
	     write(73,*) 'step',step,':'
	     write(73,*) "no_barrier for timing *************"
	     write(73,'(10F8.4)') (wtimer(i,1),i=1,80)
	     write(73,*) "barrier for timing *************"
	     write(73,'(10F8.4)') (wtimer(i,2),i=1,80)
	#endif
</code>
文件号为73的文件是在 <code>module_integrate</code> 中定义的。</p>

<p><code>
   write(filename,'(A7, I5.5)') 'Timing.',myprcid  !各进程计时输出文件名，
   open (73,file=filename,form='formatted')        !有多少进程，就有多少文件
</code></p>

<h4 id="section-1">其它</h4>

<p><code>module_integrate</code> 中计时系统与 <code>solve_grapes</code> 中一样，只不过计时都为非同步情况下的时间，保留在 <code>wtimer_integrate</code> 一维数组中。预编译条件与 <code>solve_grapes</code> 相同，都为 <code>DETAIL_TIMING</code> 。</p>

<p><strong>注：每一积分步 <code>solve_grapes</code> 执行时间保留在 <code>wtimer_integrate(5)</code> 中.</strong></p>

<p>还有一套是在 <code>module_semi_lag</code> 中 <code>ritche_puw_jin</code> 中定义的，预编译条件为 <code>SL_TIMING</code> 。</p>

<p>如果需要开启计时系统，需在 <code>configure.grpaes</code> 中预处理器选项 <code>ARCHFLAGS</code> 中加上类似 <code>-D predefineName</code> ，如 <code>-DSL_TIMING</code> 。</p>
]]></content>
  </entry>
  
</feed>
