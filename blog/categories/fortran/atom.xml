<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Fortran | MetMan]]></title>
  <link href="http://qingu.github.com/blog/categories/fortran/atom.xml" rel="self"/>
  <link href="http://qingu.github.com/"/>
  <updated>2013-08-12T18:45:21+08:00</updated>
  <id>http://qingu.github.com/</id>
  <author>
    <name><![CDATA[Qingu Jiang]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Fortran声明数组过大问题解决办法]]></title>
    <link href="http://qingu.github.com/blog/2013/08/12/fortransheng-ming-shu-zu-guo-da-wen-ti-jie-jue-ban-fa/"/>
    <updated>2013-08-12T18:38:00+08:00</updated>
    <id>http://qingu.github.com/blog/2013/08/12/fortransheng-ming-shu-zu-guo-da-wen-ti-jie-jue-ban-fa</id>
    <content type="html"><![CDATA[<p>在实际编程中会遇到Fortran程序中声明的数组过大，程序一运行就崩溃，报“段错误”等
错误提示。我在<a href="http://stackoverflow.com/questions/5795938/stack-overflow-in-fortran90" title="stackoverflow">stackoverflow</a>上看到一个针对此问题的解决方法，翻译成中文和大
家分享。</p>

<!--more-->

<hr />

<p>实际编程中，程序经常用到局部大数组用于中间计算。局部变量通常存储在堆栈中，堆栈
一般是整个系统内存的一小部分，通常几十MB。当局部变量大小超出堆栈大小，将会看到
如下症状——<strong>在调用相关程序后，但第一条执行语句前发生堆栈溢出</strong>。</p>

<p>当出现这个问题，最好的办法是找到相关的局部大变量，然后再决定做什么。</p>

<p>一旦定位到变量，并且确定是问题的出处，有一些做法。将数组变小是一种做法。另外一
种方法是使堆栈大小变大，在Linux下可用<code>ulimit -s [newsize]</code>。然而这不是一劳永逸
的方法，在windows机器下必须做些其他。</p>

<p>避免这个问题的另一类方法是不把大数据放到堆栈中，而是放在内存中其他部分（堆中）
。<strong>可用通过给数组加上<code>save</code>属性（C中是<code>static</code>）</strong>，这将使变量放在堆中，因此使变
量在调用之间的持久存在。该方法缺点潜在的改变子程序行为，并且意味子程序不能递归
使用，类似线程不安全。优点是此方法容易并且便于移植。然而，这只对固定大小的局部
变量有用，如果临时数组大小依赖于输入，就不能用该方法（由于不是单个变量为save，
每次程序被调用时可能大小不同）。</p>

<p><strong>有编译器选项可以指定将所有数组（或大于一定大小的所有数组）放在堆中而不是堆栈里</strong>
，每个Fortran编译器都有这个选项。对于ifort，linux中是<code>-heap-arrays</code>或windows中
<code>/heap-arrays</code>。对于gfortran，这可能是默认的。确保会发生什么是有好处的，但这意
味着要使代码工作每个编译器选项不一样。</p>

<p>最后，<strong>可以将数组变为allocatable。分配数组将放在堆中，但指向他们的变量在堆栈中</strong>，
这样你就得到两种方法的好处。同时这完全是标准Fortran用法，完全可移植。缺点是
需要改变代码。而且，分配过程会花大量时间，如果调用子程序很多次，可能会注意到轻
微拖慢。（然而这个可能的性能退化容易修复，如果多次调用相同大小数组，可以用一个
可选参数传递给一个预分配的局部数组）</p>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Fortran中动态数组]]></title>
    <link href="http://qingu.github.com/blog/2013/08/12/fortranzhong-dong-tai-shu-zu/"/>
    <updated>2013-08-12T15:28:00+08:00</updated>
    <id>http://qingu.github.com/blog/2013/08/12/fortranzhong-dong-tai-shu-zu</id>
    <content type="html"><![CDATA[<h3 id="section">动态数组</h3>

<p>Fortran90中有三种动态数组。这三种动态数组允许在运行时创建，数组大小由计算或输
入得到的值决定。三种动态数组是：</p>

<ul>
  <li>
    <p>自动数组(automatic arrays)</p>
  </li>
  <li>
    <p>可分配数组(allocatable arrays)</p>
  </li>
  <li>
    <p>指针数组(pointer arrays)</p>
  </li>
</ul>

<!--more-->

<h4 id="section-1">自动数组</h4>

<p>自动数组是函数或子程序的局部数组，其大小取决于哑元相关的值。自动数组在程序入口处自动创
建（分配）并且在程序出口处自动销毁。自动数组大小一般在不同程序调用时不一样。</p>

<p>自动数组例子：</p>

<p><code>
	RECURSIVE SUBROUTINE F( N )
	INTEGER :: N
	REAL :: X ( N )     ! an automatic array
	REAL :: Y ( 1000 )  ! an explicit-shape local array on the stack 
</code>   </p>

<p>```
	function F18(A,N)
	integer  N                     ! A scalar
	 real A(:,:)                   ! An assumed shape array
	 real F18(size(A,1)  )         ! The function result itself is
								   !  an automatic array.</p>

<pre><code> complex  Local_1(N,2*N+3)     ! Local_1 is an automatic array
							   !  whose size is based on N.

real Local_2(size(A,1),size(A,2))     ! Local_2 is an automatic array
                               !  exactly the same size as A.

real Local_3(4*size(A,2))      ! Local_3 is a one-dimensional 
                               !  array 4 times the size of 
                             ! the second dimension of A.
 ...                           !  
end function F18 ```
</code></pre>

<p>注意声明自动数组中像SIZE这样的内置查询函数。Fortran90提供许多允许出现在声明中
的查询函数。数组边界、大小，字符类型长度及kind类型都可以用含有这些查询函数的表
达式说明。一个说明表达式是一个标量整型表达式，操作数的值在进入程序时确定。这样
的操作数包括常量、内置程序的引用和通过哑元、模块、common和主程序可访问的变量。</p>

<h4 id="section-2">可分配数组</h4>

<p>可分配数组是那些显式声明ALLOCATABLE的数组。一个可分配数组可以是一个程序局部变
量，也可以放在模块变量中，对模块中所有程序来说是全局的。一个可分配数组使用
ALLOCATAE语句显式分配，用DEALLOCATE语句显式销毁或当其为未指定SAVE属性的局部数
组时，退出程序时自动销毁。一个全局可分配数组一直存在直到显式销毁（deallocate语
句可能与allocate语句不在同一个程序中）。如果数组大小取决于一个计算的值，而不是
哑元或模块变量、common或主程序，使用可分配数组。可用ALLOCATED内置函数测试一个
可分配数组的分配状态。</p>

<p>可分配数组例子：</p>

<p>```
	subroutine Peach
	use Recipe                    ! Accesses global allocatable array, Jam.</p>

<pre><code> real, allocable :: Pie(:,:)   ! Pie is a 2-dimensional allocatable array.
...
 allocate ( Pie(N,2*N )   )    ! Allocate a local allocatable array.

 if (.not.allocated(Jam)) allocate ( Jam(4*M) )
                               ! Allocate a global allocable array if
                               ! it is not already allocated.
 ... deallocate ( Pie )
 ...
end subroutine Peach

module Recipe                  ! Jam is a global allocatable array, and
 real, allocable :: Jam(:)     ! can be allocated and deallocated in
 ...                           ! any procedure(s) using this module.
end module Recipe ```
</code></pre>

<p>注意可分配数组的声明边界为冒号，表明这些在后面提供。这使可分配数组声明看起来像
假设大小（assumed-shape）哑元声明，这是因为维数大小的“推迟”特征类似的。</p>

<h4 id="section-3">指针数组</h4>

<p>指针数组类似于可分配数组，他们用ALLOCATE语句显式分配，拥有任意计算大小并且用
DEALLOCATE语句显式销毁。</p>

<h4 id="section-4">数组在内存中存储位置</h4>

<p>数组的存储方式不完全是Fortran语言所决定的，还与编译器有关。但是常见的默认
情况是allocatable array放在堆里（heap），automatic array放在栈里（stack）。
一般编译器的栈的大小都设置得不大，容易出现栈的空间不够的情况，在Visual Fortran
里提示stack overflow，在f77这样的unix平台下的编译器里通常是core dump，
这时把栈的大小改大就能解决问题，改的方法就依编译器而定了。</p>

<p>参考文章：</p>

<p>1.<a href="http://www.phy.ornl.gov/csep/pl/node17.html" title="http://www.phy.ornl.gov/csep/pl/node17.html">http://www.phy.ornl.gov/csep/pl/node17.html</a></p>

<p>2.<a href="http://www.newsmth.net/bbsanc.php?path=%2Fgroups%2Fsci.faq%2FNumComp%2Ffor%2FFortran%2FM.1091071527.E0" title="http://www.newsmth.net/bbsanc.php?path=%2Fgroups%2Fsci.faq%2FNumComp%2Ffor%2FFortran%2FM.1091071527.E0">http://www.newsmth.net/bbsanc.php?path=%2Fgroups%2Fsci.faq%2FNumComp%2Ffor%2FFortran%2FM.1091071527.E0</a></p>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Fortran获得文本文件行数方法]]></title>
    <link href="http://qingu.github.com/blog/2013/08/12/fortranhuo-de-wen-ben-wen-jian-xing-shu-fang/"/>
    <updated>2013-08-12T12:21:00+08:00</updated>
    <id>http://qingu.github.com/blog/2013/08/12/fortranhuo-de-wen-ben-wen-jian-xing-shu-fang</id>
    <content type="html"><![CDATA[<p><strong>需求的由来</strong></p>

<p>在读取一个文本文件里的数据时，需要将一列数据赋给一个数组，但是不知道确切的行数
，也就不知道怎么声明该数组大小。只能将其声明为可变大小的（allocatable）数组，
在程序运行时确定了行数值，然后根据行数分配数组大小。</p>

<p>可以利用read命令中设置字段IOSTAT或END来确定文本文件的行数。</p>

<p><code>read(UNIT=num, FMT=format, ...,IOSTAT=stat, ..., END=endlabel,...)</code></p>

<!--more-->

<p><strong>方法</strong></p>

<p>1.设置字段IOSTAT</p>

<p>IOSTAT=stat </p>

<p>在读取文件过程中，会返回一个整数值给stat变量，用来说明文件的读状态，其中：</p>

<p>stat&gt;0  表示读取操作发生错误</p>

<p>stat=0  表示读取操作正常</p>

<p>stat&lt;0  表示文件读取结束</p>

<p>当返回的stat值小于0说明文件读取结束，我们就利用该功能获得文本文件行数。</p>

<p>```
   program get_num_records
   implicit none
   integer :: NR, stat
   character(len=79) :: buffer</p>

<p>open(15,file=’example’)</p>

<p>NR=0
   do while(.true.)
	 read(unit=15,fmt=”(A79)”,iostat=stat) buffer
	 if(stat==0) then
	   NR = NR + 1
	 else if(stat&gt;0) then
	   write(<em>,</em>) ‘Something is wrong with READING operation’
	 else
	   exit
	 endif
   enddo</p>

<p>close(15)</p>

<pre><code>write(*,*) 'The number of Lines is', NR
</code></pre>

<p>end
```</p>

<p>2.设置字段END</p>

<p>END=endlabel </p>

<p>读到文件末尾时，跳到行代码endlabel处继续执行</p>

<p>主要程序代码为：</p>

<p>```
    …
	NR=0
	do while(.true.)
	  read(unit=15,fmt=”(A79)”,end=100) buffer
	  NR = NR + 1
	enddo</p>

<pre><code>100 print *, NR
... ```
</code></pre>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Fortran接收命令行参数方法]]></title>
    <link href="http://qingu.github.com/blog/2013/08/04/fortranjie-shou-ming-ling-xing-can-shu-fang-fa/"/>
    <updated>2013-08-04T08:53:00+08:00</updated>
    <id>http://qingu.github.com/blog/2013/08/04/fortranjie-shou-ming-ling-xing-can-shu-fang-fa</id>
    <content type="html"><![CDATA[<p>在实际编程中常遇到下面一种情况：每次执行程序前需要修改程序中某些参数变量，再编
译、执行；然后再修改参数变量… ，如此显得麻烦。如果需要修改的参数很多，可以考
虑使用namelist设置变量。但是只有一两个参数需要修改的话，可以考虑Fortran中获取
命令行参数的方法。</p>

<!--more-->

<p>Fortran主要通过以下两种内置子程序实现获取命令行参数目的。</p>

<p><strong>1.GET_COMMAND_ARGUMENT(number, value, length, status)</strong></p>

<p>功能：获取命令行传递的第 <code>number</code> 个参数</p>

<p>标准：Fortran 2003以上</p>

<p>语法：GET_COMMAND_ARGUMENT(number [, value, length, status])</p>

<p>参数：</p>

<p>number – intent(in)，整型标量，且 &gt;=0</p>

<p>value  – intent(out),可选参数，字符类型标量</p>

<p>length – intent(out),可选参数，整型标量</p>

<p>status – intent(out),可选参数，整型标量</p>

<p>返回值：</p>

<p>调用 GET_COMMAND_ARGUMENT 子程序， value参数保留第nubmer个命令行参数。如果
  value不能容纳这个参数，参数被截断以适应value长度。如果命令行上指定参数个数小
  于number参数，value被赋为空白。如果nubmer=0，value值为程序名。length参数包含
  第nubmer个命令行参数的长度。如果参数取回失败，status为一正值；如果value包含
  截断的命令行参数，status为-1，否则status=0</p>

<p>相关子程序：</p>

<p>GET_COMMAND : 用于获取整个命令行</p>

<p>COMMAND_ARGUMENT_COUNT : 获取命令行参数个数</p>

<p>示例：</p>

<p>```
   PROGRAM test_get_command_argument
            INTEGER :: i
            CHARACTER(len=32) :: arg</p>

<pre><code>        i = 0
        DO
          CALL get_command_argument(i, arg)
          IF (LEN_TRIM(arg) == 0) EXIT
      
          WRITE (*,*) TRIM(arg)
          i = i+1
        END DO
      END PROGRAM ```
</code></pre>

<p>运行程序:</p>

<p>```
    $./test_get_command_argument aa 4 3.45</p>

<pre><code>./test_get_command_argument
aa
4
3.45 ```
</code></pre>

<p><strong>2.GETARG(pos, value)</strong></p>

<p>功能：取回命令行传递的第pos个参数。该内置程序提供向后兼容GNU Fortran 77。新代
 码里，建议使用Fortran 2003标准提供的GET_COMMAND_ARGUMENT内置子程序。</p>

<p>语法：GETARG(pos, value)</p>

<p>参数：</p>

<p>pos   – intent(in)，整型标量，pos &gt;= 0</p>

<p>value – intent(out)，字符类型</p>

<p>返回值：</p>

<p>调用GETARG子程序，value参数保留第pos个命令行参数。如果value不能容纳不下参数
  ，截断该参数适应value长度。如果命令行指定的参数小于pos，value赋为空。如果
  pos=0，value值为程序名。</p>

<p>相关子程序：</p>

<p>IARGC : 获取命令行参数个数</p>

<p>示例：</p>

<p>```
      PROGRAM test_getarg
            INTEGER :: i
            CHARACTER(len=32) :: arg</p>

<pre><code>        DO i = 1, iargc()
          CALL getarg(i, arg)
          WRITE (*,*) arg
        END DO
      END PROGRAM ```
</code></pre>

<hr />

<p><strong>数据类型转换</strong></p>

<p>通过上面介绍的两个子程序可以获得命令行参数，但我们也注意到子程序返回的命令行参
数为字符类型，如果我需要获得其他类型（如整型、实型）的参数怎么办？</p>

<p>我们可以利用Fortran内部文件实现数据类型转换。</p>

<p>彭国伦建议将内部文件（Internal File）称为“字符串变量文件”，这个叫法比较贴切。
我猜测Fortran中写入文本文件实际经过两个过程：首先将数据转换为字符类型，然后将字符符
号写入文件中。读文件则是先将文件中数据以字符类型读入，然后根据赋给的变量类型进行相应
类型转化。这样看的话，内部文件方法是将字符串变量看成一个“文件”，然后写操作将数据转化为字
符类型，然后“写入”字符串变量这个“文件”中，从而间接实现类型转换。</p>

<p>字符转换数值型，使用 <code>read(str, *) numeric</code>;
数值型转换成字符型，使用 <code>write(str, *) numeric</code> ,可以使用格式化控制字符串格式
。</p>

<p>以下是用GET_COMMAND_ARGUMENT子程序获得命令行上数值型参数示例。</p>

<p>```
	program get_cmdline_args
	integer :: argINT
	real    :: argREAL
	character(len=10) :: arg1
	character(len=10) :: arg2</p>

<pre><code>call get_command_argument(1,arg1)
call get_command_argument(2,arg2)

read(arg1,*) argINT
read(arg2,*) argREAL

argINT = argINT + 1
argREAL = argREAL + 2.0

write(*,*) arg1, arg2
write(*,*) argINT, argREAL

end ```
</code></pre>

<p>运行程序：</p>

<p>``` 
   $ ./get_cmdline_args 2 3.5
   2         3.5     <br />
         3           5.5000000</p>

<p>```</p>

<p>参考文章：</p>

<p><a href="http://gcc.gnu.org/onlinedocs/gfortran/GET_005fCOMMAND_005fARGUMENT.html">http://gcc.gnu.org/onlinedocs/gfortran/GET<em>005fCOMMAND</em>005fARGUMENT.html</a></p>

<p><a href="http://gcc.gnu.org/onlinedocs/gfortran/GETARG.html">http://gcc.gnu.org/onlinedocs/gfortran/GETARG.html</a></p>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[segmentation fault产生根本原因]]></title>
    <link href="http://qingu.github.com/blog/2013/05/31/segmentation-faultchan-sheng-gen-ben-yuan-yin/"/>
    <updated>2013-05-31T20:41:00+08:00</updated>
    <id>http://qingu.github.com/blog/2013/05/31/segmentation-faultchan-sheng-gen-ben-yuan-yin</id>
    <content type="html"><![CDATA[<h2 id="section">前言</h2>
<p>本文译自Intel® Developer Zone上文章<a href="http://software.intel.com/en-us/articles/determining-root-cause-of-sigsegv-or-sigbus-errors" title="Determining Root Cause of Segmentation Faults SIGSEGV or SIGBUS errors">Determining Root Cause of Segmentation
Faults SIGSEGV or SIGBUS errors</a>。</p>

<!--more-->

<h2 id="section-1">正文</h2>
<p><strong>问题</strong>：当我运行由Intel Fortran编译器编译的代码时，在Linux平台得到’sigsegv’
错误提示(或Mac OS X平台sigbus提示)。这份代码在&lt;先去编译器/平台&gt;上运行多年没出
问题。这是Intel编译器一个bug吗？</p>

<p><strong>运行环境</strong>：linux 或 Mac OS X</p>

<p><strong>根本原因</strong>：有许多可能原因。段错误(segmentation fault)(Mac OS X下是bus
        error)是一个有多种原因的通用错误。下面我们描述潜在的原因并给出建议以避
免段错误。</p>

<p><strong>可能原因 #1 Fortran指定栈空间耗尽：解决方法 -heap-arrays编译选项</strong></p>

<p>Intel Fortran编译器使用栈空间分配许多数组数据的临时或中间副本。</p>

<p><strong>非OpenMP和非自动并行应用</strong>：如果你的程序未使用OpenMP或
Auto-parallelization(-parallel编译开关)且编译器版本是Linux v9.1.037(或所有Mac
        OS 编译器)，那么可以尝试 <code>-heap-arrays</code> 编译选项。OpenMP或
Auto-parallelization用户如用低于v9.1.0137的Linux
编译器请阅读<strong>可能原因 #2</strong>关于不限制栈大小的提示。</p>

<p><code>
	-heap-arrays
</code></p>

<p>如果这个解决了sigsegv或bus error错误的话，可以不用往下读了。你可能想读pdf附件
学习关于临时数组何时何处被创建内容。改变一点代码可以避免一些临时数组，从而减少
对临时副本的需求(改善性能)。同时，<code>-heap-arrays</code>编译器选项有一个可选参数[size]
来指定大于[size]的数组分配到堆(heap)中的阈值大小，单位为Kbytes，其它小于等于[size]的
分配到堆栈中。例如：</p>

<p><code>
	-heap-arrays 10
</code></p>

<p>将所有大于10Kbytes的自动和临时数组放入堆中。</p>

<p><strong>可能原因 #2 堆栈空间耗尽。 解决方法：增加OpenMP应用或其它应用的堆栈大小</strong></p>

<p>首先尝试<em>增加</em>Linux和Mac OS X的shell堆栈限制。然而，该选项可能对OpenMP或自动并行
代码的数据共享产生无法预料的影响。因此，建议OpenMP和自动并行用户不用
<code>-heap-arrays</code>，转而尝试<em>关掉</em>shell堆栈大小的限制。</p>

<p>Linux, bash: <code>ulimit -s unlimited</code></p>

<p>Linux, csh/tcsh: <code>unlimit stacksize</code></p>

<p>你可以用以下方法检查你的堆栈大小限制，并找到你的shell环境的<code>stack size</code>限制。</p>

<p>bash: <code>ulimit -a</code></p>

<p>csh: <code>limit</code></p>

<p>注意：如果你在一个批处理子系统下运行程序，可能需要将上面命令加入到个人启动配置
文件中(~/.bashrc、~/.profile或~/.cshrc)</p>

<p>对于Mac OS X系统，shell堆栈大小有一个硬上限。对于大多系统，</p>

<p>bash: <code>ulimit -s 65532</code></p>

<p>即设置堆栈限制为64MB。</p>

<p>一个可替代方法是使用一个链接选项增加执行者默认shell堆栈大小，方法记录在此：<a href="http://software.intel.com/en-us/articles/intel-fortran-compiler-increased-stack-usage-of-80-or-higher-compilers-causes-segmentation-fault" title="/en-us/articles/intel-fortran-compiler-increased-stack-usage-of-80-or-higher-compilers-causes-segmentation-fault">/en-us/articles/intel-fortran-compiler-increased-stack-usage-of-80-or-higher-compilers-causes-segmentation-fault</a></p>

<p>重新运行你的程序，如果这个方法解决此问题了，可以不用往下读了。如果你的应用仍然
产生sigsegv或bus error，继续读吧。</p>

<p><strong>可能原因 #2 主要的：由于堆或通用内存耗尽导致堆栈耗尽</strong></p>

<p>在进程内存映射中，堆和堆栈相互向对方增长。如果他们碰撞了，这也能引起一个关于堆分配或下一个堆栈分配的段错误。</p>

<p>也可能应用耗尽所有物理内存+swap缓冲区。记住，对于64位应用，虚拟内存实际上是
unlimited。然而，事实上可消费的内存大小有一个上限，物理ram+swap空间（典型的是
物理内存大小的2倍）。可以通过 <code>free</code> 命令获得该信息。物理内存也可以通过<code>cat
/proc/meminfo</code>中’MemTotal’项和’SwapTotal’项看到。系统本身也需要一些空间，所以
经验法则是尽可能保持应用的内存占用(memory footprint)在MemTotal的80%左右并且不要超过
MemTotal+SwapTotal。</p>

<p>使用<code>-g -traceback</code>编译链接来定位代码终止的地方。</p>

<p><strong>可能原因 #3 由于用户代码错误导致堆栈溢出</strong></p>

<p>有许多用户代码错误可能引起堆栈溢出并导致运行时sigsegv或bus error。由于段错误可
能发生在与堆栈最初溢出地方不相关的程序后面部分，从而导致错误很难发现。</p>

<p>第一步尝试隔离代码错误发生的地方。通过产生一个执行’traceback’来得到。使用ifort
驱动和下面这些选项编译、链接：</p>

<p><code>
	-g -traceback
</code></p>

<p>当代码出错，通常会得到关于错误发生时的调用堆栈的报告。如果没有得到一个堆栈
traceback，确保在编译和链接时都用到了<code>-g</code>并且确保编译时使用了<code>-traceback</code>。有
这样的情况：当程序在内核空间时段错误发生，因此没有用户堆栈用于trace back。
Intel正致力于在未来版本中改善这点。</p>

<p>trace back报告从下往上读。找到最上面的子程序或函数并通过行号来隔离出哪条指令引
起错误的。检查这条语句的用户代码错误。如果没有明显用户错误，继续往下。</p>

<p><strong>可能原因 #4 数组越界. 解决方法：-check bounds</strong></p>

<p><code>-check bounds</code>编译选项提供数组访问和字符串表达式运行时检查保证索引在数组边界
内。这个检查有助于找到索引超出数组申明大小的情况。这个选项对性能影响很大，影响
程度取决于应用中多少数组访问被执行。同时，<code>-check bounds</code>数组越界检查不对最外
维指定为*的虚参数组或上下维都为1的数组执行。为开启边界检查，用下面选项编译：</p>

<p><code>
	-check bounds -g
</code></p>

<p>并运行程序。检查在运行时执行，而不是在编译时执行。如果这样能发现错误，停下来。
没有，继续往下读。</p>

<p><strong>可能原因 #5 把函数当作子程序调用(calling)或把子程序当作函数调用(invoking)</strong></p>

<p>当用户做类似于这样的事，用户代码错误：</p>

<p>```
— main program —
…
call ThisIsIllegal( some_arguments )
…
— end main program —</p>

<p>— ThisIsIllegal —
integer function ThisIsIllegal( some_arguments )
…
— end ThisIsIllegal —
```</p>

<p>上面例子中，主程序以子程序调用方式调用ThisIsIllegal，然而ThisIsIllegal申明是函
数。这会引起堆栈溢出。为测试这些情况，尝试使用编译选项</p>

<p><code>
	-fp-stack-check -g -traceback
</code></p>

<p>用这些选项编译并运行。如果堆栈由于类似上面的原因崩溃，代码将推出并给出一个
stack trace。</p>

<p>可以用一个编译时检查来检查程序接口：</p>

<p><code>
	-gen-interfaces -warn interfaces
</code></p>

<p>编译时检查将为你的程序产生INTERFACE块。<code>-warn</code>接口随后将使用这些编译器产生的接口并
检查程序调用确保参数和接口在被调用者和调用者之间匹配。注意这个检查只对Fortran
源代码起作用。对混编程序不检查接口。</p>

<p><strong>可能原因 #6 传递非连续数组部分引起的大的临时数组. 解决方法：使用 -check
arg_temp_created 侦测并通过包含显式接口和assumed shaped 数组代码修复</strong></p>

<p>考虑这个例子：</p>

<p><code>
--- main program ---
real(8) :: f(1800,3600,1)
external sub
...
call sub( f(1:900,:,:) )
...
--- end main program ---
</code></p>

<p>子程序‘sub’在单独的编译源文件中：</p>

<p>```
— external subroutine “sub” —
subroutine sub( f )
real(8) :: f(900,3600,1)
…
— end subroutine “sub” —</p>

<p>```</p>

<p>这种情况下，‘sub’期望一个连续数组，大小为900<em>3600</em>1。然而，调用传递一个内存中
非连续的数组。这种情况下，编译器将在调用时产生一个临时数组复制数组”f”非连续块
元素使之成为连续数组，这这是”sub“所期待的。除非指定
<code>-heap-arrays</code>，否则这个临时数组分配在堆栈中。</p>

<p>为了检测代码里是否发生这样的情况，用下面选项编译：</p>

<p><code>
	-check arg_temp_created
</code></p>

<p>并运行程序。当临时参数被创建，将输出信息。为了解决这个问题，创建一个显式接口，
并在”sub“使用一个assumed shaped数组将移除临时数组的需要。</p>

<p>```
— main —
real(8) :: f(1800,3600,1)
interface
subroutine sub(f)
real(8) :: f(:,:,:)
end subroutine sub
end interface
…
call sub( f(1:900,:,:) )
…
— end main program —</p>

<p>— “sub” —
subroutine sub( f )
real(8) :: f(:,:,:)
…
end subroutine sub</p>

<p>```</p>

<p>记住，虽然这样避免了临时数组，编译器知道”sub”内数组”f”可能是非连续的。因此，一
些使用”f”的语句的优化可能关闭，进而影响性能。</p>

<p><strong>不属于以上情况：解决方法-进一步深入分析</strong></p>

<p>99%的sigsegv或bus error错误原因是上面列举的情况。然而，也有其他可能情况导致段
错误。</p>

<p>如果你的应用链接外部库，确保库和编译器兼容。外部库是否用Intel编译器编译的？如
果是，是否主要版本一致-即库用Intel Fortran v9.1编译的，但你的应用用Intel
Fortran v10.x或v11.x编译的？ Intel只保证主版本内兼容(9,10,11就是主版本例子)</p>

<p>如果外部库来自于软件销售商或工具：该销售商是否明确Intel编译器兼容，如果确认，
他们用哪个版本验证他们的库？你应该只是用销售商验证过的Intel编译器版本。</p>

<p><strong>当所有都失败了…</strong></p>

<p>提交给用户论坛吧！</p>

]]></content>
  </entry>
  
</feed>
