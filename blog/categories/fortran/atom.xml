<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Fortran | MetMan]]></title>
  <link href="http://qingu.github.com/blog/categories/fortran/atom.xml" rel="self"/>
  <link href="http://qingu.github.com/"/>
  <updated>2013-11-17T13:54:19+08:00</updated>
  <id>http://qingu.github.com/</id>
  <author>
    <name><![CDATA[Qingu Jiang]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[[经验总结]二进制数据不同平台传输一致性问题]]></title>
    <link href="http://qingu.github.com/blog/2013/11/04/jing-yan-zong-jie-er-jin-zhi-shu-ju-bu-tong-ping-tai-chuan-shu-%5B%3F%5D-zhi-xing-wen-ti/"/>
    <updated>2013-11-04T21:10:00+08:00</updated>
    <id>http://qingu.github.com/blog/2013/11/04/jing-yan-zong-jie-er-jin-zhi-shu-ju-bu-tong-ping-tai-chuan-shu-[?]-zhi-xing-wen-ti</id>
    <content type="html"><![CDATA[<h3 id="section">应用场景</h3>
<p>经常遇到这样一种情况：将二进制数据从windows通过FTP软件传到AIX/Linux系统下，然
后在AIX/Linux系统下用相应程序读取该数据时出现错误。</p>

<!--more-->

<h3 id="section-1">可能原因和解决方法</h3>
<p>如果传输的是平台无关的数据类型，如nc格式或grib格式的数据，可能原因是FTP软件传
输方式问题，传输二进制数据应该使用binary方式，但有可能FTP软件选择了ASCII方式，
从而导致数据传输出错（使用xmanager的Xftp容易出这种问题，推荐FileZila）。我们可以
使用md5sum验证这个可能性。工作原理是MD5码相当于一个文件的“指纹”，同一文件的
MD5码是不变的，但文件被修改后MD5码也就不相同了。我们
只要验证数据文件在windows和linux下MD5码是否相同就可以确定数据是否被修改。</p>

<ul>
  <li>Linux下使用<code>md5sum</code>命令生成文件MD5码</li>
</ul>

<p>```
$ md5sum filename</p>

<p>a526b653b8820296e074a2a635505a5f
```</p>

<p>运行该命令，会生成一个32个字符的十六进制串。</p>

<ul>
  <li>windows下可到网上下载验证MD5的软件，如<code>winMd5Sum</code></li>
</ul>

<p>将两种平台生成MD5码对比下，如果不一致说明传输过程数据改变了。需要将ftp传输方式
改为binary或者换个FTP软件试试。</p>

<h3 id="section-2">另一种原因</h3>
<p>如果传输的是Fortran生成的unformatted数据，还有一种可能原因是不同平
台的数据端序问题，在X86平台下默认生成的是little_endian类型，而IBM的power cpu上
是big_endian类型。</p>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Fortran声明数组过大问题解决办法]]></title>
    <link href="http://qingu.github.com/blog/2013/08/12/fortransheng-ming-shu-zu-guo-da-wen-ti-jie-jue-ban-fa/"/>
    <updated>2013-08-12T18:38:00+08:00</updated>
    <id>http://qingu.github.com/blog/2013/08/12/fortransheng-ming-shu-zu-guo-da-wen-ti-jie-jue-ban-fa</id>
    <content type="html"><![CDATA[<p>在实际编程中会遇到Fortran程序中声明的数组过大，程序一运行就崩溃，报“段错误”等
错误提示。我在<a href="http://stackoverflow.com/questions/5795938/stack-overflow-in-fortran90" title="stackoverflow">stackoverflow</a>上看到一个针对此问题的解决方法，翻译成中文和大
家分享。</p>

<!--more-->

<hr />

<p>实际编程中，程序经常用到局部大数组用于中间计算。局部变量通常存储在堆栈中，堆栈
一般是整个系统内存的一小部分，通常几十MB。当局部变量大小超出堆栈大小，将会看到
如下症状——<strong>在调用相关程序后，但第一条执行语句前发生堆栈溢出</strong>。</p>

<p>当出现这个问题，最好的办法是找到相关的局部大变量，然后再决定做什么。</p>

<p>一旦定位到变量，并且确定是问题的出处，有一些做法。将数组变小是一种做法。另外一
种方法是使堆栈大小变大，在Linux下可用<code>ulimit -s [newsize]</code>。然而这不是一劳永逸
的方法，在windows机器下必须做些其他。</p>

<p>避免这个问题的另一类方法是不把大数据放到堆栈中，而是放在内存中其他部分（堆中）
。<strong>可用通过给数组加上<code>save</code>属性（C中是<code>static</code>）</strong>，这将使变量放在堆中，因此使变
量在调用之间的持久存在。该方法缺点潜在的改变子程序行为，并且意味子程序不能递归
使用，类似线程不安全。优点是此方法容易并且便于移植。然而，这只对固定大小的局部
变量有用，如果临时数组大小依赖于输入，就不能用该方法（由于不是单个变量为save，
每次程序被调用时可能大小不同）。</p>

<p><strong>有编译器选项可以指定将所有数组（或大于一定大小的所有数组）放在堆中而不是堆栈里</strong>
，每个Fortran编译器都有这个选项。对于ifort，linux中是<code>-heap-arrays</code>或windows中
<code>/heap-arrays</code>。对于gfortran，这可能是默认的。确保会发生什么是有好处的，但这意
味着要使代码工作每个编译器选项不一样。</p>

<p>最后，<strong>可以将数组变为allocatable。分配数组将放在堆中，但指向他们的变量在堆栈中</strong>，
这样你就得到两种方法的好处。同时这完全是标准Fortran用法，完全可移植。缺点是
需要改变代码。而且，分配过程会花大量时间，如果调用子程序很多次，可能会注意到轻
微拖慢。（然而这个可能的性能退化容易修复，如果多次调用相同大小数组，可以用一个
可选参数传递给一个预分配的局部数组）</p>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Fortran中动态数组]]></title>
    <link href="http://qingu.github.com/blog/2013/08/12/fortranzhong-dong-tai-shu-zu/"/>
    <updated>2013-08-12T15:28:00+08:00</updated>
    <id>http://qingu.github.com/blog/2013/08/12/fortranzhong-dong-tai-shu-zu</id>
    <content type="html"><![CDATA[<h3 id="section">动态数组</h3>

<p>Fortran90中有三种动态数组。这三种动态数组允许在运行时创建，数组大小由计算或输
入得到的值决定。三种动态数组是：</p>

<ul>
  <li>
    <p>自动数组(automatic arrays)</p>
  </li>
  <li>
    <p>可分配数组(allocatable arrays)</p>
  </li>
  <li>
    <p>指针数组(pointer arrays)</p>
  </li>
</ul>

<!--more-->

<h4 id="section-1">自动数组</h4>

<p>自动数组是函数或子程序的局部数组，其大小取决于哑元相关的值。自动数组在程序入口处自动创
建（分配）并且在程序出口处自动销毁。自动数组大小一般在不同程序调用时不一样。</p>

<p>自动数组例子：</p>

<p><code>
	RECURSIVE SUBROUTINE F( N )
	INTEGER :: N
	REAL :: X ( N )     ! an automatic array
	REAL :: Y ( 1000 )  ! an explicit-shape local array on the stack 
</code>   </p>

<p>```
	function F18(A,N)
	integer  N                     ! A scalar
	 real A(:,:)                   ! An assumed shape array
	 real F18(size(A,1)  )         ! The function result itself is
								   !  an automatic array.</p>

<pre><code> complex  Local_1(N,2*N+3)     ! Local_1 is an automatic array
							   !  whose size is based on N.

real Local_2(size(A,1),size(A,2))     ! Local_2 is an automatic array
                               !  exactly the same size as A.

real Local_3(4*size(A,2))      ! Local_3 is a one-dimensional 
                               !  array 4 times the size of 
                             ! the second dimension of A.
 ...                           !  
end function F18 ```
</code></pre>

<p>注意声明自动数组中像SIZE这样的内置查询函数。Fortran90提供许多允许出现在声明中
的查询函数。数组边界、大小，字符类型长度及kind类型都可以用含有这些查询函数的表
达式说明。一个说明表达式是一个标量整型表达式，操作数的值在进入程序时确定。这样
的操作数包括常量、内置程序的引用和通过哑元、模块、common和主程序可访问的变量。</p>

<h4 id="section-2">可分配数组</h4>

<p>可分配数组是那些显式声明ALLOCATABLE的数组。一个可分配数组可以是一个程序局部变
量，也可以放在模块变量中，对模块中所有程序来说是全局的。一个可分配数组使用
ALLOCATAE语句显式分配，用DEALLOCATE语句显式销毁或当其为未指定SAVE属性的局部数
组时，退出程序时自动销毁。一个全局可分配数组一直存在直到显式销毁（deallocate语
句可能与allocate语句不在同一个程序中）。如果数组大小取决于一个计算的值，而不是
哑元或模块变量、common或主程序，使用可分配数组。可用ALLOCATED内置函数测试一个
可分配数组的分配状态。</p>

<p>可分配数组例子：</p>

<p>```
	subroutine Peach
	use Recipe                    ! Accesses global allocatable array, Jam.</p>

<pre><code> real, allocable :: Pie(:,:)   ! Pie is a 2-dimensional allocatable array.
...
 allocate ( Pie(N,2*N )   )    ! Allocate a local allocatable array.

 if (.not.allocated(Jam)) allocate ( Jam(4*M) )
                               ! Allocate a global allocable array if
                               ! it is not already allocated.
 ... deallocate ( Pie )
 ...
end subroutine Peach

module Recipe                  ! Jam is a global allocatable array, and
 real, allocable :: Jam(:)     ! can be allocated and deallocated in
 ...                           ! any procedure(s) using this module.
end module Recipe ```
</code></pre>

<p>注意可分配数组的声明边界为冒号，表明这些在后面提供。这使可分配数组声明看起来像
假设大小（assumed-shape）哑元声明，这是因为维数大小的“推迟”特征类似的。</p>

<h4 id="section-3">指针数组</h4>

<p>指针数组类似于可分配数组，他们用ALLOCATE语句显式分配，拥有任意计算大小并且用
DEALLOCATE语句显式销毁。</p>

<h4 id="section-4">数组在内存中存储位置</h4>

<p>数组的存储方式不完全是Fortran语言所决定的，还与编译器有关。但是常见的默认
情况是allocatable array放在堆里（heap），automatic array放在栈里（stack）。
一般编译器的栈的大小都设置得不大，容易出现栈的空间不够的情况，在Visual Fortran
里提示stack overflow，在f77这样的unix平台下的编译器里通常是core dump，
这时把栈的大小改大就能解决问题，改的方法就依编译器而定了。</p>

<p>参考文章：</p>

<p>1.<a href="http://www.phy.ornl.gov/csep/pl/node17.html" title="http://www.phy.ornl.gov/csep/pl/node17.html">http://www.phy.ornl.gov/csep/pl/node17.html</a></p>

<p>2.<a href="http://www.newsmth.net/bbsanc.php?path=%2Fgroups%2Fsci.faq%2FNumComp%2Ffor%2FFortran%2FM.1091071527.E0" title="http://www.newsmth.net/bbsanc.php?path=%2Fgroups%2Fsci.faq%2FNumComp%2Ffor%2FFortran%2FM.1091071527.E0">http://www.newsmth.net/bbsanc.php?path=%2Fgroups%2Fsci.faq%2FNumComp%2Ffor%2FFortran%2FM.1091071527.E0</a></p>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Fortran获得文本文件行数方法]]></title>
    <link href="http://qingu.github.com/blog/2013/08/12/fortranhuo-de-wen-ben-wen-jian-xing-shu-fang/"/>
    <updated>2013-08-12T12:21:00+08:00</updated>
    <id>http://qingu.github.com/blog/2013/08/12/fortranhuo-de-wen-ben-wen-jian-xing-shu-fang</id>
    <content type="html"><![CDATA[<p><strong>需求的由来</strong></p>

<p>在读取一个文本文件里的数据时，需要将一列数据赋给一个数组，但是不知道确切的行数
，也就不知道怎么声明该数组大小。只能将其声明为可变大小的（allocatable）数组，
在程序运行时确定了行数值，然后根据行数分配数组大小。</p>

<p>可以利用read命令中设置字段IOSTAT或END来确定文本文件的行数。</p>

<p><code>read(UNIT=num, FMT=format, ...,IOSTAT=stat, ..., END=endlabel,...)</code></p>

<!--more-->

<p><strong>方法</strong></p>

<p>1.设置字段IOSTAT</p>

<p>IOSTAT=stat </p>

<p>在读取文件过程中，会返回一个整数值给stat变量，用来说明文件的读状态，其中：</p>

<p>stat&gt;0  表示读取操作发生错误</p>

<p>stat=0  表示读取操作正常</p>

<p>stat&lt;0  表示文件读取结束</p>

<p>当返回的stat值小于0说明文件读取结束，我们就利用该功能获得文本文件行数。</p>

<p>```
   program get_num_records
   implicit none
   integer :: NR, stat
   character(len=79) :: buffer</p>

<p>open(15,file=’example’)</p>

<p>NR=0
   do while(.true.)
	 read(unit=15,fmt=”(A79)”,iostat=stat) buffer
	 if(stat==0) then
	   NR = NR + 1
	 else if(stat&gt;0) then
	   write(<em>,</em>) ‘Something is wrong with READING operation’
	 else
	   exit
	 endif
   enddo</p>

<p>close(15)</p>

<pre><code>write(*,*) 'The number of Lines is', NR
</code></pre>

<p>end
```</p>

<p>2.设置字段END</p>

<p>END=endlabel </p>

<p>读到文件末尾时，跳到行代码endlabel处继续执行</p>

<p>主要程序代码为：</p>

<p>```
    …
	NR=0
	do while(.true.)
	  read(unit=15,fmt=”(A79)”,end=100) buffer
	  NR = NR + 1
	enddo</p>

<pre><code>100 print *, NR
... ```
</code></pre>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Fortran接收命令行参数方法]]></title>
    <link href="http://qingu.github.com/blog/2013/08/04/fortranjie-shou-ming-ling-xing-can-shu-fang-fa/"/>
    <updated>2013-08-04T08:53:00+08:00</updated>
    <id>http://qingu.github.com/blog/2013/08/04/fortranjie-shou-ming-ling-xing-can-shu-fang-fa</id>
    <content type="html"><![CDATA[<p>在实际编程中常遇到下面一种情况：每次执行程序前需要修改程序中某些参数变量，再编
译、执行；然后再修改参数变量… ，如此显得麻烦。如果需要修改的参数很多，可以考
虑使用namelist设置变量。但是只有一两个参数需要修改的话，可以考虑Fortran中获取
命令行参数的方法。</p>

<!--more-->

<p>Fortran主要通过以下两种内置子程序实现获取命令行参数目的。</p>

<p><strong>1.GET_COMMAND_ARGUMENT(number, value, length, status)</strong></p>

<p>功能：获取命令行传递的第 <code>number</code> 个参数</p>

<p>标准：Fortran 2003以上</p>

<p>语法：GET_COMMAND_ARGUMENT(number [, value, length, status])</p>

<p>参数：</p>

<p>number – intent(in)，整型标量，且 &gt;=0</p>

<p>value  – intent(out),可选参数，字符类型标量</p>

<p>length – intent(out),可选参数，整型标量</p>

<p>status – intent(out),可选参数，整型标量</p>

<p>返回值：</p>

<p>调用 GET_COMMAND_ARGUMENT 子程序， value参数保留第nubmer个命令行参数。如果
  value不能容纳这个参数，参数被截断以适应value长度。如果命令行上指定参数个数小
  于number参数，value被赋为空白。如果nubmer=0，value值为程序名。length参数包含
  第nubmer个命令行参数的长度。如果参数取回失败，status为一正值；如果value包含
  截断的命令行参数，status为-1，否则status=0</p>

<p>相关子程序：</p>

<p>GET_COMMAND : 用于获取整个命令行</p>

<p>COMMAND_ARGUMENT_COUNT : 获取命令行参数个数</p>

<p>示例：</p>

<p>```
   PROGRAM test_get_command_argument
            INTEGER :: i
            CHARACTER(len=32) :: arg</p>

<pre><code>        i = 0
        DO
          CALL get_command_argument(i, arg)
          IF (LEN_TRIM(arg) == 0) EXIT
      
          WRITE (*,*) TRIM(arg)
          i = i+1
        END DO
      END PROGRAM ```
</code></pre>

<p>运行程序:</p>

<p>```
    $./test_get_command_argument aa 4 3.45</p>

<pre><code>./test_get_command_argument
aa
4
3.45 ```
</code></pre>

<p><strong>2.GETARG(pos, value)</strong></p>

<p>功能：取回命令行传递的第pos个参数。该内置程序提供向后兼容GNU Fortran 77。新代
 码里，建议使用Fortran 2003标准提供的GET_COMMAND_ARGUMENT内置子程序。</p>

<p>语法：GETARG(pos, value)</p>

<p>参数：</p>

<p>pos   – intent(in)，整型标量，pos &gt;= 0</p>

<p>value – intent(out)，字符类型</p>

<p>返回值：</p>

<p>调用GETARG子程序，value参数保留第pos个命令行参数。如果value不能容纳不下参数
  ，截断该参数适应value长度。如果命令行指定的参数小于pos，value赋为空。如果
  pos=0，value值为程序名。</p>

<p>相关子程序：</p>

<p>IARGC : 获取命令行参数个数</p>

<p>示例：</p>

<p>```
      PROGRAM test_getarg
            INTEGER :: i
            CHARACTER(len=32) :: arg</p>

<pre><code>        DO i = 1, iargc()
          CALL getarg(i, arg)
          WRITE (*,*) arg
        END DO
      END PROGRAM ```
</code></pre>

<hr />

<p><strong>数据类型转换</strong></p>

<p>通过上面介绍的两个子程序可以获得命令行参数，但我们也注意到子程序返回的命令行参
数为字符类型，如果我需要获得其他类型（如整型、实型）的参数怎么办？</p>

<p>我们可以利用Fortran内部文件实现数据类型转换。</p>

<p>彭国伦建议将内部文件（Internal File）称为“字符串变量文件”，这个叫法比较贴切。
我猜测Fortran中写入文本文件实际经过两个过程：首先将数据转换为字符类型，然后将字符符
号写入文件中。读文件则是先将文件中数据以字符类型读入，然后根据赋给的变量类型进行相应
类型转化。这样看的话，内部文件方法是将字符串变量看成一个“文件”，然后写操作将数据转化为字
符类型，然后“写入”字符串变量这个“文件”中，从而间接实现类型转换。</p>

<p>字符转换数值型，使用 <code>read(str, *) numeric</code>;
数值型转换成字符型，使用 <code>write(str, *) numeric</code> ,可以使用格式化控制字符串格式
。</p>

<p>以下是用GET_COMMAND_ARGUMENT子程序获得命令行上数值型参数示例。</p>

<p>```
	program get_cmdline_args
	integer :: argINT
	real    :: argREAL
	character(len=10) :: arg1
	character(len=10) :: arg2</p>

<pre><code>call get_command_argument(1,arg1)
call get_command_argument(2,arg2)

read(arg1,*) argINT
read(arg2,*) argREAL

argINT = argINT + 1
argREAL = argREAL + 2.0

write(*,*) arg1, arg2
write(*,*) argINT, argREAL

end ```
</code></pre>

<p>运行程序：</p>

<p>``` 
   $ ./get_cmdline_args 2 3.5
   2         3.5     <br />
         3           5.5000000</p>

<p>```</p>

<p>参考文章：</p>

<p><a href="http://gcc.gnu.org/onlinedocs/gfortran/GET_005fCOMMAND_005fARGUMENT.html">http://gcc.gnu.org/onlinedocs/gfortran/GET<em>005fCOMMAND</em>005fARGUMENT.html</a></p>

<p><a href="http://gcc.gnu.org/onlinedocs/gfortran/GETARG.html">http://gcc.gnu.org/onlinedocs/gfortran/GETARG.html</a></p>

]]></content>
  </entry>
  
</feed>
