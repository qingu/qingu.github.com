<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Fortran | MetMan]]></title>
  <link href="http://qingu.github.com/blog/categories/fortran/atom.xml" rel="self"/>
  <link href="http://qingu.github.com/"/>
  <updated>2013-07-06T15:56:58+08:00</updated>
  <id>http://qingu.github.com/</id>
  <author>
    <name><![CDATA[Qingu Jiang]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[segmentation fault产生根本原因]]></title>
    <link href="http://qingu.github.com/blog/2013/05/31/segmentation-faultchan-sheng-gen-ben-yuan-yin/"/>
    <updated>2013-05-31T20:41:00+08:00</updated>
    <id>http://qingu.github.com/blog/2013/05/31/segmentation-faultchan-sheng-gen-ben-yuan-yin</id>
    <content type="html"><![CDATA[<h2 id="section">前言</h2>
<p>本文译自Intel® Developer Zone上文章<a href="http://software.intel.com/en-us/articles/determining-root-cause-of-sigsegv-or-sigbus-errors" title="Determining Root Cause of Segmentation Faults SIGSEGV or SIGBUS errors">Determining Root Cause of Segmentation
Faults SIGSEGV or SIGBUS errors</a>。</p>

<!--more-->

<h2 id="section-1">正文</h2>
<p><strong>问题</strong>：当我运行由Intel Fortran编译器编译的代码时，在Linux平台得到’sigsegv’
错误提示(或Mac OS X平台sigbus提示)。这份代码在&lt;先去编译器/平台&gt;上运行多年没出
问题。这是Intel编译器一个bug吗？</p>

<p><strong>运行环境</strong>：linux 或 Mac OS X</p>

<p><strong>根本原因</strong>：有许多可能原因。段错误(segmentation fault)(Mac OS X下是bus
        error)是一个有多种原因的通用错误。下面我们描述潜在的原因并给出建议以避
免段错误。</p>

<p><strong>可能原因 #1 Fortran指定栈空间耗尽：解决方法 -heap-arrays编译选项</strong></p>

<p>Intel Fortran编译器使用栈空间分配许多数组数据的临时或中间副本。</p>

<p><strong>非OpenMP和非自动并行应用</strong>：如果你的程序未使用OpenMP或
Auto-parallelization(-parallel编译开关)且编译器版本是Linux v9.1.037(或所有Mac
        OS 编译器)，那么可以尝试 <code>-heap-arrays</code> 编译选项。OpenMP或
Auto-parallelization用户如用低于v9.1.0137的Linux
编译器请阅读<strong>可能原因 #2</strong>关于不限制栈大小的提示。</p>

<p><code>
	-heap-arrays
</code></p>

<p>如果这个解决了sigsegv或bus error错误的话，可以不用往下读了。你可能想读pdf附件
学习关于临时数组何时何处被创建内容。改变一点代码可以避免一些临时数组，从而减少
对临时副本的需求(改善性能)。同时，<code>-heap-arrays</code>编译器选项有一个可选参数[size]
来指定大于[size]的数组分配到堆(heap)中的阈值大小，单位为Kbytes，其它小于等于[size]的
分配到堆栈中。例如：</p>

<p><code>
	-heap-arrays 10
</code></p>

<p>将所有大于10Kbytes的自动和临时数组放入堆中。</p>

<p><strong>可能原因 #2 堆栈空间耗尽。 解决方法：增加OpenMP应用或其它应用的堆栈大小</strong></p>

<p>首先尝试<em>增加</em>Linux和Mac OS X的shell堆栈限制。然而，该选项可能对OpenMP或自动并行
代码的数据共享产生无法预料的影响。因此，建议OpenMP和自动并行用户不用
<code>-heap-arrays</code>，转而尝试<em>关掉</em>shell堆栈大小的限制。</p>

<p>Linux, bash: <code>ulimit -s unlimited</code></p>

<p>Linux, csh/tcsh: <code>unlimit stacksize</code></p>

<p>你可以用以下方法检查你的堆栈大小限制，并找到你的shell环境的<code>stack size</code>限制。</p>

<p>bash: <code>ulimit -a</code></p>

<p>csh: <code>limit</code></p>

<p>注意：如果你在一个批处理子系统下运行程序，可能需要将上面命令加入到个人启动配置
文件中(~/.bashrc、~/.profile或~/.cshrc)</p>

<p>对于Mac OS X系统，shell堆栈大小有一个硬上限。对于大多系统，</p>

<p>bash: <code>ulimit -s 65532</code></p>

<p>即设置堆栈限制为64MB。</p>

<p>一个可替代方法是使用一个链接选项增加执行者默认shell堆栈大小，方法记录在此：<a href="http://software.intel.com/en-us/articles/intel-fortran-compiler-increased-stack-usage-of-80-or-higher-compilers-causes-segmentation-fault" title="/en-us/articles/intel-fortran-compiler-increased-stack-usage-of-80-or-higher-compilers-causes-segmentation-fault">/en-us/articles/intel-fortran-compiler-increased-stack-usage-of-80-or-higher-compilers-causes-segmentation-fault</a></p>

<p>重新运行你的程序，如果这个方法解决此问题了，可以不用往下读了。如果你的应用仍然
产生sigsegv或bus error，继续读吧。</p>

<p><strong>可能原因 #2 主要的：由于堆或通用内存耗尽导致堆栈耗尽</strong></p>

<p>在进程内存映射中，堆和堆栈相互向对方增长。如果他们碰撞了，这也能引起一个关于堆分配或下一个堆栈分配的段错误。</p>

<p>也可能应用耗尽所有物理内存+swap缓冲区。记住，对于64位应用，虚拟内存实际上是
unlimited。然而，事实上可消费的内存大小有一个上限，物理ram+swap空间（典型的是
物理内存大小的2倍）。可以通过 <code>free</code> 命令获得该信息。物理内存也可以通过<code>cat
/proc/meminfo</code>中’MemTotal’项和’SwapTotal’项看到。系统本身也需要一些空间，所以
经验法则是尽可能保持应用的内存占用(memory footprint)在MemTotal的80%左右并且不要超过
MemTotal+SwapTotal。</p>

<p>使用<code>-g -traceback</code>编译链接来定位代码终止的地方。</p>

<p><strong>可能原因 #3 由于用户代码错误导致堆栈溢出</strong></p>

<p>有许多用户代码错误可能引起堆栈溢出并导致运行时sigsegv或bus error。由于段错误可
能发生在与堆栈最初溢出地方不相关的程序后面部分，从而导致错误很难发现。</p>

<p>第一步尝试隔离代码错误发生的地方。通过产生一个执行’traceback’来得到。使用ifort
驱动和下面这些选项编译、链接：</p>

<p><code>
	-g -traceback
</code></p>

<p>当代码出错，通常会得到关于错误发生时的调用堆栈的报告。如果没有得到一个堆栈
traceback，确保在编译和链接时都用到了<code>-g</code>并且确保编译时使用了<code>-traceback</code>。有
这样的情况：当程序在内核空间时段错误发生，因此没有用户堆栈用于trace back。
Intel正致力于在未来版本中改善这点。</p>

<p>trace back报告从下往上读。找到最上面的子程序或函数并通过行号来隔离出哪条指令引
起错误的。检查这条语句的用户代码错误。如果没有明显用户错误，继续往下。</p>

<p><strong>可能原因 #4 数组越界. 解决方法：-check bounds</strong></p>

<p><code>-check bounds</code>编译选项提供数组访问和字符串表达式运行时检查保证索引在数组边界
内。这个检查有助于找到索引超出数组申明大小的情况。这个选项对性能影响很大，影响
程度取决于应用中多少数组访问被执行。同时，<code>-check bounds</code>数组越界检查不对最外
维指定为*的虚参数组或上下维都为1的数组执行。为开启边界检查，用下面选项编译：</p>

<p><code>
	-check bounds -g
</code></p>

<p>并运行程序。检查在运行时执行，而不是在编译时执行。如果这样能发现错误，停下来。
没有，继续往下读。</p>

<p><strong>可能原因 #5 把函数当作子程序调用(calling)或把子程序当作函数调用(invoking)</strong></p>

<p>当用户做类似于这样的事，用户代码错误：</p>

<p>```
— main program —
…
call ThisIsIllegal( some_arguments )
…
— end main program —</p>

<p>— ThisIsIllegal —
integer function ThisIsIllegal( some_arguments )
…
— end ThisIsIllegal —
```</p>

<p>上面例子中，主程序以子程序调用方式调用ThisIsIllegal，然而ThisIsIllegal申明是函
数。这会引起堆栈溢出。为测试这些情况，尝试使用编译选项</p>

<p><code>
	-fp-stack-check -g -traceback
</code></p>

<p>用这些选项编译并运行。如果堆栈由于类似上面的原因崩溃，代码将推出并给出一个
stack trace。</p>

<p>可以用一个编译时检查来检查程序接口：</p>

<p><code>
	-gen-interfaces -warn interfaces
</code></p>

<p>编译时检查将为你的程序产生INTERFACE块。<code>-warn</code>接口随后将使用这些编译器产生的接口并
检查程序调用确保参数和接口在被调用者和调用者之间匹配。注意这个检查只对Fortran
源代码起作用。对混编程序不检查接口。</p>

<p><strong>可能原因 #6 传递非连续数组部分引起的大的临时数组. 解决方法：使用 -check
arg_temp_created 侦测并通过包含显式接口和assumed shaped 数组代码修复</strong></p>

<p>考虑这个例子：</p>

<p><code>
--- main program ---
real(8) :: f(1800,3600,1)
external sub
...
call sub( f(1:900,:,:) )
...
--- end main program ---
</code></p>

<p>子程序‘sub’在单独的编译源文件中：</p>

<p>```
— external subroutine “sub” —
subroutine sub( f )
real(8) :: f(900,3600,1)
…
— end subroutine “sub” —</p>

<p>```</p>

<p>这种情况下，‘sub’期望一个连续数组，大小为900<em>3600</em>1。然而，调用传递一个内存中
非连续的数组。这种情况下，编译器将在调用时产生一个临时数组复制数组”f”非连续块
元素使之成为连续数组，这这是”sub“所期待的。除非指定
<code>-heap-arrays</code>，否则这个临时数组分配在堆栈中。</p>

<p>为了检测代码里是否发生这样的情况，用下面选项编译：</p>

<p><code>
	-check arg_temp_created
</code></p>

<p>并运行程序。当临时参数被创建，将输出信息。为了解决这个问题，创建一个显式接口，
并在”sub“使用一个assumed shaped数组将移除临时数组的需要。</p>

<p>```
— main —
real(8) :: f(1800,3600,1)
interface
subroutine sub(f)
real(8) :: f(:,:,:)
end subroutine sub
end interface
…
call sub( f(1:900,:,:) )
…
— end main program —</p>

<p>— “sub” —
subroutine sub( f )
real(8) :: f(:,:,:)
…
end subroutine sub</p>

<p>```</p>

<p>记住，虽然这样避免了临时数组，编译器知道”sub”内数组”f”可能是非连续的。因此，一
些使用”f”的语句的优化可能关闭，进而影响性能。</p>

<p><strong>不属于以上情况：解决方法-进一步深入分析</strong></p>

<p>99%的sigsegv或bus error错误原因是上面列举的情况。然而，也有其他可能情况导致段
错误。</p>

<p>如果你的应用链接外部库，确保库和编译器兼容。外部库是否用Intel编译器编译的？如
果是，是否主要版本一致-即库用Intel Fortran v9.1编译的，但你的应用用Intel
Fortran v10.x或v11.x编译的？ Intel只保证主版本内兼容(9,10,11就是主版本例子)</p>

<p>如果外部库来自于软件销售商或工具：该销售商是否明确Intel编译器兼容，如果确认，
他们用哪个版本验证他们的库？你应该只是用销售商验证过的Intel编译器版本。</p>

<p><strong>当所有都失败了…</strong></p>

<p>提交给用户论坛吧！</p>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[GRAPES源码分析之计时系统]]></title>
    <link href="http://qingu.github.com/blog/2013/04/23/grapesyuan-ma-fen-xi-zhi-ji-shi-xi-tong/"/>
    <updated>2013-04-23T16:14:00+08:00</updated>
    <id>http://qingu.github.com/blog/2013/04/23/grapesyuan-ma-fen-xi-zhi-ji-shi-xi-tong</id>
    <content type="html"><![CDATA[<h3 id="section">前言</h3>

<p>模式开发者（尤其是并行计算开发者）对模式各部分执行花费的时间很感兴趣，需要了解哪里耗时比较长，进而对其进行优化。普通用户一般不需要这个功能。计时系统的一般思路：在需要计时部分的起点和终点设置计时器（调用计时子程序），两个点时间差即为计时部分所耗时间。</p>

<!--more-->

<h3 id="grapes">GRAPES计时系统</h3>

<p>目前发现GRAPES中有3套计时系统，分别在 <code>module_integrate</code> 、 <code>sovle_grapes</code> 及 <code>ritche_puw_jin</code> 中，对各自调用的子程序进行计时。计时子程序使用MPI墙钟函数。为了使版本统一，使用条件预编译方法控制开启实现计时功能（MPI同步计时会使模式整体运行时间过长，不适用于业务）。</p>

<h4 id="solvegrapes">solve_grapes计时系统</h4>

<p>以下以solve_grapes中计时系统进行说明</p>

<ul>
  <li>计时开始部分（别忘了引入mpi模块， <code>use MPI</code> ）</li>
</ul>

<p>```
	#ifdef DETAIL_TIMING
	   integer :: ierr, comm
	   real<em>8 :: start_time, end_time
	   real</em>8 ,save::  wtimer(80,2)=0. 
	   !保存计时数据的二维数组，第一维指不同计时部分，第二维指不同步和同步两种情况
	#endif</p>

<pre><code>#ifdef DETAIL_TIMING
   comm=mpi_comm_world          
   call mpi_barrier(comm, ierr)  !各进程同步，使各进程计时起点一致
   start_time=mpi_wtime()        !记录起点墙钟时间
   call get_communicator(comm)
#endif ```
</code></pre>

<ul>
  <li>第一个计时部分终点处</li>
</ul>

<p><code>
	#ifdef DETAIL_TIMING
	     end_time=mpi_wtime()             ！本进程计时终点墙钟时间
	     wtimer(1,1)=end_time-start_time  ! 未同步情况本进程该计时部分所用时间
	     call mpi_barrier(comm, ierr)     ! 同步
	     end_time=mpi_wtime()             ！所有进程都执行完该部分时墙钟时间
	     wtimer(1,2)=end_time-start_time  ！同步情况下执行时间
	     start_time=end_time              ! 下一计时部分的起点墙钟时间
	#endif
</code></p>

<ul>
  <li>
    <p>以后每一计时部分计时思路与上述相同</p>
  </li>
  <li>
    <p>在 <code>solve_grapes</code> 最后输出每步积分步各调用部分执行时间</p>
  </li>
</ul>

<p><code>
	#ifdef DETAIL_TIMING
	     write(73,*) 'step',step,':'
	     write(73,*) "no_barrier for timing *************"
	     write(73,'(10F8.4)') (wtimer(i,1),i=1,80)
	     write(73,*) "barrier for timing *************"
	     write(73,'(10F8.4)') (wtimer(i,2),i=1,80)
	#endif
</code>
文件号为73的文件是在 <code>module_integrate</code> 中定义的。</p>

<p><code>
   write(filename,'(A7, I5.5)') 'Timing.',myprcid  !各进程计时输出文件名，
   open (73,file=filename,form='formatted')        !有多少进程，就有多少文件
</code></p>

<h4 id="section-1">其它</h4>

<p><code>module_integrate</code> 中计时系统与 <code>solve_grapes</code> 中一样，只不过计时都为非同步情况下的时间，保留在 <code>wtimer_integrate</code> 一维数组中。预编译条件与 <code>solve_grapes</code> 相同，都为 <code>DETAIL_TIMING</code> 。</p>

<p><strong>注：每一积分步 <code>solve_grapes</code> 执行时间保留在 <code>wtimer_integrate(5)</code> 中.</strong></p>

<p>还有一套是在 <code>module_semi_lag</code> 中 <code>ritche_puw_jin</code> 中定义的，预编译条件为 <code>SL_TIMING</code> 。</p>

<p>如果需要开启计时系统，需在 <code>configure.grpaes</code> 中预处理器选项 <code>ARCHFLAGS</code> 中加上类似 <code>-D predefineName</code> ，如 <code>-DSL_TIMING</code> 。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[GRAPES源码分析之namelist]]></title>
    <link href="http://qingu.github.com/blog/2013/04/02/grapesyuan-ma-fen-xi-zhi-namelist/"/>
    <updated>2013-04-02T20:18:00+08:00</updated>
    <id>http://qingu.github.com/blog/2013/04/02/grapesyuan-ma-fen-xi-zhi-namelist</id>
    <content type="html"><![CDATA[<h3 id="section">前言</h3>

<p>在GRAPES、WRF等模式中常见到类似 namelist.input 或 .nml 文件。文件里放入一些如预报区域范围、预报时间，技术方案选择及运行模式所需进程数等控制模式运行的配置变量。实际上 namelist 是 Fortran 中一种特殊的I/O读写格式。本文首先介绍 namelist 语法及如何读写，然后介绍 GRAPES 模式中是如何应用 namelist 的。</p>

<!-- more -->

<h3 id="namelist-">namelist 语法</h3>

<p>namelist 把一组相关变量封装在一起，输入/出这一组变量时，只要在 write/read中的nml字段赋值要使用哪一个namelist就行。</p>

<h4 id="namelist--1">namelist 文件格式</h4>

<p>namelist文件格式：</p>

<p>```
	&amp;nml_name1      ! &amp;接某一组namelist名字
	var1 = value,   ! 输出变量名称，等号，值及逗号
	var2 = value, <br />
	…
    /               ! 除号结束这一组namelist</p>

<pre><code>...

&amp;nml_nameN      ! 第n组namelist
...
/ ```
</code></pre>

<h4 id="namelist--2">namelist 声明</h4>

<p>namelist声明类似common语法，但nml一定要取名字，必须在执行语句前声明。首先对各个变量进行声明，然后声明各组namelist。在输入/出namelist前，必须先声明namelist。如下：</p>

<p>```
	integer :: var1           !先对每个变量如平常一样声明
	real    :: var2</p>

<pre><code>namelist /nml_name1/ var1,var2   !然后声明那些变量属于哪个namelist组 ```
</code></pre>

<h4 id="namelist--3">namelist 输出</h4>

<p><code>
	write(unit, nml=nml_name)     ! nml_name指每组namelist的名字
</code></p>

<p>在write的nml字段中指定输出哪个namelist，就把nml中变量全部输出。输出的namelist不能规定输出格式。每个数值内容使用什么格式来输出，由编译器决定。</p>

<h4 id="namelist--4">namelist 输入</h4>

<p><code>
	read(unit, nml=nml_name)
</code></p>

<p>如果从键盘读入namelist，必须按照一定的格式输入，如下所示：</p>

<p><code>
	&amp;nml_name1 var1=1 var2=2.0 /    !以&amp;开始，紧接namelist名字，
                                  	!然后以var=value输入每个变量,以 / 结束
</code></p>

<p>读取namelist时，可以不填入所有变量的值，只要以 &amp;nml_name 开始输入，给一个除号就可以结束输入。变量可以不按照顺序输入，程序会自动按照变量名称来设置数值，变量甚至可以重复输入，不过变量会得到最后一次设置的值。</p>

<p>namelist通常使用文本文件进行读写，nml文件常以 .nml 后缀标示其文件属性 (这个不一定，Linux系统不以后缀名确定文件类型，但用 .nml 结尾可以很方便识别文件属性)。</p>

<p>nml 使用read从文件中读取数据时，会自动从 <strong>目前的位置</strong>向下寻找存放namelist的地方。</p>

<h3 id="grapesnamelist">GRAPES中的namelist</h3>

<p>GRAPES中有好几个namelist ： RUN/namelist,input, RUN/rrtmg.nml, RUN/colm.nml(这个是 SRC/physics/CoLM/build.colm.nml 的软链接) 。</p>

<h4 id="namelistinput">namelist.input</h4>

<p>主要查看namelist.input，其他两个类似</p>

<p>该文件保存了模式的一些配置信息（都是标量），配置变量在 shared/module_configure模块中声明。</p>

<p>该模块中子程序 initial_config 用于读入namelist.input变量。步骤：</p>

<ul>
  <li>
    <p>声明子程序临时配置变量，然后把一组组相关变量封装在各组namelist中。</p>
  </li>
  <li>
    <p>打开namelist.input文件</p>
  </li>
</ul>

<p><code>
 	OPEN ( UNIT   = 10               ,      &amp;
             FILE   = "namelist.input" ,      &amp;
             FORM   = "FORMATTED"      ,      &amp;
             STATUS = "OLD"            ,      &amp;
             IOSTAT = io_status         )
</code></p>

<ul>
  <li>
    <p>临时配置变量先赋一个初值，即默认值。以防namelist中没有这个变量，保证变量都有值。</p>
  </li>
  <li>
    <p>输入/出namelist，代码如下</p>
  </li>
</ul>

<p><code>
 	REWIND  ( UNIT = nml_unit )
    READ  ( UNIT = nml_unit , NML = namelist_01 , ERR = 9200 , END = 9200 )
    WRITE ( UNIT = *                  , NML = namelist_01 )
    ...
    重复以上三句输入/出下一组namelist
</code></p>

<p>rewind表示回到文件nml_unit 的开始，在用rewind之前必须保证该文件已打开（即之前有open操作且成功了）。</p>

<p>read语句从文件开头开始查找nml字段为namelist_name的相关变量，err字段用来设置当前文件打开错误时，程序跳跃到label所指的代码处继续执行。end指在读写到文件末尾时，转移到某个行代码来继续执行程序。这里都是到9200处。</p>

<p>write语句向标准输出写入namelist，GRAPES中已重定向到 std.out.<em>**</em> 文件。</p>

<ul>
  <li>然后向所有进程广播临时配置变量</li>
</ul>

<p><code>
 	call grapes_bcast( s_we                       ,1 )
 	...    
</code></p>

<ul>
  <li>最后将临时配置变量赋给对应的派生数据类型 config_flags (该派生数据类型是在本模块中声明的),关闭文件，结束namelist输入。</li>
</ul>

<p>```
 	config_flags % s_we                       =  s_we 
 	…</p>

 	CLOSE ( UNIT = 10 , IOSTAT = io_status )
<p>```</p>

<ul>
  <li>另：配置变量通过 shared/module_domain模块中cpconfig子程序赋给状态变量 grid 。</li>
</ul>

<h3 id="section-1">总结</h3>

<p>由以上分析可得出添加GRAPES配置变量的一般流程：</p>

<ul>
  <li>
    <p>在namelist.input中按照nml格式添加变量，并给出其值</p>
  </li>
  <li>
    <p>在shared/module_configure模块中grid_config_rec_type声明中添加相应变量</p>
  </li>
  <li>
    <p>并在子程序 initial_config 声明临时配置变量，赋初值，读入，广播，赋给配置变量</p>
  </li>
</ul>

]]></content>
  </entry>
  
</feed>
