<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Linux | MetMan]]></title>
  <link href="http://qingu.github.com/blog/categories/linux/atom.xml" rel="self"/>
  <link href="http://qingu.github.com/"/>
  <updated>2013-07-06T15:56:58+08:00</updated>
  <id>http://qingu.github.com/</id>
  <author>
    <name><![CDATA[Qingu Jiang]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[segmentation fault产生根本原因]]></title>
    <link href="http://qingu.github.com/blog/2013/05/31/segmentation-faultchan-sheng-gen-ben-yuan-yin/"/>
    <updated>2013-05-31T20:41:00+08:00</updated>
    <id>http://qingu.github.com/blog/2013/05/31/segmentation-faultchan-sheng-gen-ben-yuan-yin</id>
    <content type="html"><![CDATA[<h2 id="section">前言</h2>
<p>本文译自Intel® Developer Zone上文章<a href="http://software.intel.com/en-us/articles/determining-root-cause-of-sigsegv-or-sigbus-errors" title="Determining Root Cause of Segmentation Faults SIGSEGV or SIGBUS errors">Determining Root Cause of Segmentation
Faults SIGSEGV or SIGBUS errors</a>。</p>

<!--more-->

<h2 id="section-1">正文</h2>
<p><strong>问题</strong>：当我运行由Intel Fortran编译器编译的代码时，在Linux平台得到’sigsegv’
错误提示(或Mac OS X平台sigbus提示)。这份代码在&lt;先去编译器/平台&gt;上运行多年没出
问题。这是Intel编译器一个bug吗？</p>

<p><strong>运行环境</strong>：linux 或 Mac OS X</p>

<p><strong>根本原因</strong>：有许多可能原因。段错误(segmentation fault)(Mac OS X下是bus
        error)是一个有多种原因的通用错误。下面我们描述潜在的原因并给出建议以避
免段错误。</p>

<p><strong>可能原因 #1 Fortran指定栈空间耗尽：解决方法 -heap-arrays编译选项</strong></p>

<p>Intel Fortran编译器使用栈空间分配许多数组数据的临时或中间副本。</p>

<p><strong>非OpenMP和非自动并行应用</strong>：如果你的程序未使用OpenMP或
Auto-parallelization(-parallel编译开关)且编译器版本是Linux v9.1.037(或所有Mac
        OS 编译器)，那么可以尝试 <code>-heap-arrays</code> 编译选项。OpenMP或
Auto-parallelization用户如用低于v9.1.0137的Linux
编译器请阅读<strong>可能原因 #2</strong>关于不限制栈大小的提示。</p>

<p><code>
	-heap-arrays
</code></p>

<p>如果这个解决了sigsegv或bus error错误的话，可以不用往下读了。你可能想读pdf附件
学习关于临时数组何时何处被创建内容。改变一点代码可以避免一些临时数组，从而减少
对临时副本的需求(改善性能)。同时，<code>-heap-arrays</code>编译器选项有一个可选参数[size]
来指定大于[size]的数组分配到堆(heap)中的阈值大小，单位为Kbytes，其它小于等于[size]的
分配到堆栈中。例如：</p>

<p><code>
	-heap-arrays 10
</code></p>

<p>将所有大于10Kbytes的自动和临时数组放入堆中。</p>

<p><strong>可能原因 #2 堆栈空间耗尽。 解决方法：增加OpenMP应用或其它应用的堆栈大小</strong></p>

<p>首先尝试<em>增加</em>Linux和Mac OS X的shell堆栈限制。然而，该选项可能对OpenMP或自动并行
代码的数据共享产生无法预料的影响。因此，建议OpenMP和自动并行用户不用
<code>-heap-arrays</code>，转而尝试<em>关掉</em>shell堆栈大小的限制。</p>

<p>Linux, bash: <code>ulimit -s unlimited</code></p>

<p>Linux, csh/tcsh: <code>unlimit stacksize</code></p>

<p>你可以用以下方法检查你的堆栈大小限制，并找到你的shell环境的<code>stack size</code>限制。</p>

<p>bash: <code>ulimit -a</code></p>

<p>csh: <code>limit</code></p>

<p>注意：如果你在一个批处理子系统下运行程序，可能需要将上面命令加入到个人启动配置
文件中(~/.bashrc、~/.profile或~/.cshrc)</p>

<p>对于Mac OS X系统，shell堆栈大小有一个硬上限。对于大多系统，</p>

<p>bash: <code>ulimit -s 65532</code></p>

<p>即设置堆栈限制为64MB。</p>

<p>一个可替代方法是使用一个链接选项增加执行者默认shell堆栈大小，方法记录在此：<a href="http://software.intel.com/en-us/articles/intel-fortran-compiler-increased-stack-usage-of-80-or-higher-compilers-causes-segmentation-fault" title="/en-us/articles/intel-fortran-compiler-increased-stack-usage-of-80-or-higher-compilers-causes-segmentation-fault">/en-us/articles/intel-fortran-compiler-increased-stack-usage-of-80-or-higher-compilers-causes-segmentation-fault</a></p>

<p>重新运行你的程序，如果这个方法解决此问题了，可以不用往下读了。如果你的应用仍然
产生sigsegv或bus error，继续读吧。</p>

<p><strong>可能原因 #2 主要的：由于堆或通用内存耗尽导致堆栈耗尽</strong></p>

<p>在进程内存映射中，堆和堆栈相互向对方增长。如果他们碰撞了，这也能引起一个关于堆分配或下一个堆栈分配的段错误。</p>

<p>也可能应用耗尽所有物理内存+swap缓冲区。记住，对于64位应用，虚拟内存实际上是
unlimited。然而，事实上可消费的内存大小有一个上限，物理ram+swap空间（典型的是
物理内存大小的2倍）。可以通过 <code>free</code> 命令获得该信息。物理内存也可以通过<code>cat
/proc/meminfo</code>中’MemTotal’项和’SwapTotal’项看到。系统本身也需要一些空间，所以
经验法则是尽可能保持应用的内存占用(memory footprint)在MemTotal的80%左右并且不要超过
MemTotal+SwapTotal。</p>

<p>使用<code>-g -traceback</code>编译链接来定位代码终止的地方。</p>

<p><strong>可能原因 #3 由于用户代码错误导致堆栈溢出</strong></p>

<p>有许多用户代码错误可能引起堆栈溢出并导致运行时sigsegv或bus error。由于段错误可
能发生在与堆栈最初溢出地方不相关的程序后面部分，从而导致错误很难发现。</p>

<p>第一步尝试隔离代码错误发生的地方。通过产生一个执行’traceback’来得到。使用ifort
驱动和下面这些选项编译、链接：</p>

<p><code>
	-g -traceback
</code></p>

<p>当代码出错，通常会得到关于错误发生时的调用堆栈的报告。如果没有得到一个堆栈
traceback，确保在编译和链接时都用到了<code>-g</code>并且确保编译时使用了<code>-traceback</code>。有
这样的情况：当程序在内核空间时段错误发生，因此没有用户堆栈用于trace back。
Intel正致力于在未来版本中改善这点。</p>

<p>trace back报告从下往上读。找到最上面的子程序或函数并通过行号来隔离出哪条指令引
起错误的。检查这条语句的用户代码错误。如果没有明显用户错误，继续往下。</p>

<p><strong>可能原因 #4 数组越界. 解决方法：-check bounds</strong></p>

<p><code>-check bounds</code>编译选项提供数组访问和字符串表达式运行时检查保证索引在数组边界
内。这个检查有助于找到索引超出数组申明大小的情况。这个选项对性能影响很大，影响
程度取决于应用中多少数组访问被执行。同时，<code>-check bounds</code>数组越界检查不对最外
维指定为*的虚参数组或上下维都为1的数组执行。为开启边界检查，用下面选项编译：</p>

<p><code>
	-check bounds -g
</code></p>

<p>并运行程序。检查在运行时执行，而不是在编译时执行。如果这样能发现错误，停下来。
没有，继续往下读。</p>

<p><strong>可能原因 #5 把函数当作子程序调用(calling)或把子程序当作函数调用(invoking)</strong></p>

<p>当用户做类似于这样的事，用户代码错误：</p>

<p>```
— main program —
…
call ThisIsIllegal( some_arguments )
…
— end main program —</p>

<p>— ThisIsIllegal —
integer function ThisIsIllegal( some_arguments )
…
— end ThisIsIllegal —
```</p>

<p>上面例子中，主程序以子程序调用方式调用ThisIsIllegal，然而ThisIsIllegal申明是函
数。这会引起堆栈溢出。为测试这些情况，尝试使用编译选项</p>

<p><code>
	-fp-stack-check -g -traceback
</code></p>

<p>用这些选项编译并运行。如果堆栈由于类似上面的原因崩溃，代码将推出并给出一个
stack trace。</p>

<p>可以用一个编译时检查来检查程序接口：</p>

<p><code>
	-gen-interfaces -warn interfaces
</code></p>

<p>编译时检查将为你的程序产生INTERFACE块。<code>-warn</code>接口随后将使用这些编译器产生的接口并
检查程序调用确保参数和接口在被调用者和调用者之间匹配。注意这个检查只对Fortran
源代码起作用。对混编程序不检查接口。</p>

<p><strong>可能原因 #6 传递非连续数组部分引起的大的临时数组. 解决方法：使用 -check
arg_temp_created 侦测并通过包含显式接口和assumed shaped 数组代码修复</strong></p>

<p>考虑这个例子：</p>

<p><code>
--- main program ---
real(8) :: f(1800,3600,1)
external sub
...
call sub( f(1:900,:,:) )
...
--- end main program ---
</code></p>

<p>子程序‘sub’在单独的编译源文件中：</p>

<p>```
— external subroutine “sub” —
subroutine sub( f )
real(8) :: f(900,3600,1)
…
— end subroutine “sub” —</p>

<p>```</p>

<p>这种情况下，‘sub’期望一个连续数组，大小为900<em>3600</em>1。然而，调用传递一个内存中
非连续的数组。这种情况下，编译器将在调用时产生一个临时数组复制数组”f”非连续块
元素使之成为连续数组，这这是”sub“所期待的。除非指定
<code>-heap-arrays</code>，否则这个临时数组分配在堆栈中。</p>

<p>为了检测代码里是否发生这样的情况，用下面选项编译：</p>

<p><code>
	-check arg_temp_created
</code></p>

<p>并运行程序。当临时参数被创建，将输出信息。为了解决这个问题，创建一个显式接口，
并在”sub“使用一个assumed shaped数组将移除临时数组的需要。</p>

<p>```
— main —
real(8) :: f(1800,3600,1)
interface
subroutine sub(f)
real(8) :: f(:,:,:)
end subroutine sub
end interface
…
call sub( f(1:900,:,:) )
…
— end main program —</p>

<p>— “sub” —
subroutine sub( f )
real(8) :: f(:,:,:)
…
end subroutine sub</p>

<p>```</p>

<p>记住，虽然这样避免了临时数组，编译器知道”sub”内数组”f”可能是非连续的。因此，一
些使用”f”的语句的优化可能关闭，进而影响性能。</p>

<p><strong>不属于以上情况：解决方法-进一步深入分析</strong></p>

<p>99%的sigsegv或bus error错误原因是上面列举的情况。然而，也有其他可能情况导致段
错误。</p>

<p>如果你的应用链接外部库，确保库和编译器兼容。外部库是否用Intel编译器编译的？如
果是，是否主要版本一致-即库用Intel Fortran v9.1编译的，但你的应用用Intel
Fortran v10.x或v11.x编译的？ Intel只保证主版本内兼容(9,10,11就是主版本例子)</p>

<p>如果外部库来自于软件销售商或工具：该销售商是否明确Intel编译器兼容，如果确认，
他们用哪个版本验证他们的库？你应该只是用销售商验证过的Intel编译器版本。</p>

<p><strong>当所有都失败了…</strong></p>

<p>提交给用户论坛吧！</p>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[大型机使用技巧汇总]]></title>
    <link href="http://qingu.github.com/blog/2013/03/03/da-xing-ji-shi-yong-ji-qiao-hui-zong/"/>
    <updated>2013-03-03T21:17:00+08:00</updated>
    <id>http://qingu.github.com/blog/2013/03/03/da-xing-ji-shi-yong-ji-qiao-hui-zong</id>
    <content type="html"><![CDATA[<h3 id="section">0. 前言</h3>
<p>因为转模式的缘故，需要和大型机打交道，目前在IBM的AIX系统和神威的Linux系统之间来回倒腾，经常使用大型机如果掌握一些使用技巧，工作效率定会大大提高。本文用于持续总结使用大型机的一些技巧，与大家分享。</p>

<!-- more -->

<h3 id="section-1">1. 登录</h3>
<p>Windows系统下可以用一些ssh登录软件登录大型机，如 <code>Xmanager</code> 、<code>SecureCRT</code> 等。</p>

<p>Linux系统下直接用终端 + ssh命令。</p>

<p><code>
	ssh user_name@host_name
</code></p>

<p>host_name一般是大型机IP地址。稍后会提示输入密码，注意输入的密码不可见。</p>

<p>但是这样每次登录都要输入命令和密码，挺烦人的。可以考虑写个脚本自动登录，这里用到工具 <code>expect</code> 。
确定自己系统里是否有 expect ：<code>which expect</code>。如果没有就装下。</p>

<p>脚本内容：</p>

<p>```
	#!/usr/bin/expect -f</p>

<pre><code>set user user_name
set host host_name
set password my_password
set timeout -1

spawn ssh  $user@$host
expect {
	"*yes/no" { send "yes\r"; exp_continue}
	"*password:" { send "$password\r" }
}
interact ```	
</code></pre>

<p>将上面代码保存为 go ，设置脚本权限为 755， <code>chmod 755 go</code> 。以后直接执行脚本就行。</p>

<p><strong>Linux下还有一种省去输密码的方法：公钥登录</strong></p>

<p>在自己电脑终端上输入：</p>

<p><code>
    ssh-keygen 
</code></p>

<p>出现一系列提示，可以一路回车。结束后，在～/.ssh/下生成两个文件：id_rsa.pub 和 id_rsa。前者是你的公钥，后者是私钥。</p>

<p>再输入以下命令将公钥传到大型机上：</p>

<p><code>
    ssh-copy-id user_name@host_name
</code></p>

<p>以后你就可以直接输入 <code>ssh user_name@host_name</code> 登录。如果你想更省事，再自定义一个函数放到 ~/.bashrc中：</p>

<p><code>
    sw(){
      ssh user_name@host_name
    }
</code></p>

<p>以后直接在终端输入命令 <code>sw</code> 登录，是不是很方便。</p>

<p>scp 替代 ftp 传文件：
	scp [option] user@host1:file1 user@host2:file2</p>

<p>示例：</p>

<ul>
  <li>
    <p>复制本地文件到远程大型机上</p>

    <p>scp localfile user_name@host_name:/home/mydirctory</p>
  </li>
  <li>
    <p>复制远程大型机上文件到本地</p>

    <p>scp user_name@host_name:~/.bashrc ~</p>
  </li>
</ul>

<p>注：传输目录时加选项 <code>-r</code>     </p>

<h3 id="section-2">2. 设置登录路径</h3>
<p>这个设置不一定所有人需要。我是因为用的老师的大型机账号，在里面建了个自己的目录，我的所有工作就是在这个目录里完成。
每次登录到大型机后，要 cd 很长的路径才能到达我的工作目录。为了减少工作量，可以利用 <code>*nix</code> 系统的自定义函数功能。</p>

<p><code>
	cdgu() {
		cd /path/to/my_working_directory
		ls
	}
</code></p>

<p>在 Linxu 系统 <code>~/.bashrc</code> 或 AIX 系统 <code>~/.profile</code> 添加类似以上的代码，保存后 <code>source ~/.bashrc</code> 或 <code>source ~/.profile</code> 使得修改立即生效。然后在终端里输入函数名 <code>cdgu</code> ，看看是不是直接进入自己的工作目录了。</p>

<p>注意起的函数名不要和系统已有命令冲突，可以事先用 <code>which 函数名</code> 测试。</p>

<h3 id="shell">3. Shell快捷健</h3>
<p>首先确定你的登录shell是哪种，用命令 <code>echo $SHELL</code> 查看。记住多少个快捷键为宜呢，个人认为 <code>Less is More</code> ，够用就好。</p>

<p>BASH Shell快捷键可以参考 <a href="http://linuxtoy.org/archives/bash-shortcuts.html" title="LinuxTOY">LinuxTOY</a> 和 <a href="http://en.wikipedia.org/wiki/Bash_(Unix_shell)#Keyboard_shortcuts" title="维基百科">维基百科</a>这篇文章总结的。我将第一篇文章网页保存为pdf版本了，可以打印出来放在电脑旁边，没事看看。地址：<a href="http://pan.baidu.com/share/link?shareid=431631&amp;uk=1392639653" title="百度云盘下载">百度云盘下载</a> 。</p>

<p>AIX下默认ksh，功能没有bash强大。不过也有一些快捷键。</p>

<p>以下列出一些快捷键，bash 和 ksh 都可以使用（亲测可用）。</p>

<ul>
  <li>Ctrl + a ：移到命令行首</li>
  <li>Ctrl + e ：移到命令行尾</li>
  <li>Ctrl + f ：按字符前移（右向）</li>
  <li>Ctrl + b ：按字符后移（左向）</li>
  <li>Ctrl + u ：从光标处删除至命令行首 （ksh中表现为删除整行）</li>
  <li>Ctrl + k ：从光标处删除至命令行尾</li>
  <li>Ctrl + w ：从光标处删除至字首 （ksh表现为从光标处删除至命令行首）</li>
  <li>Ctrl + d ：删除光标处的字符</li>
  <li>Ctrl + h ：删除光标前的字符</li>
  <li>Ctrl + p：历史中的上一条命令</li>
  <li>Ctrl + n：历史中的下一条命令</li>
</ul>

<h3 id="section-3">4. 常用命令</h3>
<p>以下列出一些常用命令：</p>

<ul>
  <li>cd ~ : 回到home目录</li>
  <li>cd - : 回到上一次工作目录（相当于撤销上一次cd命令）</li>
  <li>ls -l : 列出当前目录下所有文件详细属性（不包含隐藏文件，需要的话加 -a)</li>
  <li>ll : ‘ls -l –color=tty’的别名（快捷方式），目录和链接带色彩，以示区别</li>
  <li>
    <table>
      <tbody>
        <tr>
          <td>chmod a+x file : 设置文件权限为所有人可执行（u-用户，g-所属组，o-其他人,a-所有人</td>
          <td>r-读权限，w-写权限，x-可执行权限）</td>
        </tr>
      </tbody>
    </table>
  </li>
  <li>grep : 文件搜索</li>
  <li>tailf : 监控文件，常用于监控模式标准输出/错误文件的输出，例如  tailf std.error.0000</li>
</ul>

<h3 id="section-4">5. 编译问题</h3>
<ul>
  <li>AIX系统的xlf90编译器默认不能编译后缀名为 .f90的程序（真扯），需要加上编译选项 <code>-qsuffix=f=f90</code> 。如果经常编译f90程序的话，可考虑在 ~/.kshrc 中加上 </li>
</ul>

<p><code>   
    alias xx='xlf90 -qsuffix'
</code></p>

<h3 id="section-5">6. 大型机作业调度管理工具</h3>

<h4 id="slurm">神威-SLURM</h4>
<p>神威使用 SLURM 管理作业提交、删除工作。这里的作业指的是并行作业，如果要执行串行程序，不需要以下这些命令。不过转模式一般需要同时利用多个cpu节点执行。</p>

<p>以下命令详细用法可以使用 <code>命令 --help</code> 或 <code>命令 --usage</code> 查看。</p>

<ul>
  <li>srun ： 提交作业</li>
</ul>

<p>常用选项：</p>

<p>-n ntasks 利用ntasks个进程数执行程序</p>

<p>-p partition 指定程序运行所在节点池</p>

<p>-J jobname 指定作业名，这个是必须要有的</p>

<p>示例：</p>

<p>执行grapes.exe程序，使用32个进程数，节点池选择NORMAL7</p>

<p><code>
    srun -n 32 -p NORMAL7 -J GRAPES ./grapes.exe
</code></p>

<ul>
  <li>
    <p>squeue : 查询提交作业状态</p>

    <p>常用选项：</p>

    <p>-u user_name 查询指定用户名的作业状态</p>
  </li>
</ul>

<p>只执行 squeue 命令，将输出大型机上所有用户提交的作业状态情况。输出一般分成以下几列</p>

<p><code>
     JOBID PARTITION     NAME     USER  ST       TIME  NODES NODELIST(REASON)
</code></p>

<p>各列含义：</p>

<p>JOBID : 作业号，相当于该作业的”身份证号“</p>

<p>PARTITION : 所在节点池</p>

<p>NAME : 程序名称</p>

<p>USER : 用户名</p>

<p>ST : 作业状态， R-Runing（正在运行），PD-PenDing（资源不够，等待），CG-COMPLETING(作业正在完成过程中)， CA-CANCELLED（作业被人为取消掉了，一般是管理员干的）</p>

<p>TIME ：作业执行时间</p>

<p>NODES ：程序占的节点数</p>

<p>NODELIST : 详细的节点清单</p>

<p>示例：</p>

<p>一般只关心自己作业的情况</p>

<p><code>
      squeue -u user
</code></p>

<ul>
  <li>scancel : 取消作业</li>
</ul>

<p>普通用户只能取消掉自己的作业，如果 scancel 别人作业，输出错误信息（因为你不是管理员上帝）</p>

<p>常用选项：</p>

<p>-u, -user=user_name 取消掉该用户的提交的作业</p>

<p>-n, –name=job_name 取消掉叫 job_name 的作业</p>

<p>示例：</p>

<p>一般常用squeue查询自己作业job_id，然后杀掉作业(可同时kill多个作业) </p>

<p><code>
    squeue -u user_name
    scancel job_id
</code></p>

<p>如果确定是你一个人用这个账号，且想kill掉所有已提交的作业，可以</p>

<p><code>
    squeue -u user_name
</code></p>

<ul>
  <li>
    <p>sinfo : 查询节点池及节点状态，查看哪个节点池有空闲资源可以使用</p>
  </li>
  <li>
    <p>sbatch ： 执行批处理脚本，脚本里面包含一些大型机资源环境变量设置及srun提交作业命令</p>
  </li>
</ul>

<h4 id="ibm-loadleveler">IBM-loadleveler</h4>

<p>以下简单介绍常用几个命令，具体可参考<a href="http://publib.boulder.ibm.com/infocenter/clresctr/vxrx/index.jsp?topic=%2Fcom.ibm.cluster.loadl.v5r1.load500.doc%2Fam2cr_conq.htm">官方文档</a></p>

<ul>
  <li>llrun : 提交mpi并行作业或串行交互作业</li>
</ul>

<p>常用选项：</p>

<p>-k keyword_list 使用空格分隔的 keyword=value形式指定作业配置参数</p>

<p>NOTE: 这个命令好像被IBM大型机禁止掉了，只能用llsubmit提交作业了，orz</p>

<ul>
  <li>llq : 查询作业状态</li>
</ul>

<p>常用选项：</p>

<p>-u user_name 查询指定用户的作业状态， 只输入llq命令则列出所有用户作业情况</p>

<p>示例：</p>

<p><code>
     llq -u user_name
</code></p>

<ul>
  <li>
    <p>llcancel : 取消作业，一般后面跟作业号</p>
  </li>
  <li>
    <p>llstatus : 查询大型机资源状态</p>
  </li>
  <li>
    <p>llsubmit : 提交作业，后面跟命令文件</p>
  </li>
</ul>

<blockquote>
  <p>命令文件应该包含对作业进行描述、对版本历史和变化进行跟踪的注释。每一行开头的 # 号（#）表示该行是一个注释。如果 # 之后是 @ 符号（@），就表示这是一个关键字。关键字用来指定与作业相关的输入、输出和错误文件，以及作业类。要查看管理员已经定义了哪些类，请使用 llclass 命令。</p>
</blockquote>

<p>示例：</p>

<p><code>
     llsubmit job.cmd
</code></p>

<p>job.cmd 示例：</p>

<p>```
    #@ shell = /bin/ksh      #指定脚本解释器
    #@ job_type = parallel   #作业类型设为并行的，需要设置节点数
    #@ network.MPI = csss,shared,US   # MPI并行程序使用内部共享节点通信
    #@ output = $(host).$(jobid).out  # 标准输出重定向新文件                               <br />
    #@ error = $(host).$(jobid).err   # 标准错误重定向到新文件
    #@ wall_clock_limit = 30:00       # 限制程序只能运行 30 分钟</p>

<pre><code>#使用2个节点，每个节点上32个进程，共64个进程执行并行作业
#@ tasks_per_node = 32            
#@ node = 2

#@ queue          #排队，等待资源到位后执行。没有这条语句，不会建立作业

pwd               #显示当前工作目录
echo $LOADL_PROCESSOR_LIST      #显示分配给该作业的节点
export MP_SHARED_MEMORY=yes     #让MPI使用共享内存通信

poe a.out          #运行程序 ```
</code></pre>

<h4 id="section-6">类比两种作业调度管理器</h4>

<table>
  <thead>
    <tr>
      <th>功能</th>
      <th>SW-SLURM</th>
      <th style="text-align: right">IBM-Loadleveler</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <td>提交作业</td>
      <td>srun</td>
      <td style="text-align: right">llrun(禁掉了)</td>
    </tr>
    <tr>
      <td>查询作业</td>
      <td>squeue</td>
      <td style="text-align: right">llq</td>
    </tr>
    <tr>
      <td>取消作业</td>
      <td>scancel</td>
      <td style="text-align: right">llcancel</td>
    </tr>
    <tr>
      <td>脚本提交作业</td>
      <td>sbatch</td>
      <td style="text-align: right">llsubmit</td>
    </tr>
    <tr>
      <td>查询节点资源</td>
      <td>sinfo</td>
      <td style="text-align: right">llstatus</td>
    </tr>
  </tbody>
</table>

<h3 id="update-log">Update Log</h3>

<ul>
  <li>2013-3-8 增加大型机作业调度管理器介绍</li>
</ul>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Linux下处理带^M字符文档]]></title>
    <link href="http://qingu.github.com/blog/2013/03/01/linuxxia-chu-li-dai-mzi-fu-wen-dang/"/>
    <updated>2013-03-01T20:55:00+08:00</updated>
    <id>http://qingu.github.com/blog/2013/03/01/linuxxia-chu-li-dai-mzi-fu-wen-dang</id>
    <content type="html"><![CDATA[<h3 id="section">原因</h3>
<p><code>*nix</code> 系统下用vim打开在Windows下编辑的文档会发现每行后出现 <code>^M</code> 字符，这是因为DOS下的编辑器和Linux编辑器对文件行末的回车符处理不一致。在windows下换行符是 <code>\r\n</code> ，而 <code>*nix</code> 下换行符是 <code>\n</code> 。以下是几种解决方法。</p>

<!-- more -->

<h3 id="section-1">解决方法</h3>

<p>1.使用 Linux 内置命令行工具 <code>dos2unix</code></p>

<pre><code>dos2unix filename
</code></pre>

<p>具体用法可以 <code>man dos2unix</code></p>

<p>注：AIX系统下命令是 <code>dosunix</code> ，语法是：</p>

<pre><code>dosunix inputfile outfile
</code></pre>

<p>2.Vim中替换命令</p>

<p>在命令模式下输入 <code>%s/^M//g</code> 。其中 <code>^M</code> 是用 <code>Ctrl+v</code> 和 <code>Ctrl+m</code> 输入的。</p>

<p>3.Vim中 <code>set</code> 命令(测试不成功)</p>

<p>在命令行模式下输入</p>

<pre><code>:set fileformat=unix
:w
</code></pre>

<p>4.<code>sed</code> 工具</p>

<p>第2种方法中替换思路可以用sed实现，具体命令为：</p>

<pre><code>sed 's/^M//g' filename &gt; new_filename
</code></pre>

<p>注意其中 <code>^M</code> 就是原来的 <code>^</code> 和 <code>M</code> 组合。与方法2有区别。</p>

<p>5.<code>*nix</code> 内置tr命令（测试不成功）</p>

<p>原因分析里说过Windows换行符比*nix多了 <code>\r</code> 。使用内置转换字符命令 <code>tr</code> 。</p>

<pre><code>tr -d '\r' filename
</code></pre>

<p>以上就是我从网上收集的几种方法，其中方法3和方法5测试未成功，可能是我用错了，知道的人可以告诉我，先行谢过！</p>
]]></content>
  </entry>
  
</feed>
