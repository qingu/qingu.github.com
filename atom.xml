<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[MetMan]]></title>
  <link href="http://qingu.github.com/atom.xml" rel="self"/>
  <link href="http://qingu.github.com/"/>
  <updated>2013-03-07T19:57:18+08:00</updated>
  <id>http://qingu.github.com/</id>
  <author>
    <name><![CDATA[Qingu Jiang]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[译:为多核系统并行性能线程化Fortran应用]]></title>
    <link href="http://qingu.github.com/blog/2013/03/05/yi-wei-duo-he-xi-tong-bing-xing-xing-neng-xian-cheng-hua-fortranying-yong/"/>
    <updated>2013-03-05T20:45:00+08:00</updated>
    <id>http://qingu.github.com/blog/2013/03/05/yi-wei-duo-he-xi-tong-bing-xing-xing-neng-xian-cheng-hua-fortranying-yong</id>
    <content type="html"><![CDATA[<h3>0. 前言</h3>

<p>本文翻译自Intel网站上的一篇文章，原题为<a href="http://software.intel.com/en-us/articles/threading-fortran-applications-for-parallel-performance-on-multi-core-systems">Threading Fortran applications for parallel performance on multi-core systems</a>。由于本人翻译水平有限及专业术语知道的不多，如有不明白地方可查阅原文，发现错误的话敬请告之，谢谢！</p>

<!-- more -->

<h3>1. 正文</h3>

<p>现在大多数处理器都是多核的，预计未来性能增加主要来自于核数的增加。对于那些忽视额外核带来的机遇的性能敏感应用（performance sensitive applications）将很快被淘汰。本文讨论现存串行Fortran应用如何利用多核共享内存系统方法。议题包括数据布局，线程安全，性能及调试。Intel提供了一些软件工具帮助开发健壮、扩展性好的并行应用。</p>

<h4>并行层次</h4>

<ol>
<li><p>SIMD 指令</p>

<p>-编译器可以自动对循环向量化</p></li>
<li><p>指令级</p>

<p>-处理器调度（你看不到）</p></li>
<li><p>线程级（通常是共享内存）</p>

<p>-原生Linux或Windows线程</p>

<p>-OpenMP</p>

<p>-Simplest for muliti-core</p></li>
<li><p>分布式内存集群</p>

<p>-消息传递（一系列MPI）</p>

<p>-CoArray Fortran（未来的Fortran 2008标准）</p></li>
<li><p>embarassingly parallel multiprocessing</p></li>
</ol>

<h4>引入线程方法</h4>

<ol>
<li><p>线程库， 如 Intel® MKL</p>

<p>-容易且有效，前提是适合你的问题</p></li>
<li><p>编译器自动并行化</p>

<p>-容易做，但应用范围受限</p>

<p>-针对编译器认为安全的简单循环</p></li>
<li><p>异步I/O (非常专业，见编译器说明文档)</p></li>
<li><p>原生线程</p>

<p>-大多数用于任务级并行</p>

<p>-不是太容易编程和调试的</p></li>
<li><p>OpenMP</p>

<p>-设计用于简化数据级并行</p>

<p>-（相对的）容易编程和调试</p>

<p>-一定程度上支持任务级并行，尤其是在OpenMP 3.0中</p>

<p>-可移植性</p></li>
</ol>

<h4>Intel® Math Kernel Library</h4>

<ol>
<li><p>MKL许多部件有线程化的版本</p>

<p>-基于编译器的OpenMP运行时库</p>

<p>-1,2及3级的 BLAS , LAPACK</p>

<p>-稀疏 BLAS</p>

<p>-离散傅里叶变化</p>

<p>-向量数学和随机数函数</p>

<p>-直接稀疏求解器， 如 PARDISO</p></li>
<li><p>连接线程或非线程接口</p>

<p>-libmkl<em>intel</em>thread.a 或 libmkl_sequential.a</p>

<p>-使用link line 顾问，在 <a href="http://software.intel.com/en-us/">en-us</a></p></li>
<li><p>设置线程数</p>

<p>-设置 MKL<em>NUM</em>THREADS 或 OMP<em>NUM</em>THREADS 环境变量
-调用 mkl<em>set</em>num<em>threads 或 omp</em>set<em>num</em>threads 库函数</p></li>
</ol>

<h4>实例： PARDISO(Parallel Direct Sparse Solver)</h4>

<ol>
<li><p>共享内存系统上大型稀疏对称和非对称系统线性方程组求解器</p>

<p>-主要求解器使用OpenMP线程化</p>

<p>-仅仅连接到线程层，libmkl<em>intel</em>thread</p>

<p>-iparm(2)=3将加入线程化用于初始重排序阶段</p>

<p>-大型问题扩展性很好</p>

<p>-Fortran 90，Fortran 77 和 C 接口</p>

<p>-F90 接口能在调用序列时捕捉许多错误</p>

<p>-支持实数，复数，单双精度</p>

<p>-iterative refinement</p>

<p>-使用 MKL<em>NUM</em>THREADS 或 OMP<em>NUM</em>THREADS 环境变量控制线程变量
-否则默认处理器数（包括超线程）</p></li>
<li><p>算法见 <a href="http://www.pardiso-project.org">http://www.pardiso-project.org</a></p></li>
</ol>

<h4>自动化并行</h4>

<ol>
<li><p>编译器可对简单循环自动线程化</p>

<p>-Linux下加 -parallel 、Windows下加 /Qparallel 编译</p>

<p>-至少 -O2 等级优化（比照 OpenMP在 -O0下工作）</p>

<p>-循环必须满足“简单”条件</p>

<p>-报告哪个循环并行了，和哪个循环没有，为什么没有并行</p>

<p>-选项 -par-report2等</p>

<p>-使用选项 -par-thresholdn 微调并行代价模型</p>

<p>-默认 n=100, 尝试 n=99</p></li>
<li><p>基于和OpenMP相同的运行时库线程调用</p>

<p>-调用 <em>kmpc</em>fork_call</p>

<p>-这些是对低级pthreads 和 Win32线程库的封装</p>

<p>-识别相同的 OpenMP环境变量</p></li>
</ol>

<h4>自动化并行条件</h4>

<ol>
<li><p>入口处确定循环计数器 （DO WHILE不行）</p>

<p>-在编译时不必要确定</p>

<p>-不能跳进或跳出循环（如Fortran中循环不能有goto语句）</p></li>
<li><p>循环迭代独立</p>

<p>-没有函数调用（或证明没有负作用）</p>

<p>-除了是内联</p>

<p>-没有别名（通过不同指针访问相同变量）</p>

<p>-没有像 X(L+1)=Y(L+1) + X(L) 这样的结构</p>

<p>-允许规约</p>

<p>-但部分和可能导致舍入差异</p></li>
<li><p>工作量足以抵消并行开销</p></li>
<li><p>OpenMP循环条件类似于自动化并行条件</p></li>
<li><p>指令可用于引导编译器：</p>

<ul>
<li><p>!DIR$ PARALLEL</p></li>
<li><p>断言没有循环数据依赖</p></li>
<li><p>!DIR$ PARALLEL ALWAYS</p></li>
<li><p>重置代价模型，即使编译器认为性能不会改善（像 单个循环的-par-threshold()）也线程化循环</p></li>
<li><p>!DIR$ LOOP COUNT</p></li>
<li>估计迭代的典型数字（typical number of iterations）</li>
</ul></li>
</ol>

<h4>Example: matrix multiply</h4>

<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
<span class="line-number">13</span>
<span class="line-number">14</span>
</pre></td><td class="code"><pre><code class=""><span class="line">  subroutine matmul(a,b,c,n)
</span><span class="line">  real(8) a(n,n),b(n,n),c(n,n)
</span><span class="line">  c=0.d0
</span><span class="line">  do i=1,n         ! Outer loop is parallelized.
</span><span class="line">     do j=1,n      ! inner loops are interchanged
</span><span class="line">        do k=1,n  ! new inner loop is vectorized 
</span><span class="line">           c(j,i)=c(j,i)+a(k,i)*b(j,k)
</span><span class="line">        enddo
</span><span class="line">     enddo
</span><span class="line">  enddo
</span><span class="line">  end
</span><span class="line">
</span><span class="line">  $ ifort -O3 -parallel -par-report1 -c matmul.f90
</span><span class="line">  matmul.f90(4) : (col. 0) remark: LOOP WAS AUTO-PARALLELIZED.</span></code></pre></td></tr></table></div></figure></notextile></div>

<h4>OpenMP-优点</h4>

<ol>
<li><p>基于编译器指令的标准API</p>

<p>-最新版本是 3.0</p>

<p>-C++ 和 Fortran， Linux 和 Windows</p>

<p>-对不支持OpenMP编译器来说指令相当于注释</p>

<p>-串并行实现包含在一份源代码中</p>

<p>-有助于调试</p>

<p>-允许增量式并行</p>

<p>-OpenMP规则使检测工具更容易</p></li>
</ol>

<h4>OpenMP编程模型</h4>

<h5>Fork-Join 并行：</h5>

<ol>
<li><p>主线程生成一个线程组</p>

<p>-并行被增量式增加</p>

<p>-串行程序进化成并行程序</p>

<p>-线程不会被摧毁，但返回到一个线程池中（pool）</p>

<p><em>注意Intel的OpenMP实现在使用的线程之外创建了一个单独的监控线程</em></p></li>
</ol>

<h4>OpenMP-在哪线程化</h4>

<ol>
<li><p>开始于罗列高层机构</p></li>
<li><p>你的程序在哪花最多时间？</p>

<p>-如果你不知道，做下快速性能分析</p>

<p>-VTune， PTU, gprof， &#8230;</p>

<p>-如果你的程序只有 x% 并行，加速比总是小于 x%， 无论多少核和线程。</p></li>
<li><p>更喜欢数据并行</p>

<p>-容易负载均衡</p>

<p>-容易扩展到更多核</p></li>
<li><p>喜欢粗粒度（高层次）并行</p>

<p>-例如嵌套的外层循环， 最慢变化的格点坐标， 高层驱动程序</p>

<p>-减少开销</p>

<p>-改善每个线程的数据局部性（locality）和重用性</p>

<p>-不能并行迭代循环，例如时间积分</p></li>
</ol>

<p>示例：Square_Charge</p>

<ol>
<li><p>计算一个平面上一系列点的静电势能，由于均方充电分布</p>

<p>-本质上，对一个平方的2维积分</p></li>
</ol>

<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
<span class="line-number">13</span>
<span class="line-number">14</span>
<span class="line-number">15</span>
<span class="line-number">16</span>
<span class="line-number">17</span>
</pre></td><td class="code"><pre><code class=""><span class="line">Square_charge loops over points
</span><span class="line">
</span><span class="line"> Twod_int integrate over y
</span><span class="line">
</span><span class="line">  Trap_int integrate over x
</span><span class="line">
</span><span class="line">   Func calculates 1/r potential
</span><span class="line">
</span><span class="line">   – Inline func()
</span><span class="line">
</span><span class="line">   – Vectorize loop over x
</span><span class="line">
</span><span class="line">   – Thread loop over y
</span><span class="line">
</span><span class="line">    – Avoid race conditions
</span><span class="line">
</span><span class="line">    – Could instead thread loop over points, or use MPI</span></code></pre></td></tr></table></div></figure></notextile></div>

<h4>OpenMP: 线程如何交互？</h4>

<ol>
<li><p>OpenMP 是一个共享内存模型</p>

<p>-线程之间通过共享变量通信</p></li>
<li><p>不能共享数据共享引起数据竞争：</p>

<p>-数据竞争：随线程调度不同，程序结果变化</p></li>
<li><p>控制数据竞争</p>

<p>-使用同步语句阻止数据冲突</p></li>
<li><p>同步代价昂贵，所以&#8230;</p>

<p>-改变数据访问方式尽量减少同步需求</p></li>
</ol>

<h4>OpenMP-data</h4>

<ol>
<li><p>识别哪个数据是线程间共享的，哪个是每个线程单独一个副本</p></li>
<li><p>使模块或common块中共享数据显式global，线程私有数据为局部和自动数据，这种做法有好处，但不是必须</p></li>
<li><p>动态分配 OK （malloc, ALLOCATE)</p>

<p>-如果共享，分配在串行区域</p>

<p>-如果每个线程需要各自副本，分配在并行区域</p></li>
<li><p>每个线程有它自己私有堆栈，但所以线程共享堆（heap）</p>

<p>-所以要使堆对象线程安全需要锁，而这个代价更高</p></li>
</ol>

<h4>OpenMP-数据作用域</h4>

<ol>
<li><p>区分字面显式并行区域和”动态区域“（函数或子程序在一个显式并行区域内调用。这些函数或子程序
可能不包含OpenMP指令或只包含”orphaned“ OpenMP指令</p></li>
<li><p>字面显式：!$OMP PARALLEL 到 !$OMP END PARALLEL</p>

<p>-数据默认共享（除了循环索引）</p>

<p>-局部数据：可以用 PRIVATE子句改变</p>

<p>-全局数据： 可以用 !$OMP THREADPRIVATE 申明 common块，模块变量 </p>

<p>-并行区域内初始值未定义</p>

<p>-除非用 FIRSTPRIVATE(局部变量)</p>

<p>-或 COPYIN(全局变量)</p>

<p>-出了并行区域后的值未定义</p>

<p>-除非使用 LASTPRIVATE(局部变量)</p>

<p>-调用的函数（动态区域）必须线程安全，即使他们本身不包含显式并行区域</p></li>
</ol>

<h4>线程安全</h4>

<ol>
<li><p>一个线程安全函数可以同时被多个线程调用，并仍可得出正确结果</p>

<p>-潜在的数据冲突必须被阻止（同步）或避免（私有化）</p>

<p>-静态局部数据：默认情况下，每个线程可访问相同数据地址！潜在不安全</p>

<p>-自动数据：每个线程拥有各自独立的副本，放在各自堆栈中</p></li>
<li><p>ifort 串行默认：</p>

<p>-局部标量是自动变量</p>

<p>-局部数据是静态变量</p></li>
<li><p>当用 -openmp 编译时，默认改变</p>

<p>-局部数组是自动</p>

<p>-和 -auto 编译相同</p>

<p>-这可能增加需要的堆栈大小</p>

<p>-小心段错误</p></li>
</ol>

<h4>使函数线程安全</h4>

<ol>
<li><p>使用编译选项</p>

<p>-选项 -openmp 或</p>

<p>-选项 -auto</p>

<p>-可能对串行优化有轻微影响</p></li>
<li><p>在源代码中</p>

<p>-在声明中使用 AUTOMATIC关键字</p>

<p>-但不覆盖编译器产生的临时文件</p>

<p>-声明函数为 RECURSIVE</p>

<p>-覆盖整个函数，包括编译器产生代码</p>

<p>-如果你不想依赖编译选项，这是最好办法使代码线程安全</p></li>
<li><p>下面两种情况，任意一种：</p>

<p>-不用 -save 或 SAVE 关键字</p>

<p>-避免全局变量</p>

<p>-或不要写他们，除了同步</p></li>
<li><p>OpenMP有许多同步结构保护潜在不安全的操作</p>

<ul>
<li><p>REDUCTION 子句</p></li>
<li><p>!$OMP CRITICAL</p></li>
<li><p>!$OMP SINGLE</p></li>
<li><p>等等</p></li>
</ul></li>
</ol>

<h4>线程安全库</h4>

<ol>
<li><p>Intel® MKL库是线程安全的</p>

<p>-串行版本和线程版本一样</p></li>
<li><p>Intel Fortran运行时库有两个版本</p>

<p>-默认是线程不安全的（libifcore）</p>

<p>-加 -threads 编译连接线程安全版本 （libifcoremt）</p>

<p>-如果你用 -openmp 编译， 默认连接的是线程安全版本</p></li>
</ol>

<h4>性能考虑</h4>

<ol>
<li><p>首先开始优化串行代码，向量化内循环等（例如 -O3 -ipo &#8230;)</p></li>
<li><p>确保足够的并行工作量</p></li>
<li><p>最小化线程间数据共享</p>

<p>-除非是只读变量</p></li>
<li><p>避免cache行错误共享 （false sharing of cache lines）</p></li>
</ol>

<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
</pre></td><td class="code"><pre><code class=""><span class="line">!$OMP parallel do
</span><span class="line">  do i=1,nthreads
</span><span class="line">    do j=1,1000
</span><span class="line">      A(i,j) = A(i,j) + ..</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>-每个线程认为它的 A(i,j)副本可能无效</p>

<p>-转换 A 下标 改善每个线程数据 locality</p>

<p>-连续内存访问也允许内循环向量化</p>

<p>-有助于提高性能</p>

<ol>
<li><p>调度选项</p>

<p>-如果工作在循环迭代数不是均匀分布的，考虑 DYNAMIC 或 GUIDED</p></li>
</ol>

<h4>线程级应用计时</h4>

<ol>
<li><p>Fortran标准计时器 CPU_TIME 返回 ”处理器时间“</p>

<p>-所有线程/核 的时间总和</p>

<p>-很像 Linux 下 &#8220;time&#8221; 命令的 &#8220;user time&#8221;</p>

<p>-所以它可能表现为线程级应用跑的没有串行版本快</p></li>
<li><p>Fortran内置子程序 SYSTEM_CLOCK 从真实时钟返回数据</p>

<p>-不相加每个核时间</p>

<p>-很像 Linux 下 &#8220;time&#8221; 命令的 &#8220;real time&#8221;</p>

<p>-可用来测试由于线程化的加速比</p></li>
</ol>

<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
</pre></td><td class="code"><pre><code class=""><span class="line">   Call system_clock(count1, count_rate)
</span><span class="line">              ……
</span><span class="line">              Call system_clock(count2, count_rate)
</span><span class="line">              Time = (count2 - count1) / count_rate</span></code></pre></td></tr></table></div></figure></notextile></div>

<ol>
<li>dclock （Intel专门函数）也可以用来计时</li>
</ol>

<h4>线程亲和力（Affinity）接口</h4>

<ol>
<li><p>允许OpenMP线程绑定物理或逻辑核</p>

<p>-export 环境变量 KMP_AFFINITY=</p>

<p>-在分配逻辑核前物理上使用使用所有物理核（超线程）</p>

<p>-紧密分配线程给相同socket连续核（例如受益于共享cache）</p>

<p>-分散分配线程给交替sockets（例如使内存通道最大化）</p>

<p>-有助于优化内存或cache访问</p>

<p>-如果超线程支持的话，尤其重要</p>

<p>-否则一些物理核闲置而另外一些跑多个线程</p>

<p>-详情见编译器文档</p></li>
</ol>

<h4>NUMA考虑</h4>

<ol>
<li><p>想要内存分配更接近它将要使用的地方</p>

<ul>
<li>&#8220;first touch&#8221; 决定分配位置</li>
</ul>

<p>-所以初始化一个OpenMP循环内数据方式与你计划之后要用到的方式一样</p></li>
</ol>

<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
</pre></td><td class="code"><pre><code class=""><span class="line">  !$OMP parallel do                      !$OMP parallel do
</span><span class="line">        do i=1,n                                   do i=1,n
</span><span class="line">          do j=1,m                                  do j=1,m
</span><span class="line">            A(j,i) = 0.0                               dowork(A(j,i)) 
</span><span class="line">          enddo                                      enddo
</span><span class="line">        enddo                                      enddo</span></code></pre></td></tr></table></div></figure></notextile></div>

<ol>
<li>记住设置 KMP_AFFINITY</li>
</ol>

<h4>常见问题</h4>

<ol>
<li><p>不足的堆栈大小</p>

<p>-OpenMP中最经常遇到的问题</p>

<p>-典型症状： 初始化是段错误</p></li>
<li><p>对于整个程序（共享+局部数据）：</p>

<p>-增加shell limits值</p>

<p>-（地址空间，内存分配）</p>

<ul>
<li>Bash : <code>ulimit -s [value in KB] or [unlimited]</code></li>
</ul>

<p>-只增加一次</p>

<ul>
<li><p>C shell： <code>limit stacksize 1000000</code> (1 GB)</p></li>
<li><p>Windows : /F:100000000 (以字节为单位)</p></li>
<li><p>典型 OS 默认： ~ 10 MB</p></li>
</ul></li>
<li><p>对于单个线程（只针对线程局部数据）</p>

<ul>
<li>export OMP_STACKSIZE=[size]，默认4 MB</li>
</ul>

<p>-实际分配内存，不要设置太大</p></li>
</ol>

<h4>调试 OpenMP 应用提示</h4>

<ol>
<li><p>设置 OMP<em>NUM</em>THREADS=1 运行</p>

<p>-产生线程级代码，但用一个线程运行</p>

<p>-如果工作，产生对线程代码Thread Checker</p>

<p>-如果失败，排除数据竞争或其他同步问题原因</p></li>
<li><p>用 -openmp-stubs-auto 编译</p>

<p>-RTL调用被解决，但没有线程级代码产生</p>

<p>-分配局部数组在堆栈上，和OpenMP一样</p>

<p>-如果工作，检查缺失的 FIRSTPRIVATE ，LASTPRIVATE</p>

<p>-如果失败， 消除了线程级代码产生原因</p></li>
<li><p>如果没有 -auto 编译，隐含改变内存模型</p>

<p>-可能不足的堆栈大小</p>

<p>-可能连续调用之间值未保存</p></li>
<li><p>如果用 PRINT 语句调试</p>

<p>-内部I/O缓冲线程安全（加上-openmp),但不同线程打印语句顺序不确定</p>

<p>-输出线程号用 omp<em>get</em>thread_num()</p>

<p>-记住调用模块 USE OMP_LIB (申明这个是整数)</p></li>
<li><p>用 -O0 -openmp 调试</p>

<p>-不行其它优化，OpenMP线程在 -O0 等级时不关闭</p></li>
</ol>

<h4>浮点重复性</h4>

<ol>
<li><p>用不同数量线程运行同样程序可能得出稍微不同结果</p>

<p>-由于不同工作分解导致微小的舍入差异</p>

<p>-大多数情况可通过 -fp-model precise 解决</p>

<p>-查看  “<a href="http://software.intel.com/en-us/articles/consistency-of-floating-point-results-using-the-intel-compiler">Consistency of Floating-Point Results using the Intel® Compiler</a>”</p></li>
<li><p>在OpenMP中浮点规约仍不能严格再现，即使线程数相同</p>

<p>-不同线程贡献顺序每次运行可能都不同</p>

<ul>
<li>-fp-model precise 这儿没什么帮助</li>
</ul>

<p>-如果关心这个，需要些显式代码</p></li>
</ol>

<h4>Intel 专门环境变量</h4>

<ol>
<li><p>KMP_SETTINGS = 0 | 1</p>

<p>-在运行时打印环境变量或默认</p></li>
<li><p>KMP_VERSION = off | on</p>

<p>-打印运行时库版本</p></li>
<li><p>KMP_LIBRARY = turnaround | throughput | serial</p>

<ul>
<li><p>turnaround idle threads do not yield to other processes</p></li>
<li><p>throughput idle threads sleep and yield after KMP_BLOCKTIME msec</p></li>
</ul></li>
<li><p>KMP_BLOCKTIME</p>

<ul>
<li>线程在睡眠前等待时间（默认200毫秒）</li>
</ul></li>
<li><p>KMP_AFFINITY </p></li>
<li><p>KMP<em>MONITOR</em>STACKSIZE</p>

<p>-设置分配给监控线程的堆栈</p></li>
<li><p>KMP<em>CPUINFO</em>FILE</p>

<p>-使用机器拓扑文件（例如代替Linux的 /proc/cpuinfo）</p></li>
</ol>

<h4>调试 OpenMP 应用工具</h4>

<ol>
<li><p>编译器源代码checker （&#8217;parallel lint&#8217;)</p>

<ul>
<li><p>ifort -openmp -diag-enable sc-parallel3</p></li>
<li><p>产生一些可能API违规操作的错误和警告诊断，包括</p></li>
</ul>

<p>-依赖性或数据竞争</p>

<p>-例如：由于缺少 PRIVATE 或 REDUCTION 申明</p>

<p>-并行区域闭一只，包括动态区域</p>

<p>-可以跨源文件分析</p></li>
<li><p>Updated Intel Parallel Debugger, idb (Linux) and Intel Parallel Debugger Extension (on Windows)</p>

<p>– Thread groups; lock-stepping; thread-specific break points</p>

<p>– On-the-fly serialization; shared data access detection</p>

<p>– OpenMP windows for threads, tasks, barriers, locks, …</p>

<p>– New for Fortran in version 11.1 update 2</p></li>
</ol>

<h4>Intel® Thread Checker</h4>

<ol>
<li><p>Unified set of tools that pinpoint hard-to-find errors in multi-threaded applications
– data races</p>

<p>– deadlocks</p>

<p>– memory defects</p>

<p>– security issues</p></li>
<li><p>Display data at the Linux command line or via a Windows GUI</p></li>
</ol>

<h4>Intel® Thread Profiler</h4>

<ol>
<li><p>Features &amp; Benefits</p>

<p>– View application concurrency level to ensure core utilization</p>

<p>– Identify where thread and synchronization related overhead impacts performance</p>

<p>– Identify objects impacting performance</p>

<p>– Visualize the distribution of work to threads</p>

<p>– Visualize when threads are active and inactive</p>

<p>– Supports native threads , Intel® Threading Building Blocks or OpenMP* applications on Windows* for IA-32/Intel® 64 architecture</p>

<p>– Data collector for Linux, but must copy to Windows for display.</p></li>
</ol>

<h4>总结</h4>

<p>Intel软件工具提供对利用多核架构线程级应用扩展支持。</p>

<p>提供线程化一个Fortran应用时引起的一系列问题的建议和背景信息。</p>

<h4>引用</h4>

<p>[1]  <a href="http://www.intel.com/software/products">Intel Software Products information, evaluations, active user forums</a></p>

<p>[2]  <a href="http://www.devx.com/go-parallel"> Parallelism tips</a></p>

<p>[3]  <a href="http://software.intel.com/en-us/articles/developing-multithreaded-applications-a-platform-consistent-approach"> Developing Multithreaded Applications: A Platform Consistent Approach</a></p>

<p>[4]  <a href="http://software.intel.com/en-us/"> The Intel® Fortran Compiler User and Reference Guides, available online</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[大型机使用技巧汇总]]></title>
    <link href="http://qingu.github.com/blog/2013/03/03/da-xing-ji-shi-yong-ji-qiao-hui-zong/"/>
    <updated>2013-03-03T21:17:00+08:00</updated>
    <id>http://qingu.github.com/blog/2013/03/03/da-xing-ji-shi-yong-ji-qiao-hui-zong</id>
    <content type="html"><![CDATA[<h3 id="section">0. 前言</h3>
<p>因为转模式的缘故，需要和大型机打交道，目前在IBM的AIX系统和神威的Linux系统之间来回倒腾，经常使用大型机如果掌握一些使用技巧，工作效率定会大大提高。本文用于持续总结使用大型机的一些技巧，与大家分享。</p>

<!-- more -->

<h3 id="section-1">1. 登录</h3>
<p>Windows系统下可以用一些ssh登录软件登录大型机，如 <code>Xmanager</code> 、<code>SecureCRT</code> 等。</p>

<p>Linux系统下直接用终端 + ssh命令。</p>

<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
</pre></td><td class="code"><pre><code class=""><span class="line">ssh user_name@host_name</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>host_name一般是大型机IP地址。稍后会提示输入密码，注意输入的密码不可见。</p>

<p>但是这样每次登录都要输入命令和密码，挺烦人的。可以考虑写个脚本自动登录，这里用到工具 <code>expect</code> 。
确定自己系统里是否有 expect ：<code>which expect</code>。如果没有就装下。</p>

<p>脚本内容：</p>

<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
<span class="line-number">13</span>
</pre></td><td class="code"><pre><code class=""><span class="line">#!/usr/bin/expect -f
</span><span class="line">
</span><span class="line">set user user_name
</span><span class="line">set host host_name
</span><span class="line">set password my_password
</span><span class="line">set timeout -1
</span><span class="line">
</span><span class="line">spawn ssh  $user@$host
</span><span class="line">expect {
</span><span class="line">	"*yes/no" { send "yes\r"; exp_continue}
</span><span class="line">	"*password:" { send "$password\r" }
</span><span class="line">}
</span><span class="line">interact</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>将上面代码保存为 go ，设置脚本权限为 755， <code>chmod 755 go</code> 。以后直接执行脚本就行。</p>

<p><strong>Linux下还有一种省去输密码的方法：公钥登录</strong></p>

<p>在自己电脑终端上输入：</p>

<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
</pre></td><td class="code"><pre><code class=""><span class="line">ssh-kengen </span></code></pre></td></tr></table></div></figure></notextile></div>

<p>出现一系列提示，可以一路回车。结束后，在～/.ssh/下生成两个文件：id_rsa.pub 和 id_rsa。前者是你的公钥，后者是私钥。</p>

<p>再输入以下命令将公钥传到大型机上：</p>

<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
</pre></td><td class="code"><pre><code class=""><span class="line">ssh-copy-id user_name@host_name</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>以后你就可以直接输入 <code>ssh user_name@host_name</code> 登录。如果你想更省事，再自定义一个函数放到 ~/.bashrc中：</p>

<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
</pre></td><td class="code"><pre><code class=""><span class="line">sw(){
</span><span class="line">  ssh user_name@host_name
</span><span class="line">}</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>以后直接在终端输入命令 <code>sw</code> 登录，是不是很方便。</p>

<p>scp 替代 ftp 传文件：
	scp [option] user@host1:file1 user@host2:file2</p>

<p>示例：</p>

<ul>
  <li>
    <p>复制本地文件到远程大型机上</p>

    <p>scp localfile user_name@host_name:/home/mydirctory</p>
  </li>
  <li>
    <p>复制远程大型机上文件到本地</p>

    <p>scp user_name@host_name:~/.bashrc ~</p>
  </li>
</ul>

<p>注：传输目录时加选项 <code>-r</code>     </p>

<h3 id="section-2">2. 设置登录路径</h3>
<p>这个设置不一定所有人需要。我是因为用的老师的大型机账号，在里面建了个自己的目录，我的所有工作就是在这个目录里完成。
每次登录到大型机后，要 cd 很长的路径才能到达我的工作目录。为了减少工作量，可以利用 <code>*nix</code> 系统的自定义函数功能。</p>

<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
</pre></td><td class="code"><pre><code class=""><span class="line">cdgu() {
</span><span class="line">	cd /path/to/my_working_directory
</span><span class="line">	ls
</span><span class="line">}</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>在 Linxu 系统 <code>~/.bashrc</code> 或 AIX 系统 <code>~/.profile</code> 添加类似以上的代码，保存后 <code>source ~/.bashrc</code> 或 <code>source ~/.profile</code> 使得修改立即生效。然后在终端里输入函数名 <code>cdgu</code> ，看看是不是直接进入自己的工作目录了。</p>

<p>注意起的函数名不要和系统已有命令冲突，可以事先用 <code>which 函数名</code> 测试。</p>

<h3 id="shell">3. Shell快捷健</h3>
<p>首先确定你的登录shell是哪种，用命令 <code>echo $SHELL</code> 查看。记住多少个快捷键为宜呢，个人认为 <code>Less is More</code> ，够用就好。</p>

<p>BASH Shell快捷键可以参考 <a href="http://linuxtoy.org/archives/bash-shortcuts.html" title="LinuxTOY">LinuxTOY</a> 和 <a href="http://en.wikipedia.org/wiki/Bash_(Unix_shell)#Keyboard_shortcuts" title="维基百科">维基百科</a>这篇文章总结的。我将第一篇文章网页保存为pdf版本了，可以打印出来放在电脑旁边，没事看看。地址：<a href="http://pan.baidu.com/share/link?shareid=431631&amp;uk=1392639653" title="百度云盘下载">百度云盘下载</a> 。</p>

<p>AIX下默认ksh，功能没有bash强大。不过也有一些快捷键。</p>

<p>以下列出一些快捷键，bash 和 ksh 都可以使用（亲测可用）。</p>

<ul>
  <li>Ctrl + a ：移到命令行首</li>
  <li>Ctrl + e ：移到命令行尾</li>
  <li>Ctrl + f ：按字符前移（右向）</li>
  <li>Ctrl + b ：按字符后移（左向）</li>
  <li>Ctrl + u ：从光标处删除至命令行首 （ksh中表现为删除整行）</li>
  <li>Ctrl + k ：从光标处删除至命令行尾</li>
  <li>Ctrl + w ：从光标处删除至字首 （ksh表现为从光标处删除至命令行首）</li>
  <li>Ctrl + d ：删除光标处的字符</li>
  <li>Ctrl + h ：删除光标前的字符</li>
  <li>Ctrl + p：历史中的上一条命令</li>
  <li>Ctrl + n：历史中的下一条命令</li>
</ul>

<h3 id="section-3">4. 常用命令</h3>
<p>以下列出一些常用命令：</p>

<ul>
  <li>cd ~ : 回到home目录</li>
  <li>cd - : 回到上一次工作目录（相当于撤销上一次cd命令）</li>
  <li>ls -l : 列出当前目录下所有文件详细属性（不包含隐藏文件，需要的话加 -a)</li>
  <li>ll : ‘ls -l –color=tty’的别名（快捷方式），目录和链接带色彩，以示区别</li>
  <li>
    <table>
      <tbody>
        <tr>
          <td>chmod a+x file : 设置文件权限为所有人可执行（u-用户，g-所属组，o-其他人,a-所有人</td>
          <td>r-读权限，w-写权限，x-可执行权限）</td>
        </tr>
      </tbody>
    </table>
  </li>
  <li>grep : 文件搜索</li>
  <li>tailf : 监控文件，常用于监控模式标准输出/错误文件的输出，例如  tailf std.error.0000</li>
</ul>

<h3 id="section-4">5. 编译问题</h3>
<ul>
  <li>AIX系统的xlf90编译器默认不能编译后缀名为 .f90的程序（真扯），需要加上编译选项 <code>-qsuffix=f=f90</code> 。如果经常编译f90程序的话，可考虑在 ~/.kshrc 中加上 </li>
</ul>

<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
</pre></td><td class="code"><pre><code class=""><span class="line">alias xx='xlf90 -qsuffix'</span></code></pre></td></tr></table></div></figure></notextile></div>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Linux下处理带^M字符文档]]></title>
    <link href="http://qingu.github.com/blog/2013/03/01/linuxxia-chu-li-dai-mzi-fu-wen-dang/"/>
    <updated>2013-03-01T20:55:00+08:00</updated>
    <id>http://qingu.github.com/blog/2013/03/01/linuxxia-chu-li-dai-mzi-fu-wen-dang</id>
    <content type="html"><![CDATA[<h3 id="section">原因</h3>
<p><code>*nix</code> 系统下用vim打开在Windows下编辑的文档会发现每行后出现 <code>^M</code> 字符，这是因为DOS下的编辑器和Linux编辑器对文件行末的回车符处理不一致。在windows下换行符是 <code>\r\n</code> ，而 <code>*nix</code> 下换行符是 <code>\n</code> 。以下是几种解决方法。</p>

<!-- more -->

<h3 id="section-1">解决方法</h3>

<p>1.使用 Linux 内置命令行工具 <code>dos2unix</code></p>

<pre><code>dos2unix filename
</code></pre>

<p>具体用法可以 <code>man dos2unix</code></p>

<p>注：AIX系统下命令是 <code>dosunix</code> ，语法是：</p>

<pre><code>dosunix inputfile outfile
</code></pre>

<p>2.Vim中替换命令</p>

<p>在命令模式下输入 <code>%s/^M//g</code> 。其中 <code>^M</code> 是用 <code>Ctrl+v</code> 和 <code>Ctrl+m</code> 输入的。</p>

<p>3.Vim中 <code>set</code> 命令(测试不成功)</p>

<p>在命令行模式下输入</p>

<pre><code>:set fileformat=unix
:w
</code></pre>

<p>4.<code>sed</code> 工具</p>

<p>第2种方法中替换思路可以用sed实现，具体命令为：</p>

<pre><code>sed 's/^M//g' filename &gt; new_filename
</code></pre>

<p>注意其中 <code>^M</code> 就是原来的 <code>^</code> 和 <code>M</code> 组合。与方法2有区别。</p>

<p>5.<code>*nix</code> 内置tr命令（测试不成功）</p>

<p>原因分析里说过Windows换行符比*nix多了 <code>\r</code> 。使用内置转换字符命令 <code>tr</code> 。</p>

<pre><code>tr -d '\r' filename
</code></pre>

<p>以上就是我从网上收集的几种方法，其中方法3和方法5测试未成功，可能是我用错了，知道的人可以告诉我，先行谢过！</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Octopress和Markdown使用技巧汇总]]></title>
    <link href="http://qingu.github.com/blog/2013/02/27/octopresshe-markdownshi-yong-ji-qiao-hui-zong/"/>
    <updated>2013-02-27T21:18:00+08:00</updated>
    <id>http://qingu.github.com/blog/2013/02/27/octopresshe-markdownshi-yong-ji-qiao-hui-zong</id>
    <content type="html"><![CDATA[<h3 id="section">0. 摘要</h3>
<p>本文用于持续收集Octopress使用技巧及高级配置，同时记录在折腾过程中的遇到的问题。</p>

<ol>
  <li>
    <p>Octopress中在新标签页打开超链接</p>
  </li>
  <li>
    <p>首页只显示摘要部分</p>
  </li>
  <li>
    <p>About分页创建</p>
  </li>
  <li>
    <p>在Octopress中使用 $latex$
<!-- more --></p>
  </li>
</ol>

<h3 id="octopress">1. Octopress中在新标签页打开超链接</h3>
<p>用markdown写的文档，只支持在本窗口打开超链接，影响阅读效果。参考<a href="http://www.blogjava.net/lishunli/archive/2013/01/20/394478.html" title="李顺利">李顺利</a>介绍的方法，有两种:</p>

<p>(1). 利用markdown支持html语法，直接使用 <code>&lt;a href="http://you-need-ref-link.com" target="_blank"&gt;my blog&lt;/a&gt;</code> 。</p>

<p>(2). 更好的方法是在{YOUR_OCTOPRESS}/source/_includes/custom/head.html文件后面添加下面的代码 (YOUR_OCTOPRESS是你Octopress的主目录)</p>

<pre><code>function addBlankTargetForLinks () {
  $('a[href^="http"]').each(function(){
  $(this).attr('target', '_blank');
  });
}

$(document).bind('DOMNodeInserted', function(event) {
  addBlankTargetForLinks();
});
</code></pre>

<h3 id="section-1">2. 首页只显示摘要部分</h3>
<ul>
  <li>
    <p>在markdown文档中加入 <code>&lt;!-- more --&gt;</code> 控制摘要截取位置</p>
  </li>
  <li>
    <p>修改 <code>_config.yml</code> 中 <code>excerpt_link</code> 控制连接文字</p>
  </li>
</ul>

<h3 id="about">3. About分页创建</h3>
<ul>
  <li>
    <p>在 <code>{Octopress_home}/source</code> 目录下新建 <code>about</code> 目录，并在里面创建 <code>index.markdown</code> 文件。</p>
  </li>
  <li>
    <p>编辑导航页 <code>{Octopress_home}/source/_includes/custom/navigation.html</code> ，添加以下内容 :</p>

    <p><code>&lt;li&gt;&lt;a href="http://qingu.github.com/about/index.markdown"&gt;About&lt;/a&gt;&lt;/li&gt;</code></p>
  </li>
  <li>
    <p>侧边栏添加 <code>about me</code> 介绍:在 <code>{Octopress_home}/source/_includes/custom/asides/about.html</code> 添加 About me 信息</p>
  </li>
</ul>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
</pre></td><td class="code"><pre><code class="html"><span class="line"><span class="nt">&lt;section&gt;</span>
</span><span class="line">   <span class="nt">&lt;h1&gt;</span>About me<span class="nt">&lt;/h1&gt;</span>
</span><span class="line">   <span class="nt">&lt;p&gt;&lt;img</span> <span class="na">src=</span><span class="s">&quot;/images/about.jpg&quot;</span><span class="nt">&gt;&lt;/p&gt;</span>
</span><span class="line">   <span class="nt">&lt;p&gt;</span>say something about yourself<span class="nt">&lt;/p&gt;</span>
</span><span class="line">   <span class="nt">&lt;p&gt;&lt;a</span> <span class="na">href=</span><span class="s">&quot;mailto:youremail@gmail.com&quot;</span><span class="nt">&gt;&lt;img</span> <span class="na">src=</span><span class="s">&quot;/images/my_mail.png&quot;</span> <span class="na">alt=</span><span class="s">&quot;youremail@gmail.com&quot;</span><span class="nt">&gt;&lt;/a&gt;&lt;/p&gt;</span>
</span><span class="line"><span class="nt">&lt;/section&gt;</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<ul>
  <li>效果请见我的about me。</li>
</ul>

<h3 id="octopress-latex">4. 在Octopress中使用 $latex$</h3>
<p>参考<a href="http://yanping.me/cn/blog/2012/03/10/octopress-with-latex/" title="雁起平沙博客">雁起平沙博客</a>介绍方法，使用 <code>kramdown</code> 渲染markdown文档，支持 $latex$ 。</p>

<p>注意还有一步是将 <code>_config.yml</code> 中修改 <code>markdown: kramdown</code></p>

<p>右键点击公式网页消失问题解决方法<a href="http://steshaw.org/blog/2012/02/09/hello-mathjax/" title="见此">见此</a></p>

<p>示例：</p>

<pre><code>$$
\begin{align*}
  &amp; \phi(x,y) = \phi \left(\sum_{i=1}^n x_ie_i, \sum_{j=1}^n y_je_j \right)
  = \sum_{i=1}^n \sum_{j=1}^n x_i y_j \phi(e_i, e_j) = \\
  &amp; (x_1, \ldots, x_n) \left( \begin{array}{ccc}
      \phi(e_1, e_1) &amp; \cdots &amp; \phi(e_1, e_n) \\
      \vdots &amp; \ddots &amp; \vdots \\
      \phi(e_n, e_1) &amp; \cdots &amp; \phi(e_n, e_n)
    \end{array} \right)
  \left( \begin{array}{c}
      y_1 \\
      \vdots \\
      y_n
    \end{array} \right)
\end{align*}
$$
</code></pre>

<p>公式效果图：</p>

<script type="math/tex; mode=display">% &lt;![CDATA[

\begin{align*}
  & \phi(x,y) = \phi \left(\sum_{i=1}^n x_ie_i, \sum_{j=1}^n y_je_j \right)
  = \sum_{i=1}^n \sum_{j=1}^n x_i y_j \phi(e_i, e_j) = \\
  & (x_1, \ldots, x_n) \left( \begin{array}{ccc}
      \phi(e_1, e_1) & \cdots & \phi(e_1, e_n) \\
      \vdots & \ddots & \vdots \\
      \phi(e_n, e_1) & \cdots & \phi(e_n, e_n)
    \end{array} \right)
  \left( \begin{array}{c}
      y_1 \\
      \vdots \\
      y_n
    \end{array} \right)
\end{align*}
 %]]&gt;</script>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Markdown入门]]></title>
    <link href="http://qingu.github.com/blog/2013/02/27/markdownru-men/"/>
    <updated>2013-02-27T20:26:00+08:00</updated>
    <id>http://qingu.github.com/blog/2013/02/27/markdownru-men</id>
    <content type="html"><![CDATA[<h3 id="section">前言</h3>
<p>github真的很强大，原来以为只是一个代码托管及项目版本控制的网站，没想到还可以搭建blog及wiki。按照网上的教程，磕磕碰碰的终于搭建好了blog。借着建这个blog的机会，学习下Markdown和git。首先，学习下Markdown标记语言，因为github上blog要求用标记语言写，不学这个blog都写不起来。</p>

<p>本文就是我参考<a href="http://wowubuntu.com/markdown/basic.html" title="Wow!Ubuntu">Wow!Ubuntu</a>和<a href="http://http://zh.wikipedia.org/wiki/Markdown" title="维基百科">维基百科</a>上教程及自己的实践写的（是用Markdown写的哦），只涉及到Markdown入门语法，学完后基本上能写blog。可以使用在线markdown编辑器学习，这样起到“所写即所得”作用，加深印象。这里介绍一个<a href="http://www.ostools.net/markdown">在线Markdown编译器</a>，可以转换成html及实时预览。好了，开始我们的Markdown学习之旅。。</p>

<!-- more -->

<h3 id="section-1">1.标题</h3>
<p>一篇文章首先是标题。Markdown支持两种标题语法，Settext和atx形式。</p>

<ul>
  <li>
    <p>Settext形式：利用底线形式，用 <code>=</code> （最高级标题） 和 <code>-</code> （第二级标题）作为底线形式标题的标记。</p>
  </li>
  <li>
    <p>atx形式：在行首插入 1 到 6 个 <code>#</code>，对应标题 1 到 6 级（从大到小顺序）。</p>
  </li>
</ul>

<p>atx比Settext提供更多规格的标题形式，atx中 <code>#</code> 和 <code>##</code> 分别对应Settext中 <code>=</code> 和 <code>-</code> 。</p>

<p>语法示例：</p>

<pre><code>Fisrt Level Header
==================
Second Level Header
-------------------
# Header 1 (equal `=`)
## Header 2 (equal `-`)
</code></pre>

<h3 id="section-2">2.引用</h3>
<p>文章中经常引用别人的话，为区别开来可以用引用标记特别注明。Markdown中使用email形式的 ‘<code>&gt;</code>‘（右尖括号号）。可以在引用段落前加一个，也可以在段落每行前面加一个。如果区块引用由几段组成，引用段落之间需要加一个 <code>&gt;</code>区分引用不同段落（这是引用标记和段落标记的组合）。</p>

<p>语法示例：</p>

<pre><code>&gt; This is a blockquote.
&gt;
&gt; This is the second paragraph in the blockquote.
&gt;
&gt; ## This is an H2 in a blockquote
</code></pre>

<h3 id="section-3">3.段落</h3>
<p>一篇文章由N个段落组成。一个段落由一个或多个连续的行构成，Markdown通过一个以上的空行区别不同的段落。只要看起来像空行，不管是由空格符还是tab组成的，一律视为空行。</p>

<p>多个空格会被看成一个空格。一般段落首行没有缩进，如果需要首行缩进的话可用<code>&amp;emsp;</code> (全方大空白)或 <code>&amp;ensp;</code> （半方大空格）。</p>

<p>语法示例：</p>

<pre><code>&amp;emsp 这是段落1
这是段落2
</code></pre>

<h3 id="section-4">4.强调</h3>
<p>Markdown使用星号 <code>*</code> 和底线 <code>_</code> 标记强调区段。在强调部分前加上标记，在强调部分结束后加上标记限制强调范围。注意星号强调标志与强调内容之间不能有空格存在，不然变成无序列表了。</p>

<p>语法示例：</p>

<pre><code>*强调部分变为斜体*  或 _强调部分变为斜体_
**加重强调部分变为粗体**  或 __加重强调变为粗体__
***特别强调部分变为粗斜体*** 或 ___特别强调部分变为粗斜体___
</code></pre>

<h3 id="section-5">5.列表</h3>
<p>列表分为无序列表和有序列表两种。
无序列表使用星号、加号、减号三种中任意一种作为无序列表的项目标记。三种符号可混用，但不建议这样做。注意列表标记和列表项目之间必须至少一个空格。</p>

<p>语法示例：</p>

<pre><code>* 无序列表中一项
* 子项，以一个tab或者4个空格缩进
* 无序列表中另一项
+ 无序列表另一项
- 无序列表另一项
</code></pre>

<p>有序列表使用数字接一个英文句点作为项目标记。注意数字和句点间不能有空格，句点和项目内容之间至少有一个空格。</p>

<p>语法示例：</p>

<pre><code>1. 有序列表一项
2. 有序列表另一项
</code></pre>

<h3 id="section-6">6.链接</h3>
<p>Markdown支持两种形式链接语法。</p>

<p>行内插入链接：</p>

<pre><code>[链接文字](链接地址)
示例： [github](http://www.github.com)
</code></pre>

<p>参考形式链接：类似于文献中最后列出的参考文献。</p>

<p>内容行内插入：</p>

<pre><code>[链接文字][链接引用标签]
</code></pre>

<p>在段落后面或文档结尾放上一下内容，生成一个链接：</p>

<pre><code>[链接引用标签]: 链接地址 "链接标题"
</code></pre>

<p>注意其中的冒号和引号都是英文符号。建议链接引用标签用数字表示，可以统计数量。
    我在<a href="http://wowubuntu.com/markdown/basic.html" title="Wow!Ubuntu">github</a>上建立了blog。
    <a href="http://wowubuntu.com/markdown/basic.html" title="Wow!Ubuntu">1</a>: http://qingu.github.com “github”</p>

<h3 id="section-7">7.图片</h3>
<p>图片引用类似于链接引用。图片可以是网络图片，也可以是本地图片，本地图片建议放在source/images目录中，按年月建立两层目录放置便于归档。本地图片的url类似为/images/year/month/img.png。</p>

<p>行内形式（title可选）：
    <img src="http://qingu.github.com/path/to/img.jpg" alt="alt text" title="title" /></p>

<p>参考形式：</p>

<p>行内引用
    ![alt text][id]</p>

<p>段落结束或文档结尾生成一个图片引用
    [id]: /path/to/img.jpg “title”</p>

<p>语法示例：</p>

<pre><code>![alt MyEmail](/images/myemail.png "MyEmail")
</code></pre>

<p>效果图：</p>

<p><img src="http://qingu.github.com/images/myemail.png" alt="alt MyEmail" title="MyEmail" /></p>

<h3 id="section-8">8.代码</h3>
<p>两种选择，一种是把代码用反引号 <code>`</code> 括起来。另一种是以制表符或至少 4 个空格缩进的行（常用于代码段）。本文中白底黑字就是用第一种方法，墨绿色底的代码块用的是第二种方法。</p>

<h3 id="section-9">9.水平分割线</h3>
<p>要生成水平分割线，可以在单独一行里输入3个或以上的短横线（减号）、星号或者下划线实现。短横线和星号之间可以输入任意空格。以下每一行都产生一条水平分割线。</p>

<pre><code>* * *
***
******
- - -
---------------------
</code></pre>

<h3 id="section-10">参考资料</h3>

<p><a href="http://wowubuntu.com/markdown/basic.html" title="Wow!Ubuntu">1</a> http://wowubuntu.com/markdown/basic.html</p>

<p><a href="http://http://zh.wikipedia.org/wiki/Markdown" title="维基百科">2</a> http://http://zh.wikipedia.org/wiki/Markdown</p>

<p><a href="http://www.ostools.net/markdown">3</a> http://www.ostools.net/markdown</p>

]]></content>
  </entry>
  
</feed>
