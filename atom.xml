<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[MetMan]]></title>
  <link href="http://qingu.github.com/atom.xml" rel="self"/>
  <link href="http://qingu.github.com/"/>
  <updated>2013-07-06T15:41:11+08:00</updated>
  <id>http://qingu.github.com/</id>
  <author>
    <name><![CDATA[Qingu Jiang]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[segmentation fault产生根本原因]]></title>
    <link href="http://qingu.github.com/blog/2013/05/31/segmentation-faultchan-sheng-gen-ben-yuan-yin/"/>
    <updated>2013-05-31T20:41:00+08:00</updated>
    <id>http://qingu.github.com/blog/2013/05/31/segmentation-faultchan-sheng-gen-ben-yuan-yin</id>
    <content type="html"><![CDATA[<h2 id="section">前言</h2>
<p>本文译自Intel® Developer Zone上文章<a href="http://software.intel.com/en-us/articles/determining-root-cause-of-sigsegv-or-sigbus-errors" title="Determining Root Cause of Segmentation Faults SIGSEGV or SIGBUS errors">Determining Root Cause of Segmentation
Faults SIGSEGV or SIGBUS errors</a>。</p>

<!--more-->

<h2 id="section-1">正文</h2>
<p><strong>问题</strong>：当我运行由Intel Fortran编译器编译的代码时，在Linux平台得到’sigsegv’
错误提示(或Mac OS X平台sigbus提示)。这份代码在&lt;先去编译器/平台&gt;上运行多年没出
问题。这是Intel编译器一个bug吗？</p>

<p><strong>运行环境</strong>：linux 或 Mac OS X</p>

<p><strong>根本原因</strong>：有许多可能原因。段错误(segmentation fault)(Mac OS X下是bus
        error)是一个有多种原因的通用错误。下面我们描述潜在的原因并给出建议以避
免段错误。</p>

<p><strong>可能原因 #1 Fortran指定栈空间耗尽：解决方法 -heap-arrays编译选项</strong></p>

<p>Intel Fortran编译器使用栈空间分配许多数组数据的临时或中间副本。</p>

<p><strong>非OpenMP和非自动并行应用</strong>：如果你的程序未使用OpenMP或
Auto-parallelization(-parallel编译开关)且编译器版本是Linux v9.1.037(或所有Mac
        OS 编译器)，那么可以尝试 <code>-heap-arrays</code> 编译选项。OpenMP或
Auto-parallelization用户如用低于v9.1.0137的Linux
编译器请阅读<strong>可能原因 #2</strong>关于不限制栈大小的提示。</p>

<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
</pre></td><td class="code"><pre><code class=""><span class="line">-heap-arrays</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>如果这个解决了sigsegv或bus error错误的话，可以不用往下读了。你可能想读pdf附件
学习关于临时数组何时何处被创建内容。改变一点代码可以避免一些临时数组，从而减少
对临时副本的需求(改善性能)。同时，<code>-heap-arrays</code>编译器选项有一个可选参数[size]
来指定大于[size]的数组分配到堆(heap)中的阈值大小，单位为Kbytes，其它小于等于[size]的
分配到堆栈中。例如：</p>

<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
</pre></td><td class="code"><pre><code class=""><span class="line">-heap-arrays 10</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>将所有大于10Kbytes的自动和临时数组放入堆中。</p>

<p><strong>可能原因 #2 堆栈空间耗尽。 解决方法：增加OpenMP应用或其它应用的堆栈大小</strong></p>

<p>首先尝试<em>增加</em>Linux和Mac OS X的shell堆栈限制。然而，该选项可能对OpenMP或自动并行
代码的数据共享产生无法预料的影响。因此，建议OpenMP和自动并行用户不用
<code>-heap-arrays</code>，转而尝试<em>关掉</em>shell堆栈大小的限制。</p>

<p>Linux, bash: <code>ulimit -s unlimited</code></p>

<p>Linux, csh/tcsh: <code>unlimit stacksize</code></p>

<p>你可以用以下方法检查你的堆栈大小限制，并找到你的shell环境的<code>stack size</code>限制。</p>

<p>bash: <code>ulimit -a</code></p>

<p>csh: <code>limit</code></p>

<p>注意：如果你在一个批处理子系统下运行程序，可能需要将上面命令加入到个人启动配置
文件中(~/.bashrc、~/.profile或~/.cshrc)</p>

<p>对于Mac OS X系统，shell堆栈大小有一个硬上限。对于大多系统，</p>

<p>bash: <code>ulimit -s 65532</code></p>

<p>即设置堆栈限制为64MB。</p>

<p>一个可替代方法是使用一个链接选项增加执行者默认shell堆栈大小，方法记录在此：<a href="http://software.intel.com/en-us/articles/intel-fortran-compiler-increased-stack-usage-of-80-or-higher-compilers-causes-segmentation-fault" title="/en-us/articles/intel-fortran-compiler-increased-stack-usage-of-80-or-higher-compilers-causes-segmentation-fault">/en-us/articles/intel-fortran-compiler-increased-stack-usage-of-80-or-higher-compilers-causes-segmentation-fault</a></p>

<p>重新运行你的程序，如果这个方法解决此问题了，可以不用往下读了。如果你的应用仍然
产生sigsegv或bus error，继续读吧。</p>

<p><strong>可能原因 #2 主要的：由于堆或通用内存耗尽导致堆栈耗尽</strong></p>

<p>在进程内存映射中，堆和堆栈相互向对方增长。如果他们碰撞了，这也能引起一个关于堆分配或下一个堆栈分配的段错误。</p>

<p>也可能应用耗尽所有物理内存+swap缓冲区。记住，对于64位应用，虚拟内存实际上是
unlimited。然而，事实上可消费的内存大小有一个上限，物理ram+swap空间（典型的是
物理内存大小的2倍）。可以通过 <code>free</code> 命令获得该信息。物理内存也可以通过<code>cat
/proc/meminfo</code>中’MemTotal’项和’SwapTotal’项看到。系统本身也需要一些空间，所以
经验法则是尽可能保持应用的内存占用(memory footprint)在MemTotal的80%左右并且不要超过
MemTotal+SwapTotal。</p>

<p>使用<code>-g -traceback</code>编译链接来定位代码终止的地方。</p>

<p><strong>可能原因 #3 由于用户代码错误导致堆栈溢出</strong></p>

<p>有许多用户代码错误可能引起堆栈溢出并导致运行时sigsegv或bus error。由于段错误可
能发生在与堆栈最初溢出地方不相关的程序后面部分，从而导致错误很难发现。</p>

<p>第一步尝试隔离代码错误发生的地方。通过产生一个执行’traceback’来得到。使用ifort
驱动和下面这些选项编译、链接：</p>

<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
</pre></td><td class="code"><pre><code class=""><span class="line">-g -traceback</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>当代码出错，通常会得到关于错误发生时的调用堆栈的报告。如果没有得到一个堆栈
traceback，确保在编译和链接时都用到了<code>-g</code>并且确保编译时使用了<code>-traceback</code>。有
这样的情况：当程序在内核空间时段错误发生，因此没有用户堆栈用于trace back。
Intel正致力于在未来版本中改善这点。</p>

<p>trace back报告从下往上读。找到最上面的子程序或函数并通过行号来隔离出哪条指令引
起错误的。检查这条语句的用户代码错误。如果没有明显用户错误，继续往下。</p>

<p><strong>可能原因 #4 数组越界. 解决方法：-check bounds</strong></p>

<p><code>-check bounds</code>编译选项提供数组访问和字符串表达式运行时检查保证索引在数组边界
内。这个检查有助于找到索引超出数组申明大小的情况。这个选项对性能影响很大，影响
程度取决于应用中多少数组访问被执行。同时，<code>-check bounds</code>数组越界检查不对最外
维指定为*的虚参数组或上下维都为1的数组执行。为开启边界检查，用下面选项编译：</p>

<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
</pre></td><td class="code"><pre><code class=""><span class="line">-check bounds -g</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>并运行程序。检查在运行时执行，而不是在编译时执行。如果这样能发现错误，停下来。
没有，继续往下读。</p>

<p><strong>可能原因 #5 把函数当作子程序调用(calling)或把子程序当作函数调用(invoking)</strong></p>

<p>当用户做类似于这样的事，用户代码错误：</p>

<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
</pre></td><td class="code"><pre><code class=""><span class="line">--- main program ---
</span><span class="line">...
</span><span class="line">call ThisIsIllegal( some_arguments )
</span><span class="line">...
</span><span class="line">--- end main program ---
</span><span class="line">
</span><span class="line">--- ThisIsIllegal ---
</span><span class="line">integer function ThisIsIllegal( some_arguments )
</span><span class="line">...
</span><span class="line">--- end ThisIsIllegal ---</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>上面例子中，主程序以子程序调用方式调用ThisIsIllegal，然而ThisIsIllegal申明是函
数。这会引起堆栈溢出。为测试这些情况，尝试使用编译选项</p>

<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
</pre></td><td class="code"><pre><code class=""><span class="line">-fp-stack-check -g -traceback</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>用这些选项编译并运行。如果堆栈由于类似上面的原因崩溃，代码将推出并给出一个
stack trace。</p>

<p>可以用一个编译时检查来检查程序接口：</p>

<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
</pre></td><td class="code"><pre><code class=""><span class="line">-gen-interfaces -warn interfaces</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>编译时检查将为你的程序产生INTERFACE块。<code>-warn</code>接口随后将使用这些编译器产生的接口并
检查程序调用确保参数和接口在被调用者和调用者之间匹配。注意这个检查只对Fortran
源代码起作用。对混编程序不检查接口。</p>

<p><strong>可能原因 #6 传递非连续数组部分引起的大的临时数组. 解决方法：使用 -check
arg_temp_created 侦测并通过包含显式接口和assumed shaped 数组代码修复</strong></p>

<p>考虑这个例子：</p>

<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
</pre></td><td class="code"><pre><code class=""><span class="line">--- main program ---
</span><span class="line">real(8) :: f(1800,3600,1)
</span><span class="line">external sub
</span><span class="line">...
</span><span class="line">call sub( f(1:900,:,:) )
</span><span class="line">...
</span><span class="line">--- end main program ---</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>子程序‘sub’在单独的编译源文件中：</p>

<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
</pre></td><td class="code"><pre><code class=""><span class="line">--- external subroutine "sub" ---
</span><span class="line">subroutine sub( f )
</span><span class="line">real(8) :: f(900,3600,1)
</span><span class="line">...
</span><span class="line">--- end subroutine "sub" ---
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>这种情况下，‘sub’期望一个连续数组，大小为900<em>3600</em>1。然而，调用传递一个内存中
非连续的数组。这种情况下，编译器将在调用时产生一个临时数组复制数组”f”非连续块
元素使之成为连续数组，这这是”sub“所期待的。除非指定
<code>-heap-arrays</code>，否则这个临时数组分配在堆栈中。</p>

<p>为了检测代码里是否发生这样的情况，用下面选项编译：</p>

<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
</pre></td><td class="code"><pre><code class=""><span class="line">-check arg_temp_created</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>并运行程序。当临时参数被创建，将输出信息。为了解决这个问题，创建一个显式接口，
并在”sub“使用一个assumed shaped数组将移除临时数组的需要。</p>

<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
<span class="line-number">13</span>
<span class="line-number">14</span>
<span class="line-number">15</span>
<span class="line-number">16</span>
<span class="line-number">17</span>
</pre></td><td class="code"><pre><code class=""><span class="line">--- main ---
</span><span class="line">real(8) :: f(1800,3600,1)
</span><span class="line">interface
</span><span class="line">subroutine sub(f)
</span><span class="line">real(8) :: f(:,:,:)
</span><span class="line">end subroutine sub
</span><span class="line">end interface
</span><span class="line">...
</span><span class="line">call sub( f(1:900,:,:) )
</span><span class="line">...
</span><span class="line">--- end main program ---
</span><span class="line">
</span><span class="line">--- "sub" ---
</span><span class="line">subroutine sub( f )
</span><span class="line">real(8) :: f(:,:,:)
</span><span class="line">...
</span><span class="line">end subroutine sub
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>记住，虽然这样避免了临时数组，编译器知道”sub”内数组”f”可能是非连续的。因此，一
些使用”f”的语句的优化可能关闭，进而影响性能。</p>

<p><strong>不属于以上情况：解决方法-进一步深入分析</strong></p>

<p>99%的sigsegv或bus error错误原因是上面列举的情况。然而，也有其他可能情况导致段
错误。</p>

<p>如果你的应用链接外部库，确保库和编译器兼容。外部库是否用Intel编译器编译的？如
果是，是否主要版本一致-即库用Intel Fortran v9.1编译的，但你的应用用Intel
Fortran v10.x或v11.x编译的？ Intel只保证主版本内兼容(9,10,11就是主版本例子)</p>

<p>如果外部库来自于软件销售商或工具：该销售商是否明确Intel编译器兼容，如果确认，
他们用哪个版本验证他们的库？你应该只是用销售商验证过的Intel编译器版本。</p>

<p><strong>当所有都失败了…</strong></p>

<p>提交给用户论坛吧！</p>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[test blogger sync]]></title>
    <link href="http://qingu.github.com/blog/2013/05/31/test-blogger-sync/"/>
    <updated>2013-05-31T20:32:00+08:00</updated>
    <id>http://qingu.github.com/blog/2013/05/31/test-blogger-sync</id>
    <content type="html"><![CDATA[<h2 id="section">前言</h2>

<p>再次测试博客同步更新内容。</p>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[GRAPES不同平台移植思路总结]]></title>
    <link href="http://qingu.github.com/blog/2013/05/04/grapesbu-tong-ping-tai-yi-zhi-si-lu-zong-jie/"/>
    <updated>2013-05-04T09:12:00+08:00</updated>
    <id>http://qingu.github.com/blog/2013/05/04/grapesbu-tong-ping-tai-yi-zhi-si-lu-zong-jie</id>
    <content type="html"><![CDATA[<h3 id="section">前言</h3>

<p>本文用于总结GRAPES模式在不同平台移植的思路及步骤。不同计算平台架构(PowerPC vs
IA、32 bit vs 64 bit)、编译器各有不同(xl,intel,pgi,gcc)，移植时需要一步一步进
行修改，保证正确性前提再开始优化。</p>

<!--more-->

<h3 id="section-1">1. 查看新平台环境</h3>
<p>查看新平台环境包括：平台架构，多少位的，编译器是什么，所需软件是否已安装，如干
gmake，以及模式所需外部库netcdf等。</p>

<ul>
  <li>查看平台 <code>uname -a</code></li>
  <li>编译器   <code>which compiler-name</code> ，比如AIX的xlf90，intel的ifort，PGI的pgf90</li>
  <li>netcdf库 <code>which nc-config</code> ，如果没有，自己到官网上下个自己装，这里要注意的
 是安装netcdf的编译器要与模式使用的相同。如果存在，则用 <code>nc-config -a</code> 查看
 安装它所用的编译器以及以后使用它时链接库格式</li>
</ul>

<h3 id="section-2">2. 正确性移植</h3>
<p>移植要保证正确性，对照原来平台的配置文件中各编译选项，查找新平台编译器功能相同
的编译选项。需要注意以下几个方面的编译选项：</p>

<ul>
  <li>32 bit or 64 bit</li>
  <li>保证浮点计算一致性编译选项</li>
  <li>IO的大端、小端选择，big_endian or little_endian</li>
  <li>外部数学库，文件读写库netcdf</li>
</ul>

<p>基本配置好了，编译程序。一般将编译输出到一个log文件里方便查错。</p>

<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
</pre></td><td class="code"><pre><code class=""><span class="line">./compile.sh INTEL &gt;log 2&gt;&amp;1</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>编译完成后，vi打开log文件，查找log中是否有error、Error等字眼。如有，查看其错误
说明，修改。</p>

<h3 id="section-3">3. 正确性验证</h3>
<p>编译成功后，运行程序，进行正确性验证。正确性验证方法如下：</p>

<ul>
  <li>多转几次，验证结果是否一致，检验浮点计算的一致性</li>
  <li>输出数据或绘图，与原平台结果比较。可能有差异，但应很小。</li>
  <li>输出数据是否符合实际物理意义</li>
</ul>

<h3 id="section-4">4. 优化</h3>
<p>正确性验证后，开始对编译优化，查看编译器帮助，查看优化等级说明，最好选择在保证
正确性前提下最大优化，一般是 <code>-O2</code> 或 <code>-O3</code> 。</p>

<p>编译后最好再次验证下。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[博客同步测试]]></title>
    <link href="http://qingu.github.com/blog/2013/04/24/bo-ke-tong-bu-ce-shi/"/>
    <updated>2013-04-24T19:17:00+08:00</updated>
    <id>http://qingu.github.com/blog/2013/04/24/bo-ke-tong-bu-ce-shi</id>
    <content type="html"><![CDATA[<p>本文只是用来测试用ifttt同步本博客内容到blogger，原理是 <code>RSS TO Blogger</code>。
利用博客全文输出订阅RSS，然后post到Blogger上。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[GRAPES源码分析之计时系统]]></title>
    <link href="http://qingu.github.com/blog/2013/04/23/grapesyuan-ma-fen-xi-zhi-ji-shi-xi-tong/"/>
    <updated>2013-04-23T16:14:00+08:00</updated>
    <id>http://qingu.github.com/blog/2013/04/23/grapesyuan-ma-fen-xi-zhi-ji-shi-xi-tong</id>
    <content type="html"><![CDATA[<h3 id="section">前言</h3>

<p>模式开发者（尤其是并行计算开发者）对模式各部分执行花费的时间很感兴趣，需要了解哪里耗时比较长，进而对其进行优化。普通用户一般不需要这个功能。计时系统的一般思路：在需要计时部分的起点和终点设置计时器（调用计时子程序），两个点时间差即为计时部分所耗时间。</p>

<!--more-->

<h3 id="grapes">GRAPES计时系统</h3>

<p>目前发现GRAPES中有3套计时系统，分别在 <code>module_integrate</code> 、 <code>sovle_grapes</code> 及 <code>ritche_puw_jin</code> 中，对各自调用的子程序进行计时。计时子程序使用MPI墙钟函数。为了使版本统一，使用条件预编译方法控制开启实现计时功能（MPI同步计时会使模式整体运行时间过长，不适用于业务）。</p>

<h4 id="solvegrapes">solve_grapes计时系统</h4>

<p>以下以solve_grapes中计时系统进行说明</p>

<ul>
  <li>计时开始部分（别忘了引入mpi模块， <code>use MPI</code> ）</li>
</ul>

<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
<span class="line-number">13</span>
</pre></td><td class="code"><pre><code class=""><span class="line">#ifdef DETAIL_TIMING
</span><span class="line">   integer :: ierr, comm
</span><span class="line">   real*8 :: start_time, end_time
</span><span class="line">   real*8 ,save::  wtimer(80,2)=0. 
</span><span class="line">   !保存计时数据的二维数组，第一维指不同计时部分，第二维指不同步和同步两种情况
</span><span class="line">#endif
</span><span class="line">
</span><span class="line">#ifdef DETAIL_TIMING
</span><span class="line">   comm=mpi_comm_world          
</span><span class="line">   call mpi_barrier(comm, ierr)  !各进程同步，使各进程计时起点一致
</span><span class="line">   start_time=mpi_wtime()        !记录起点墙钟时间
</span><span class="line">   call get_communicator(comm)
</span><span class="line">#endif</span></code></pre></td></tr></table></div></figure></notextile></div>

<ul>
  <li>第一个计时部分终点处</li>
</ul>

<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
</pre></td><td class="code"><pre><code class=""><span class="line">#ifdef DETAIL_TIMING
</span><span class="line">     end_time=mpi_wtime()             ！本进程计时终点墙钟时间
</span><span class="line">     wtimer(1,1)=end_time-start_time  ! 未同步情况本进程该计时部分所用时间
</span><span class="line">     call mpi_barrier(comm, ierr)     ! 同步
</span><span class="line">     end_time=mpi_wtime()             ！所有进程都执行完该部分时墙钟时间
</span><span class="line">     wtimer(1,2)=end_time-start_time  ！同步情况下执行时间
</span><span class="line">     start_time=end_time              ! 下一计时部分的起点墙钟时间
</span><span class="line">#endif</span></code></pre></td></tr></table></div></figure></notextile></div>

<ul>
  <li>
    <p>以后每一计时部分计时思路与上述相同</p>
  </li>
  <li>
    <p>在 <code>solve_grapes</code> 最后输出每步积分步各调用部分执行时间</p>
  </li>
</ul>

<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
</pre></td><td class="code"><pre><code class=""><span class="line">#ifdef DETAIL_TIMING
</span><span class="line">     write(73,*) 'step',step,':'
</span><span class="line">     write(73,*) "no_barrier for timing *************"
</span><span class="line">     write(73,'(10F8.4)') (wtimer(i,1),i=1,80)
</span><span class="line">     write(73,*) "barrier for timing *************"
</span><span class="line">     write(73,'(10F8.4)') (wtimer(i,2),i=1,80)
</span><span class="line">#endif</span></code></pre></td></tr></table></div></figure></notextile></div>
<p>文件号为73的文件是在 <code>module_integrate</code> 中定义的。</p>

<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
</pre></td><td class="code"><pre><code class=""><span class="line">   write(filename,'(A7, I5.5)') 'Timing.',myprcid  !各进程计时输出文件名，
</span><span class="line">   open (73,file=filename,form='formatted')        !有多少进程，就有多少文件</span></code></pre></td></tr></table></div></figure></notextile></div>

<h4 id="section-1">其它</h4>

<p><code>module_integrate</code> 中计时系统与 <code>solve_grapes</code> 中一样，只不过计时都为非同步情况下的时间，保留在 <code>wtimer_integrate</code> 一维数组中。预编译条件与 <code>solve_grapes</code> 相同，都为 <code>DETAIL_TIMING</code> 。</p>

<p><strong>注：每一积分步 <code>solve_grapes</code> 执行时间保留在 <code>wtimer_integrate(5)</code> 中.</strong></p>

<p>还有一套是在 <code>module_semi_lag</code> 中 <code>ritche_puw_jin</code> 中定义的，预编译条件为 <code>SL_TIMING</code> 。</p>

<p>如果需要开启计时系统，需在 <code>configure.grpaes</code> 中预处理器选项 <code>ARCHFLAGS</code> 中加上类似 <code>-D predefineName</code> ，如 <code>-DSL_TIMING</code> 。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[GRAPES源码分析之namelist]]></title>
    <link href="http://qingu.github.com/blog/2013/04/02/grapesyuan-ma-fen-xi-zhi-namelist/"/>
    <updated>2013-04-02T20:18:00+08:00</updated>
    <id>http://qingu.github.com/blog/2013/04/02/grapesyuan-ma-fen-xi-zhi-namelist</id>
    <content type="html"><![CDATA[<h3 id="section">前言</h3>

<p>在GRAPES、WRF等模式中常见到类似 namelist.input 或 .nml 文件。文件里放入一些如预报区域范围、预报时间，技术方案选择及运行模式所需进程数等控制模式运行的配置变量。实际上 namelist 是 Fortran 中一种特殊的I/O读写格式。本文首先介绍 namelist 语法及如何读写，然后介绍 GRAPES 模式中是如何应用 namelist 的。</p>

<!-- more -->

<h3 id="namelist-">namelist 语法</h3>

<p>namelist 把一组相关变量封装在一起，输入/出这一组变量时，只要在 write/read中的nml字段赋值要使用哪一个namelist就行。</p>

<h4 id="namelist--1">namelist 文件格式</h4>

<p>namelist文件格式：</p>

<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
</pre></td><td class="code"><pre><code class=""><span class="line">&amp;nml_name1      ! &amp;接某一组namelist名字
</span><span class="line">var1 = value,   ! 输出变量名称，等号，值及逗号
</span><span class="line">var2 = value,   
</span><span class="line">...
</span><span class="line">/               ! 除号结束这一组namelist
</span><span class="line">
</span><span class="line">...
</span><span class="line">
</span><span class="line">&amp;nml_nameN      ! 第n组namelist
</span><span class="line">...
</span><span class="line">/</span></code></pre></td></tr></table></div></figure></notextile></div>

<h4 id="namelist--2">namelist 声明</h4>

<p>namelist声明类似common语法，但nml一定要取名字，必须在执行语句前声明。首先对各个变量进行声明，然后声明各组namelist。在输入/出namelist前，必须先声明namelist。如下：</p>

<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
</pre></td><td class="code"><pre><code class=""><span class="line">integer :: var1           !先对每个变量如平常一样声明
</span><span class="line">real    :: var2
</span><span class="line">
</span><span class="line">namelist /nml_name1/ var1,var2   !然后声明那些变量属于哪个namelist组</span></code></pre></td></tr></table></div></figure></notextile></div>

<h4 id="namelist--3">namelist 输出</h4>

<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
</pre></td><td class="code"><pre><code class=""><span class="line">write(unit, nml=nml_name)     ! nml_name指每组namelist的名字</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>在write的nml字段中指定输出哪个namelist，就把nml中变量全部输出。输出的namelist不能规定输出格式。每个数值内容使用什么格式来输出，由编译器决定。</p>

<h4 id="namelist--4">namelist 输入</h4>

<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
</pre></td><td class="code"><pre><code class=""><span class="line">read(unit, nml=nml_name)</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>如果从键盘读入namelist，必须按照一定的格式输入，如下所示：</p>

<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
</pre></td><td class="code"><pre><code class=""><span class="line">&amp;nml_name1 var1=1 var2=2.0 /    !以&amp;开始，紧接namelist名字，
</span><span class="line">                              	!然后以var=value输入每个变量,以 / 结束</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>读取namelist时，可以不填入所有变量的值，只要以 &amp;nml_name 开始输入，给一个除号就可以结束输入。变量可以不按照顺序输入，程序会自动按照变量名称来设置数值，变量甚至可以重复输入，不过变量会得到最后一次设置的值。</p>

<p>namelist通常使用文本文件进行读写，nml文件常以 .nml 后缀标示其文件属性 (这个不一定，Linux系统不以后缀名确定文件类型，但用 .nml 结尾可以很方便识别文件属性)。</p>

<p>nml 使用read从文件中读取数据时，会自动从 <strong>目前的位置</strong>向下寻找存放namelist的地方。</p>

<h3 id="grapesnamelist">GRAPES中的namelist</h3>

<p>GRAPES中有好几个namelist ： RUN/namelist,input, RUN/rrtmg.nml, RUN/colm.nml(这个是 SRC/physics/CoLM/build.colm.nml 的软链接) 。</p>

<h4 id="namelistinput">namelist.input</h4>

<p>主要查看namelist.input，其他两个类似</p>

<p>该文件保存了模式的一些配置信息（都是标量），配置变量在 shared/module_configure模块中声明。</p>

<p>该模块中子程序 initial_config 用于读入namelist.input变量。步骤：</p>

<ul>
  <li>
    <p>声明子程序临时配置变量，然后把一组组相关变量封装在各组namelist中。</p>
  </li>
  <li>
    <p>打开namelist.input文件</p>
  </li>
</ul>

<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
</pre></td><td class="code"><pre><code class=""><span class="line"> 	OPEN ( UNIT   = 10               ,      &amp;
</span><span class="line">             FILE   = "namelist.input" ,      &amp;
</span><span class="line">             FORM   = "FORMATTED"      ,      &amp;
</span><span class="line">             STATUS = "OLD"            ,      &amp;
</span><span class="line">             IOSTAT = io_status         )</span></code></pre></td></tr></table></div></figure></notextile></div>

<ul>
  <li>
    <p>临时配置变量先赋一个初值，即默认值。以防namelist中没有这个变量，保证变量都有值。</p>
  </li>
  <li>
    <p>输入/出namelist，代码如下</p>
  </li>
</ul>

<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
</pre></td><td class="code"><pre><code class=""><span class="line"> 	REWIND  ( UNIT = nml_unit )
</span><span class="line">    READ  ( UNIT = nml_unit , NML = namelist_01 , ERR = 9200 , END = 9200 )
</span><span class="line">    WRITE ( UNIT = *                  , NML = namelist_01 )
</span><span class="line">    ...
</span><span class="line">    重复以上三句输入/出下一组namelist</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>rewind表示回到文件nml_unit 的开始，在用rewind之前必须保证该文件已打开（即之前有open操作且成功了）。</p>

<p>read语句从文件开头开始查找nml字段为namelist_name的相关变量，err字段用来设置当前文件打开错误时，程序跳跃到label所指的代码处继续执行。end指在读写到文件末尾时，转移到某个行代码来继续执行程序。这里都是到9200处。</p>

<p>write语句向标准输出写入namelist，GRAPES中已重定向到 std.out.<em>**</em> 文件。</p>

<ul>
  <li>然后向所有进程广播临时配置变量</li>
</ul>

<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
</pre></td><td class="code"><pre><code class=""><span class="line"> 	call grapes_bcast( s_we                       ,1 )
</span><span class="line"> 	...    </span></code></pre></td></tr></table></div></figure></notextile></div>

<ul>
  <li>最后将临时配置变量赋给对应的派生数据类型 config_flags (该派生数据类型是在本模块中声明的),关闭文件，结束namelist输入。</li>
</ul>

<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
</pre></td><td class="code"><pre><code class=""><span class="line"> 	config_flags % s_we                       =  s_we 
</span><span class="line"> 	...
</span><span class="line">
</span><span class="line"> 	CLOSE ( UNIT = 10 , IOSTAT = io_status )</span></code></pre></td></tr></table></div></figure></notextile></div>

<ul>
  <li>另：配置变量通过 shared/module_domain模块中cpconfig子程序赋给状态变量 grid 。</li>
</ul>

<h3 id="section-1">总结</h3>

<p>由以上分析可得出添加GRAPES配置变量的一般流程：</p>

<ul>
  <li>
    <p>在namelist.input中按照nml格式添加变量，并给出其值</p>
  </li>
  <li>
    <p>在shared/module_configure模块中grid_config_rec_type声明中添加相应变量</p>
  </li>
  <li>
    <p>并在子程序 initial_config 声明临时配置变量，赋初值，读入，广播，赋给配置变量</p>
  </li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[译:为多核系统并行性能线程化Fortran应用]]></title>
    <link href="http://qingu.github.com/blog/2013/03/05/yi-wei-duo-he-xi-tong-bing-xing-xing-neng-xian-cheng-hua-fortranying-yong/"/>
    <updated>2013-03-05T20:45:00+08:00</updated>
    <id>http://qingu.github.com/blog/2013/03/05/yi-wei-duo-he-xi-tong-bing-xing-xing-neng-xian-cheng-hua-fortranying-yong</id>
    <content type="html"><![CDATA[<h3>0. 前言</h3>

<p>本文翻译自Intel网站上的一篇文章，原题为<a href="http://software.intel.com/en-us/articles/threading-fortran-applications-for-parallel-performance-on-multi-core-systems">Threading Fortran applications for parallel performance on multi-core systems</a>。由于本人翻译水平有限及专业术语知道的不多，如有不明白地方可查阅原文，发现错误的话敬请告之，谢谢！</p>

<!-- more -->

<h3>1. 正文</h3>

<p>现在大多数处理器都是多核的，预计未来性能增加主要来自于核数的增加。对于那些忽视额外核带来的机遇的性能敏感应用（performance sensitive applications）将很快被淘汰。本文讨论现存串行Fortran应用如何利用多核共享内存系统方法。议题包括数据布局，线程安全，性能及调试。Intel提供了一些软件工具帮助开发健壮、扩展性好的并行应用。</p>

<h4>并行层次</h4>

<ol>
<li><p>SIMD 指令</p>

<p>-编译器可以自动对循环向量化</p></li>
<li><p>指令级</p>

<p>-处理器调度（你看不到）</p></li>
<li><p>线程级（通常是共享内存）</p>

<p>-原生Linux或Windows线程</p>

<p>-OpenMP</p>

<p>-Simplest for muliti-core</p></li>
<li><p>分布式内存集群</p>

<p>-消息传递（一系列MPI）</p>

<p>-CoArray Fortran（未来的Fortran 2008标准）</p></li>
<li><p>embarassingly parallel multiprocessing</p></li>
</ol>

<h4>引入线程方法</h4>

<ol>
<li><p>线程库， 如 Intel® MKL</p>

<p>-容易且有效，前提是适合你的问题</p></li>
<li><p>编译器自动并行化</p>

<p>-容易做，但应用范围受限</p>

<p>-针对编译器认为安全的简单循环</p></li>
<li><p>异步I/O (非常专业，见编译器说明文档)</p></li>
<li><p>原生线程</p>

<p>-大多数用于任务级并行</p>

<p>-不是太容易编程和调试的</p></li>
<li><p>OpenMP</p>

<p>-设计用于简化数据级并行</p>

<p>-（相对的）容易编程和调试</p>

<p>-一定程度上支持任务级并行，尤其是在OpenMP 3.0中</p>

<p>-可移植性</p></li>
</ol>

<h4>Intel® Math Kernel Library</h4>

<ol>
<li><p>MKL许多部件有线程化的版本</p>

<p>-基于编译器的OpenMP运行时库</p>

<p>-1,2及3级的 BLAS , LAPACK</p>

<p>-稀疏 BLAS</p>

<p>-离散傅里叶变化</p>

<p>-向量数学和随机数函数</p>

<p>-直接稀疏求解器， 如 PARDISO</p></li>
<li><p>连接线程或非线程接口</p>

<p>-libmkl<em>intel</em>thread.a 或 libmkl_sequential.a</p>

<p>-使用link line 顾问，在 <a href="http://software.intel.com/en-us/">en-us</a></p></li>
<li><p>设置线程数</p>

<p>-设置 MKL<em>NUM</em>THREADS 或 OMP<em>NUM</em>THREADS 环境变量
-调用 mkl<em>set</em>num<em>threads 或 omp</em>set<em>num</em>threads 库函数</p></li>
</ol>

<h4>实例： PARDISO(Parallel Direct Sparse Solver)</h4>

<ol>
<li><p>共享内存系统上大型稀疏对称和非对称系统线性方程组求解器</p>

<p>-主要求解器使用OpenMP线程化</p>

<p>-仅仅连接到线程层，libmkl<em>intel</em>thread</p>

<p>-iparm(2)=3将加入线程化用于初始重排序阶段</p>

<p>-大型问题扩展性很好</p>

<p>-Fortran 90，Fortran 77 和 C 接口</p>

<p>-F90 接口能在调用序列时捕捉许多错误</p>

<p>-支持实数，复数，单双精度</p>

<p>-iterative refinement</p>

<p>-使用 MKL<em>NUM</em>THREADS 或 OMP<em>NUM</em>THREADS 环境变量控制线程变量
-否则默认处理器数（包括超线程）</p></li>
<li><p>算法见 <a href="http://www.pardiso-project.org">http://www.pardiso-project.org</a></p></li>
</ol>

<h4>自动化并行</h4>

<ol>
<li><p>编译器可对简单循环自动线程化</p>

<p>-Linux下加 -parallel 、Windows下加 /Qparallel 编译</p>

<p>-至少 -O2 等级优化（比照 OpenMP在 -O0下工作）</p>

<p>-循环必须满足“简单”条件</p>

<p>-报告哪个循环并行了，和哪个循环没有，为什么没有并行</p>

<p>-选项 -par-report2等</p>

<p>-使用选项 -par-thresholdn 微调并行代价模型</p>

<p>-默认 n=100, 尝试 n=99</p></li>
<li><p>基于和OpenMP相同的运行时库线程调用</p>

<p>-调用 <em>kmpc</em>fork_call</p>

<p>-这些是对低级pthreads 和 Win32线程库的封装</p>

<p>-识别相同的 OpenMP环境变量</p></li>
</ol>

<h4>自动化并行条件</h4>

<ol>
<li><p>入口处确定循环计数器 （DO WHILE不行）</p>

<p>-在编译时不必要确定</p>

<p>-不能跳进或跳出循环（如Fortran中循环不能有goto语句）</p></li>
<li><p>循环迭代独立</p>

<p>-没有函数调用（或证明没有负作用）</p>

<p>-除了是内联</p>

<p>-没有别名（通过不同指针访问相同变量）</p>

<p>-没有像 X(L+1)=Y(L+1) + X(L) 这样的结构</p>

<p>-允许规约</p>

<p>-但部分和可能导致舍入差异</p></li>
<li><p>工作量足以抵消并行开销</p></li>
<li><p>OpenMP循环条件类似于自动化并行条件</p></li>
<li><p>指令可用于引导编译器：</p>

<ul>
<li><p>!DIR$ PARALLEL</p></li>
<li><p>断言没有循环数据依赖</p></li>
<li><p>!DIR$ PARALLEL ALWAYS</p></li>
<li><p>重置代价模型，即使编译器认为性能不会改善（像 单个循环的-par-threshold()）也线程化循环</p></li>
<li><p>!DIR$ LOOP COUNT</p></li>
<li>估计迭代的典型数字（typical number of iterations）</li>
</ul></li>
</ol>

<h4>Example: matrix multiply</h4>

<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
<span class="line-number">13</span>
<span class="line-number">14</span>
</pre></td><td class="code"><pre><code class=""><span class="line">  subroutine matmul(a,b,c,n)
</span><span class="line">  real(8) a(n,n),b(n,n),c(n,n)
</span><span class="line">  c=0.d0
</span><span class="line">  do i=1,n         ! Outer loop is parallelized.
</span><span class="line">     do j=1,n      ! inner loops are interchanged
</span><span class="line">        do k=1,n  ! new inner loop is vectorized 
</span><span class="line">           c(j,i)=c(j,i)+a(k,i)*b(j,k)
</span><span class="line">        enddo
</span><span class="line">     enddo
</span><span class="line">  enddo
</span><span class="line">  end
</span><span class="line">
</span><span class="line">  $ ifort -O3 -parallel -par-report1 -c matmul.f90
</span><span class="line">  matmul.f90(4) : (col. 0) remark: LOOP WAS AUTO-PARALLELIZED.</span></code></pre></td></tr></table></div></figure></notextile></div>

<h4>OpenMP-优点</h4>

<ol>
<li><p>基于编译器指令的标准API</p>

<p>-最新版本是 3.0</p>

<p>-C++ 和 Fortran， Linux 和 Windows</p>

<p>-对不支持OpenMP编译器来说指令相当于注释</p>

<p>-串并行实现包含在一份源代码中</p>

<p>-有助于调试</p>

<p>-允许增量式并行</p>

<p>-OpenMP规则使检测工具更容易</p></li>
</ol>

<h4>OpenMP编程模型</h4>

<h5>Fork-Join 并行：</h5>

<ol>
<li><p>主线程生成一个线程组</p>

<p>-并行被增量式增加</p>

<p>-串行程序进化成并行程序</p>

<p>-线程不会被摧毁，但返回到一个线程池中（pool）</p>

<p><em>注意Intel的OpenMP实现在使用的线程之外创建了一个单独的监控线程</em></p></li>
</ol>

<h4>OpenMP-在哪线程化</h4>

<ol>
<li><p>开始于罗列高层机构</p></li>
<li><p>你的程序在哪花最多时间？</p>

<p>-如果你不知道，做下快速性能分析</p>

<p>-VTune， PTU, gprof， &#8230;</p>

<p>-如果你的程序只有 x% 并行，加速比总是小于 x%， 无论多少核和线程。</p></li>
<li><p>更喜欢数据并行</p>

<p>-容易负载均衡</p>

<p>-容易扩展到更多核</p></li>
<li><p>喜欢粗粒度（高层次）并行</p>

<p>-例如嵌套的外层循环， 最慢变化的格点坐标， 高层驱动程序</p>

<p>-减少开销</p>

<p>-改善每个线程的数据局部性（locality）和重用性</p>

<p>-不能并行迭代循环，例如时间积分</p></li>
</ol>

<p>示例：Square_Charge</p>

<ol>
<li><p>计算一个平面上一系列点的静电势能，由于均方充电分布</p>

<p>-本质上，对一个平方的2维积分</p></li>
</ol>

<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
<span class="line-number">13</span>
<span class="line-number">14</span>
<span class="line-number">15</span>
<span class="line-number">16</span>
<span class="line-number">17</span>
</pre></td><td class="code"><pre><code class=""><span class="line">Square_charge loops over points
</span><span class="line">
</span><span class="line"> Twod_int integrate over y
</span><span class="line">
</span><span class="line">  Trap_int integrate over x
</span><span class="line">
</span><span class="line">   Func calculates 1/r potential
</span><span class="line">
</span><span class="line">   – Inline func()
</span><span class="line">
</span><span class="line">   – Vectorize loop over x
</span><span class="line">
</span><span class="line">   – Thread loop over y
</span><span class="line">
</span><span class="line">    – Avoid race conditions
</span><span class="line">
</span><span class="line">    – Could instead thread loop over points, or use MPI</span></code></pre></td></tr></table></div></figure></notextile></div>

<h4>OpenMP: 线程如何交互？</h4>

<ol>
<li><p>OpenMP 是一个共享内存模型</p>

<p>-线程之间通过共享变量通信</p></li>
<li><p>不能共享数据共享引起数据竞争：</p>

<p>-数据竞争：随线程调度不同，程序结果变化</p></li>
<li><p>控制数据竞争</p>

<p>-使用同步语句阻止数据冲突</p></li>
<li><p>同步代价昂贵，所以&#8230;</p>

<p>-改变数据访问方式尽量减少同步需求</p></li>
</ol>

<h4>OpenMP-data</h4>

<ol>
<li><p>识别哪个数据是线程间共享的，哪个是每个线程单独一个副本</p></li>
<li><p>使模块或common块中共享数据显式global，线程私有数据为局部和自动数据，这种做法有好处，但不是必须</p></li>
<li><p>动态分配 OK （malloc, ALLOCATE)</p>

<p>-如果共享，分配在串行区域</p>

<p>-如果每个线程需要各自副本，分配在并行区域</p></li>
<li><p>每个线程有它自己私有堆栈，但所以线程共享堆（heap）</p>

<p>-所以要使堆对象线程安全需要锁，而这个代价更高</p></li>
</ol>

<h4>OpenMP-数据作用域</h4>

<ol>
<li><p>区分字面显式并行区域和”动态区域“（函数或子程序在一个显式并行区域内调用。这些函数或子程序
可能不包含OpenMP指令或只包含”orphaned“ OpenMP指令</p></li>
<li><p>字面显式：!$OMP PARALLEL 到 !$OMP END PARALLEL</p>

<p>-数据默认共享（除了循环索引）</p>

<p>-局部数据：可以用 PRIVATE子句改变</p>

<p>-全局数据： 可以用 !$OMP THREADPRIVATE 申明 common块，模块变量 </p>

<p>-并行区域内初始值未定义</p>

<p>-除非用 FIRSTPRIVATE(局部变量)</p>

<p>-或 COPYIN(全局变量)</p>

<p>-出了并行区域后的值未定义</p>

<p>-除非使用 LASTPRIVATE(局部变量)</p>

<p>-调用的函数（动态区域）必须线程安全，即使他们本身不包含显式并行区域</p></li>
</ol>

<h4>线程安全</h4>

<ol>
<li><p>一个线程安全函数可以同时被多个线程调用，并仍可得出正确结果</p>

<p>-潜在的数据冲突必须被阻止（同步）或避免（私有化）</p>

<p>-静态局部数据：默认情况下，每个线程可访问相同数据地址！潜在不安全</p>

<p>-自动数据：每个线程拥有各自独立的副本，放在各自堆栈中</p></li>
<li><p>ifort 串行默认：</p>

<p>-局部标量是自动变量</p>

<p>-局部数据是静态变量</p></li>
<li><p>当用 -openmp 编译时，默认改变</p>

<p>-局部数组是自动</p>

<p>-和 -auto 编译相同</p>

<p>-这可能增加需要的堆栈大小</p>

<p>-小心段错误</p></li>
</ol>

<h4>使函数线程安全</h4>

<ol>
<li><p>使用编译选项</p>

<p>-选项 -openmp 或</p>

<p>-选项 -auto</p>

<p>-可能对串行优化有轻微影响</p></li>
<li><p>在源代码中</p>

<p>-在声明中使用 AUTOMATIC关键字</p>

<p>-但不覆盖编译器产生的临时文件</p>

<p>-声明函数为 RECURSIVE</p>

<p>-覆盖整个函数，包括编译器产生代码</p>

<p>-如果你不想依赖编译选项，这是最好办法使代码线程安全</p></li>
<li><p>下面两种情况，任意一种：</p>

<p>-不用 -save 或 SAVE 关键字</p>

<p>-避免全局变量</p>

<p>-或不要写他们，除了同步</p></li>
<li><p>OpenMP有许多同步结构保护潜在不安全的操作</p>

<ul>
<li><p>REDUCTION 子句</p></li>
<li><p>!$OMP CRITICAL</p></li>
<li><p>!$OMP SINGLE</p></li>
<li><p>等等</p></li>
</ul></li>
</ol>

<h4>线程安全库</h4>

<ol>
<li><p>Intel® MKL库是线程安全的</p>

<p>-串行版本和线程版本一样</p></li>
<li><p>Intel Fortran运行时库有两个版本</p>

<p>-默认是线程不安全的（libifcore）</p>

<p>-加 -threads 编译连接线程安全版本 （libifcoremt）</p>

<p>-如果你用 -openmp 编译， 默认连接的是线程安全版本</p></li>
</ol>

<h4>性能考虑</h4>

<ol>
<li><p>首先开始优化串行代码，向量化内循环等（例如 -O3 -ipo &#8230;)</p></li>
<li><p>确保足够的并行工作量</p></li>
<li><p>最小化线程间数据共享</p>

<p>-除非是只读变量</p></li>
<li><p>避免cache行错误共享 （false sharing of cache lines）</p></li>
</ol>

<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
</pre></td><td class="code"><pre><code class=""><span class="line">!$OMP parallel do
</span><span class="line">  do i=1,nthreads
</span><span class="line">    do j=1,1000
</span><span class="line">      A(i,j) = A(i,j) + ..</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>-每个线程认为它的 A(i,j)副本可能无效</p>

<p>-转换 A 下标 改善每个线程数据 locality</p>

<p>-连续内存访问也允许内循环向量化</p>

<p>-有助于提高性能</p>

<ol>
<li><p>调度选项</p>

<p>-如果工作在循环迭代数不是均匀分布的，考虑 DYNAMIC 或 GUIDED</p></li>
</ol>

<h4>线程级应用计时</h4>

<ol>
<li><p>Fortran标准计时器 CPU_TIME 返回 ”处理器时间“</p>

<p>-所有线程/核 的时间总和</p>

<p>-很像 Linux 下 &#8220;time&#8221; 命令的 &#8220;user time&#8221;</p>

<p>-所以它可能表现为线程级应用跑的没有串行版本快</p></li>
<li><p>Fortran内置子程序 SYSTEM_CLOCK 从真实时钟返回数据</p>

<p>-不相加每个核时间</p>

<p>-很像 Linux 下 &#8220;time&#8221; 命令的 &#8220;real time&#8221;</p>

<p>-可用来测试由于线程化的加速比</p></li>
</ol>

<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
</pre></td><td class="code"><pre><code class=""><span class="line">   Call system_clock(count1, count_rate)
</span><span class="line">              ……
</span><span class="line">              Call system_clock(count2, count_rate)
</span><span class="line">              Time = (count2 - count1) / count_rate</span></code></pre></td></tr></table></div></figure></notextile></div>

<ol>
<li>dclock （Intel专门函数）也可以用来计时</li>
</ol>

<h4>线程亲和力（Affinity）接口</h4>

<ol>
<li><p>允许OpenMP线程绑定物理或逻辑核</p>

<p>-export 环境变量 KMP_AFFINITY=</p>

<p>-在分配逻辑核前物理上使用使用所有物理核（超线程）</p>

<p>-紧密分配线程给相同socket连续核（例如受益于共享cache）</p>

<p>-分散分配线程给交替sockets（例如使内存通道最大化）</p>

<p>-有助于优化内存或cache访问</p>

<p>-如果超线程支持的话，尤其重要</p>

<p>-否则一些物理核闲置而另外一些跑多个线程</p>

<p>-详情见编译器文档</p></li>
</ol>

<h4>NUMA考虑</h4>

<ol>
<li><p>想要内存分配更接近它将要使用的地方</p>

<ul>
<li>&#8220;first touch&#8221; 决定分配位置</li>
</ul>

<p>-所以初始化一个OpenMP循环内数据方式与你计划之后要用到的方式一样</p></li>
</ol>

<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
</pre></td><td class="code"><pre><code class=""><span class="line">  !$OMP parallel do                      !$OMP parallel do
</span><span class="line">        do i=1,n                                   do i=1,n
</span><span class="line">          do j=1,m                                  do j=1,m
</span><span class="line">            A(j,i) = 0.0                               dowork(A(j,i)) 
</span><span class="line">          enddo                                      enddo
</span><span class="line">        enddo                                      enddo</span></code></pre></td></tr></table></div></figure></notextile></div>

<ol>
<li>记住设置 KMP_AFFINITY</li>
</ol>

<h4>常见问题</h4>

<ol>
<li><p>不足的堆栈大小</p>

<p>-OpenMP中最经常遇到的问题</p>

<p>-典型症状： 初始化是段错误</p></li>
<li><p>对于整个程序（共享+局部数据）：</p>

<p>-增加shell limits值</p>

<p>-（地址空间，内存分配）</p>

<ul>
<li>Bash : <code>ulimit -s [value in KB] or [unlimited]</code></li>
</ul>

<p>-只增加一次</p>

<ul>
<li><p>C shell： <code>limit stacksize 1000000</code> (1 GB)</p></li>
<li><p>Windows : /F:100000000 (以字节为单位)</p></li>
<li><p>典型 OS 默认： ~ 10 MB</p></li>
</ul></li>
<li><p>对于单个线程（只针对线程局部数据）</p>

<ul>
<li>export OMP_STACKSIZE=[size]，默认4 MB</li>
</ul>

<p>-实际分配内存，不要设置太大</p></li>
</ol>

<h4>调试 OpenMP 应用提示</h4>

<ol>
<li><p>设置 OMP<em>NUM</em>THREADS=1 运行</p>

<p>-产生线程级代码，但用一个线程运行</p>

<p>-如果工作，产生对线程代码Thread Checker</p>

<p>-如果失败，排除数据竞争或其他同步问题原因</p></li>
<li><p>用 -openmp-stubs-auto 编译</p>

<p>-RTL调用被解决，但没有线程级代码产生</p>

<p>-分配局部数组在堆栈上，和OpenMP一样</p>

<p>-如果工作，检查缺失的 FIRSTPRIVATE ，LASTPRIVATE</p>

<p>-如果失败， 消除了线程级代码产生原因</p></li>
<li><p>如果没有 -auto 编译，隐含改变内存模型</p>

<p>-可能不足的堆栈大小</p>

<p>-可能连续调用之间值未保存</p></li>
<li><p>如果用 PRINT 语句调试</p>

<p>-内部I/O缓冲线程安全（加上-openmp),但不同线程打印语句顺序不确定</p>

<p>-输出线程号用 omp<em>get</em>thread_num()</p>

<p>-记住调用模块 USE OMP_LIB (申明这个是整数)</p></li>
<li><p>用 -O0 -openmp 调试</p>

<p>-不行其它优化，OpenMP线程在 -O0 等级时不关闭</p></li>
</ol>

<h4>浮点重复性</h4>

<ol>
<li><p>用不同数量线程运行同样程序可能得出稍微不同结果</p>

<p>-由于不同工作分解导致微小的舍入差异</p>

<p>-大多数情况可通过 -fp-model precise 解决</p>

<p>-查看  “<a href="http://software.intel.com/en-us/articles/consistency-of-floating-point-results-using-the-intel-compiler">Consistency of Floating-Point Results using the Intel® Compiler</a>”</p></li>
<li><p>在OpenMP中浮点规约仍不能严格再现，即使线程数相同</p>

<p>-不同线程贡献顺序每次运行可能都不同</p>

<ul>
<li>-fp-model precise 这儿没什么帮助</li>
</ul>

<p>-如果关心这个，需要些显式代码</p></li>
</ol>

<h4>Intel 专门环境变量</h4>

<ol>
<li><p>KMP_SETTINGS = 0 | 1</p>

<p>-在运行时打印环境变量或默认</p></li>
<li><p>KMP_VERSION = off | on</p>

<p>-打印运行时库版本</p></li>
<li><p>KMP_LIBRARY = turnaround | throughput | serial</p>

<ul>
<li><p>turnaround idle threads do not yield to other processes</p></li>
<li><p>throughput idle threads sleep and yield after KMP_BLOCKTIME msec</p></li>
</ul></li>
<li><p>KMP_BLOCKTIME</p>

<ul>
<li>线程在睡眠前等待时间（默认200毫秒）</li>
</ul></li>
<li><p>KMP_AFFINITY </p></li>
<li><p>KMP<em>MONITOR</em>STACKSIZE</p>

<p>-设置分配给监控线程的堆栈</p></li>
<li><p>KMP<em>CPUINFO</em>FILE</p>

<p>-使用机器拓扑文件（例如代替Linux的 /proc/cpuinfo）</p></li>
</ol>

<h4>调试 OpenMP 应用工具</h4>

<ol>
<li><p>编译器源代码checker （&#8217;parallel lint&#8217;)</p>

<ul>
<li><p>ifort -openmp -diag-enable sc-parallel3</p></li>
<li><p>产生一些可能API违规操作的错误和警告诊断，包括</p></li>
</ul>

<p>-依赖性或数据竞争</p>

<p>-例如：由于缺少 PRIVATE 或 REDUCTION 申明</p>

<p>-并行区域闭一只，包括动态区域</p>

<p>-可以跨源文件分析</p></li>
<li><p>Updated Intel Parallel Debugger, idb (Linux) and Intel Parallel Debugger Extension (on Windows)</p>

<p>– Thread groups; lock-stepping; thread-specific break points</p>

<p>– On-the-fly serialization; shared data access detection</p>

<p>– OpenMP windows for threads, tasks, barriers, locks, …</p>

<p>– New for Fortran in version 11.1 update 2</p></li>
</ol>

<h4>Intel® Thread Checker</h4>

<ol>
<li><p>Unified set of tools that pinpoint hard-to-find errors in multi-threaded applications
– data races</p>

<p>– deadlocks</p>

<p>– memory defects</p>

<p>– security issues</p></li>
<li><p>Display data at the Linux command line or via a Windows GUI</p></li>
</ol>

<h4>Intel® Thread Profiler</h4>

<ol>
<li><p>Features &amp; Benefits</p>

<p>– View application concurrency level to ensure core utilization</p>

<p>– Identify where thread and synchronization related overhead impacts performance</p>

<p>– Identify objects impacting performance</p>

<p>– Visualize the distribution of work to threads</p>

<p>– Visualize when threads are active and inactive</p>

<p>– Supports native threads , Intel® Threading Building Blocks or OpenMP* applications on Windows* for IA-32/Intel® 64 architecture</p>

<p>– Data collector for Linux, but must copy to Windows for display.</p></li>
</ol>

<h4>总结</h4>

<p>Intel软件工具提供对利用多核架构线程级应用扩展支持。</p>

<p>提供线程化一个Fortran应用时引起的一系列问题的建议和背景信息。</p>

<h4>引用</h4>

<p>[1]  <a href="http://www.intel.com/software/products">Intel Software Products information, evaluations, active user forums</a></p>

<p>[2]  <a href="http://www.devx.com/go-parallel"> Parallelism tips</a></p>

<p>[3]  <a href="http://software.intel.com/en-us/articles/developing-multithreaded-applications-a-platform-consistent-approach"> Developing Multithreaded Applications: A Platform Consistent Approach</a></p>

<p>[4]  <a href="http://software.intel.com/en-us/"> The Intel® Fortran Compiler User and Reference Guides, available online</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[大型机使用技巧汇总]]></title>
    <link href="http://qingu.github.com/blog/2013/03/03/da-xing-ji-shi-yong-ji-qiao-hui-zong/"/>
    <updated>2013-03-03T21:17:00+08:00</updated>
    <id>http://qingu.github.com/blog/2013/03/03/da-xing-ji-shi-yong-ji-qiao-hui-zong</id>
    <content type="html"><![CDATA[<h3 id="section">0. 前言</h3>
<p>因为转模式的缘故，需要和大型机打交道，目前在IBM的AIX系统和神威的Linux系统之间来回倒腾，经常使用大型机如果掌握一些使用技巧，工作效率定会大大提高。本文用于持续总结使用大型机的一些技巧，与大家分享。</p>

<!-- more -->

<h3 id="section-1">1. 登录</h3>
<p>Windows系统下可以用一些ssh登录软件登录大型机，如 <code>Xmanager</code> 、<code>SecureCRT</code> 等。</p>

<p>Linux系统下直接用终端 + ssh命令。</p>

<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
</pre></td><td class="code"><pre><code class=""><span class="line">ssh user_name@host_name</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>host_name一般是大型机IP地址。稍后会提示输入密码，注意输入的密码不可见。</p>

<p>但是这样每次登录都要输入命令和密码，挺烦人的。可以考虑写个脚本自动登录，这里用到工具 <code>expect</code> 。
确定自己系统里是否有 expect ：<code>which expect</code>。如果没有就装下。</p>

<p>脚本内容：</p>

<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
<span class="line-number">13</span>
</pre></td><td class="code"><pre><code class=""><span class="line">#!/usr/bin/expect -f
</span><span class="line">
</span><span class="line">set user user_name
</span><span class="line">set host host_name
</span><span class="line">set password my_password
</span><span class="line">set timeout -1
</span><span class="line">
</span><span class="line">spawn ssh  $user@$host
</span><span class="line">expect {
</span><span class="line">	"*yes/no" { send "yes\r"; exp_continue}
</span><span class="line">	"*password:" { send "$password\r" }
</span><span class="line">}
</span><span class="line">interact</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>将上面代码保存为 go ，设置脚本权限为 755， <code>chmod 755 go</code> 。以后直接执行脚本就行。</p>

<p><strong>Linux下还有一种省去输密码的方法：公钥登录</strong></p>

<p>在自己电脑终端上输入：</p>

<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
</pre></td><td class="code"><pre><code class=""><span class="line">ssh-keygen </span></code></pre></td></tr></table></div></figure></notextile></div>

<p>出现一系列提示，可以一路回车。结束后，在～/.ssh/下生成两个文件：id_rsa.pub 和 id_rsa。前者是你的公钥，后者是私钥。</p>

<p>再输入以下命令将公钥传到大型机上：</p>

<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
</pre></td><td class="code"><pre><code class=""><span class="line">ssh-copy-id user_name@host_name</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>以后你就可以直接输入 <code>ssh user_name@host_name</code> 登录。如果你想更省事，再自定义一个函数放到 ~/.bashrc中：</p>

<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
</pre></td><td class="code"><pre><code class=""><span class="line">sw(){
</span><span class="line">  ssh user_name@host_name
</span><span class="line">}</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>以后直接在终端输入命令 <code>sw</code> 登录，是不是很方便。</p>

<p>scp 替代 ftp 传文件：
	scp [option] user@host1:file1 user@host2:file2</p>

<p>示例：</p>

<ul>
  <li>
    <p>复制本地文件到远程大型机上</p>

    <p>scp localfile user_name@host_name:/home/mydirctory</p>
  </li>
  <li>
    <p>复制远程大型机上文件到本地</p>

    <p>scp user_name@host_name:~/.bashrc ~</p>
  </li>
</ul>

<p>注：传输目录时加选项 <code>-r</code>     </p>

<h3 id="section-2">2. 设置登录路径</h3>
<p>这个设置不一定所有人需要。我是因为用的老师的大型机账号，在里面建了个自己的目录，我的所有工作就是在这个目录里完成。
每次登录到大型机后，要 cd 很长的路径才能到达我的工作目录。为了减少工作量，可以利用 <code>*nix</code> 系统的自定义函数功能。</p>

<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
</pre></td><td class="code"><pre><code class=""><span class="line">cdgu() {
</span><span class="line">	cd /path/to/my_working_directory
</span><span class="line">	ls
</span><span class="line">}</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>在 Linxu 系统 <code>~/.bashrc</code> 或 AIX 系统 <code>~/.profile</code> 添加类似以上的代码，保存后 <code>source ~/.bashrc</code> 或 <code>source ~/.profile</code> 使得修改立即生效。然后在终端里输入函数名 <code>cdgu</code> ，看看是不是直接进入自己的工作目录了。</p>

<p>注意起的函数名不要和系统已有命令冲突，可以事先用 <code>which 函数名</code> 测试。</p>

<h3 id="shell">3. Shell快捷健</h3>
<p>首先确定你的登录shell是哪种，用命令 <code>echo $SHELL</code> 查看。记住多少个快捷键为宜呢，个人认为 <code>Less is More</code> ，够用就好。</p>

<p>BASH Shell快捷键可以参考 <a href="http://linuxtoy.org/archives/bash-shortcuts.html" title="LinuxTOY">LinuxTOY</a> 和 <a href="http://en.wikipedia.org/wiki/Bash_(Unix_shell)#Keyboard_shortcuts" title="维基百科">维基百科</a>这篇文章总结的。我将第一篇文章网页保存为pdf版本了，可以打印出来放在电脑旁边，没事看看。地址：<a href="http://pan.baidu.com/share/link?shareid=431631&amp;uk=1392639653" title="百度云盘下载">百度云盘下载</a> 。</p>

<p>AIX下默认ksh，功能没有bash强大。不过也有一些快捷键。</p>

<p>以下列出一些快捷键，bash 和 ksh 都可以使用（亲测可用）。</p>

<ul>
  <li>Ctrl + a ：移到命令行首</li>
  <li>Ctrl + e ：移到命令行尾</li>
  <li>Ctrl + f ：按字符前移（右向）</li>
  <li>Ctrl + b ：按字符后移（左向）</li>
  <li>Ctrl + u ：从光标处删除至命令行首 （ksh中表现为删除整行）</li>
  <li>Ctrl + k ：从光标处删除至命令行尾</li>
  <li>Ctrl + w ：从光标处删除至字首 （ksh表现为从光标处删除至命令行首）</li>
  <li>Ctrl + d ：删除光标处的字符</li>
  <li>Ctrl + h ：删除光标前的字符</li>
  <li>Ctrl + p：历史中的上一条命令</li>
  <li>Ctrl + n：历史中的下一条命令</li>
</ul>

<h3 id="section-3">4. 常用命令</h3>
<p>以下列出一些常用命令：</p>

<ul>
  <li>cd ~ : 回到home目录</li>
  <li>cd - : 回到上一次工作目录（相当于撤销上一次cd命令）</li>
  <li>ls -l : 列出当前目录下所有文件详细属性（不包含隐藏文件，需要的话加 -a)</li>
  <li>ll : ‘ls -l –color=tty’的别名（快捷方式），目录和链接带色彩，以示区别</li>
  <li>
    <table>
      <tbody>
        <tr>
          <td>chmod a+x file : 设置文件权限为所有人可执行（u-用户，g-所属组，o-其他人,a-所有人</td>
          <td>r-读权限，w-写权限，x-可执行权限）</td>
        </tr>
      </tbody>
    </table>
  </li>
  <li>grep : 文件搜索</li>
  <li>tailf : 监控文件，常用于监控模式标准输出/错误文件的输出，例如  tailf std.error.0000</li>
</ul>

<h3 id="section-4">5. 编译问题</h3>
<ul>
  <li>AIX系统的xlf90编译器默认不能编译后缀名为 .f90的程序（真扯），需要加上编译选项 <code>-qsuffix=f=f90</code> 。如果经常编译f90程序的话，可考虑在 ~/.kshrc 中加上 </li>
</ul>

<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
</pre></td><td class="code"><pre><code class=""><span class="line">alias xx='xlf90 -qsuffix'</span></code></pre></td></tr></table></div></figure></notextile></div>

<h3 id="section-5">6. 大型机作业调度管理工具</h3>

<h4 id="slurm">神威-SLURM</h4>
<p>神威使用 SLURM 管理作业提交、删除工作。这里的作业指的是并行作业，如果要执行串行程序，不需要以下这些命令。不过转模式一般需要同时利用多个cpu节点执行。</p>

<p>以下命令详细用法可以使用 <code>命令 --help</code> 或 <code>命令 --usage</code> 查看。</p>

<ul>
  <li>srun ： 提交作业</li>
</ul>

<p>常用选项：</p>

<p>-n ntasks 利用ntasks个进程数执行程序</p>

<p>-p partition 指定程序运行所在节点池</p>

<p>-J jobname 指定作业名，这个是必须要有的</p>

<p>示例：</p>

<p>执行grapes.exe程序，使用32个进程数，节点池选择NORMAL7</p>

<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
</pre></td><td class="code"><pre><code class=""><span class="line">srun -n 32 -p NORMAL7 -J GRAPES ./grapes.exe</span></code></pre></td></tr></table></div></figure></notextile></div>

<ul>
  <li>
    <p>squeue : 查询提交作业状态</p>

    <p>常用选项：</p>

    <p>-u user_name 查询指定用户名的作业状态</p>
  </li>
</ul>

<p>只执行 squeue 命令，将输出大型机上所有用户提交的作业状态情况。输出一般分成以下几列</p>

<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
</pre></td><td class="code"><pre><code class=""><span class="line"> JOBID PARTITION     NAME     USER  ST       TIME  NODES NODELIST(REASON)</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>各列含义：</p>

<p>JOBID : 作业号，相当于该作业的”身份证号“</p>

<p>PARTITION : 所在节点池</p>

<p>NAME : 程序名称</p>

<p>USER : 用户名</p>

<p>ST : 作业状态， R-Runing（正在运行），PD-PenDing（资源不够，等待），CG-COMPLETING(作业正在完成过程中)， CA-CANCELLED（作业被人为取消掉了，一般是管理员干的）</p>

<p>TIME ：作业执行时间</p>

<p>NODES ：程序占的节点数</p>

<p>NODELIST : 详细的节点清单</p>

<p>示例：</p>

<p>一般只关心自己作业的情况</p>

<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
</pre></td><td class="code"><pre><code class=""><span class="line">  squeue -u user</span></code></pre></td></tr></table></div></figure></notextile></div>

<ul>
  <li>scancel : 取消作业</li>
</ul>

<p>普通用户只能取消掉自己的作业，如果 scancel 别人作业，输出错误信息（因为你不是管理员上帝）</p>

<p>常用选项：</p>

<p>-u, -user=user_name 取消掉该用户的提交的作业</p>

<p>-n, –name=job_name 取消掉叫 job_name 的作业</p>

<p>示例：</p>

<p>一般常用squeue查询自己作业job_id，然后杀掉作业(可同时kill多个作业) </p>

<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
</pre></td><td class="code"><pre><code class=""><span class="line">squeue -u user_name
</span><span class="line">scancel job_id</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>如果确定是你一个人用这个账号，且想kill掉所有已提交的作业，可以</p>

<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
</pre></td><td class="code"><pre><code class=""><span class="line">squeue -u user_name</span></code></pre></td></tr></table></div></figure></notextile></div>

<ul>
  <li>
    <p>sinfo : 查询节点池及节点状态，查看哪个节点池有空闲资源可以使用</p>
  </li>
  <li>
    <p>sbatch ： 执行批处理脚本，脚本里面包含一些大型机资源环境变量设置及srun提交作业命令</p>
  </li>
</ul>

<h4 id="ibm-loadleveler">IBM-loadleveler</h4>

<p>以下简单介绍常用几个命令，具体可参考<a href="http://publib.boulder.ibm.com/infocenter/clresctr/vxrx/index.jsp?topic=%2Fcom.ibm.cluster.loadl.v5r1.load500.doc%2Fam2cr_conq.htm">官方文档</a></p>

<ul>
  <li>llrun : 提交mpi并行作业或串行交互作业</li>
</ul>

<p>常用选项：</p>

<p>-k keyword_list 使用空格分隔的 keyword=value形式指定作业配置参数</p>

<p>NOTE: 这个命令好像被IBM大型机禁止掉了，只能用llsubmit提交作业了，orz</p>

<ul>
  <li>llq : 查询作业状态</li>
</ul>

<p>常用选项：</p>

<p>-u user_name 查询指定用户的作业状态， 只输入llq命令则列出所有用户作业情况</p>

<p>示例：</p>

<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
</pre></td><td class="code"><pre><code class=""><span class="line"> llq -u user_name</span></code></pre></td></tr></table></div></figure></notextile></div>

<ul>
  <li>
    <p>llcancel : 取消作业，一般后面跟作业号</p>
  </li>
  <li>
    <p>llstatus : 查询大型机资源状态</p>
  </li>
  <li>
    <p>llsubmit : 提交作业，后面跟命令文件</p>
  </li>
</ul>

<blockquote>
  <p>命令文件应该包含对作业进行描述、对版本历史和变化进行跟踪的注释。每一行开头的 # 号（#）表示该行是一个注释。如果 # 之后是 @ 符号（@），就表示这是一个关键字。关键字用来指定与作业相关的输入、输出和错误文件，以及作业类。要查看管理员已经定义了哪些类，请使用 llclass 命令。</p>
</blockquote>

<p>示例：</p>

<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
</pre></td><td class="code"><pre><code class=""><span class="line"> llsubmit job.cmd</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>job.cmd 示例：</p>

<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
<span class="line-number">13</span>
<span class="line-number">14</span>
<span class="line-number">15</span>
<span class="line-number">16</span>
<span class="line-number">17</span>
<span class="line-number">18</span>
</pre></td><td class="code"><pre><code class=""><span class="line">#@ shell = /bin/ksh      #指定脚本解释器
</span><span class="line">#@ job_type = parallel   #作业类型设为并行的，需要设置节点数
</span><span class="line">#@ network.MPI = csss,shared,US   # MPI并行程序使用内部共享节点通信
</span><span class="line">#@ output = $(host).$(jobid).out  # 标准输出重定向新文件                                 
</span><span class="line">#@ error = $(host).$(jobid).err   # 标准错误重定向到新文件
</span><span class="line">#@ wall_clock_limit = 30:00       # 限制程序只能运行 30 分钟
</span><span class="line">
</span><span class="line">#使用2个节点，每个节点上32个进程，共64个进程执行并行作业
</span><span class="line">#@ tasks_per_node = 32            
</span><span class="line">#@ node = 2
</span><span class="line">
</span><span class="line">#@ queue          #排队，等待资源到位后执行。没有这条语句，不会建立作业
</span><span class="line">
</span><span class="line">pwd               #显示当前工作目录
</span><span class="line">echo $LOADL_PROCESSOR_LIST      #显示分配给该作业的节点
</span><span class="line">export MP_SHARED_MEMORY=yes     #让MPI使用共享内存通信
</span><span class="line">
</span><span class="line">poe a.out          #运行程序</span></code></pre></td></tr></table></div></figure></notextile></div>

<h4 id="section-6">类比两种作业调度管理器</h4>

<table>
  <thead>
    <tr>
      <th>功能</th>
      <th>SW-SLURM</th>
      <th style="text-align: right">IBM-Loadleveler</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <td>提交作业</td>
      <td>srun</td>
      <td style="text-align: right">llrun(禁掉了)</td>
    </tr>
    <tr>
      <td>查询作业</td>
      <td>squeue</td>
      <td style="text-align: right">llq</td>
    </tr>
    <tr>
      <td>取消作业</td>
      <td>scancel</td>
      <td style="text-align: right">llcancel</td>
    </tr>
    <tr>
      <td>脚本提交作业</td>
      <td>sbatch</td>
      <td style="text-align: right">llsubmit</td>
    </tr>
    <tr>
      <td>查询节点资源</td>
      <td>sinfo</td>
      <td style="text-align: right">llstatus</td>
    </tr>
  </tbody>
</table>

<h3 id="update-log">Update Log</h3>

<ul>
  <li>2013-3-8 增加大型机作业调度管理器介绍</li>
</ul>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Linux下处理带^M字符文档]]></title>
    <link href="http://qingu.github.com/blog/2013/03/01/linuxxia-chu-li-dai-mzi-fu-wen-dang/"/>
    <updated>2013-03-01T20:55:00+08:00</updated>
    <id>http://qingu.github.com/blog/2013/03/01/linuxxia-chu-li-dai-mzi-fu-wen-dang</id>
    <content type="html"><![CDATA[<h3 id="section">原因</h3>
<p><code>*nix</code> 系统下用vim打开在Windows下编辑的文档会发现每行后出现 <code>^M</code> 字符，这是因为DOS下的编辑器和Linux编辑器对文件行末的回车符处理不一致。在windows下换行符是 <code>\r\n</code> ，而 <code>*nix</code> 下换行符是 <code>\n</code> 。以下是几种解决方法。</p>

<!-- more -->

<h3 id="section-1">解决方法</h3>

<p>1.使用 Linux 内置命令行工具 <code>dos2unix</code></p>

<pre><code>dos2unix filename
</code></pre>

<p>具体用法可以 <code>man dos2unix</code></p>

<p>注：AIX系统下命令是 <code>dosunix</code> ，语法是：</p>

<pre><code>dosunix inputfile outfile
</code></pre>

<p>2.Vim中替换命令</p>

<p>在命令模式下输入 <code>%s/^M//g</code> 。其中 <code>^M</code> 是用 <code>Ctrl+v</code> 和 <code>Ctrl+m</code> 输入的。</p>

<p>3.Vim中 <code>set</code> 命令(测试不成功)</p>

<p>在命令行模式下输入</p>

<pre><code>:set fileformat=unix
:w
</code></pre>

<p>4.<code>sed</code> 工具</p>

<p>第2种方法中替换思路可以用sed实现，具体命令为：</p>

<pre><code>sed 's/^M//g' filename &gt; new_filename
</code></pre>

<p>注意其中 <code>^M</code> 就是原来的 <code>^</code> 和 <code>M</code> 组合。与方法2有区别。</p>

<p>5.<code>*nix</code> 内置tr命令（测试不成功）</p>

<p>原因分析里说过Windows换行符比*nix多了 <code>\r</code> 。使用内置转换字符命令 <code>tr</code> 。</p>

<pre><code>tr -d '\r' filename
</code></pre>

<p>以上就是我从网上收集的几种方法，其中方法3和方法5测试未成功，可能是我用错了，知道的人可以告诉我，先行谢过！</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Octopress和Markdown使用技巧汇总]]></title>
    <link href="http://qingu.github.com/blog/2013/02/27/octopresshe-markdownshi-yong-ji-qiao-hui-zong/"/>
    <updated>2013-02-27T21:18:00+08:00</updated>
    <id>http://qingu.github.com/blog/2013/02/27/octopresshe-markdownshi-yong-ji-qiao-hui-zong</id>
    <content type="html"><![CDATA[<h3 id="section">0. 摘要</h3>
<p>本文用于持续收集Octopress使用技巧及高级配置，同时记录在折腾过程中的遇到的问题。</p>

<ol>
  <li>
    <p>Octopress中在新标签页打开超链接</p>
  </li>
  <li>
    <p>首页只显示摘要部分</p>
  </li>
  <li>
    <p>About分页创建</p>
  </li>
  <li>
    <p>在Octopress中使用 $latex$
<!-- more --></p>
  </li>
</ol>

<h3 id="octopress">1. Octopress中在新标签页打开超链接</h3>
<p>用markdown写的文档，只支持在本窗口打开超链接，影响阅读效果。参考<a href="http://www.blogjava.net/lishunli/archive/2013/01/20/394478.html" title="李顺利">李顺利</a>介绍的方法，有两种:</p>

<p>(1). 利用markdown支持html语法，直接使用 <code>&lt;a href="http://you-need-ref-link.com" target="_blank"&gt;my blog&lt;/a&gt;</code> 。</p>

<p>(2). 更好的方法是在{YOUR_OCTOPRESS}/source/_includes/custom/head.html文件后面添加下面的代码 (YOUR_OCTOPRESS是你Octopress的主目录)</p>

<pre><code>function addBlankTargetForLinks () {
  $('a[href^="http"]').each(function(){
  $(this).attr('target', '_blank');
  });
}

$(document).bind('DOMNodeInserted', function(event) {
  addBlankTargetForLinks();
});
</code></pre>

<h3 id="section-1">2. 首页只显示摘要部分</h3>
<ul>
  <li>
    <p>在markdown文档中加入 <code>&lt;!-- more --&gt;</code> 控制摘要截取位置</p>
  </li>
  <li>
    <p>修改 <code>_config.yml</code> 中 <code>excerpt_link</code> 控制连接文字</p>
  </li>
</ul>

<h3 id="about">3. About分页创建</h3>
<ul>
  <li>
    <p>在 <code>{Octopress_home}/source</code> 目录下新建 <code>about</code> 目录，并在里面创建 <code>index.markdown</code> 文件。</p>
  </li>
  <li>
    <p>编辑导航页 <code>{Octopress_home}/source/_includes/custom/navigation.html</code> ，添加以下内容 :</p>

    <p><code>&lt;li&gt;&lt;a href="http://qingu.github.com/about/index.markdown"&gt;About&lt;/a&gt;&lt;/li&gt;</code></p>
  </li>
  <li>
    <p>侧边栏添加 <code>about me</code> 介绍:在 <code>{Octopress_home}/source/_includes/custom/asides/about.html</code> 添加 About me 信息</p>
  </li>
</ul>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
</pre></td><td class="code"><pre><code class="html"><span class="line"><span class="nt">&lt;section&gt;</span>
</span><span class="line">   <span class="nt">&lt;h1&gt;</span>About me<span class="nt">&lt;/h1&gt;</span>
</span><span class="line">   <span class="nt">&lt;p&gt;&lt;img</span> <span class="na">src=</span><span class="s">&quot;/images/about.jpg&quot;</span><span class="nt">&gt;&lt;/p&gt;</span>
</span><span class="line">   <span class="nt">&lt;p&gt;</span>say something about yourself<span class="nt">&lt;/p&gt;</span>
</span><span class="line">   <span class="nt">&lt;p&gt;&lt;a</span> <span class="na">href=</span><span class="s">&quot;mailto:youremail@gmail.com&quot;</span><span class="nt">&gt;&lt;img</span> <span class="na">src=</span><span class="s">&quot;/images/my_mail.png&quot;</span> <span class="na">alt=</span><span class="s">&quot;youremail@gmail.com&quot;</span><span class="nt">&gt;&lt;/a&gt;&lt;/p&gt;</span>
</span><span class="line"><span class="nt">&lt;/section&gt;</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<ul>
  <li>效果请见我的about me。</li>
</ul>

<h3 id="octopress-latex">4. 在Octopress中使用 $latex$</h3>
<p>参考<a href="http://yanping.me/cn/blog/2012/03/10/octopress-with-latex/" title="雁起平沙博客">雁起平沙博客</a>介绍方法，使用 <code>kramdown</code> 渲染markdown文档，支持 $latex$ 。</p>

<p>注意还有一步是将 <code>_config.yml</code> 中修改 <code>markdown: kramdown</code></p>

<p>右键点击公式网页消失问题解决方法<a href="http://www.yanjiuyanjiu.com/blog/20130402/" title="见此">见此</a></p>

<p>即在 <code>sass/base/_theme.scss</code> 中 <code>body</code> 处添加 <code>#main</code> 即可。</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
</pre></td><td class="code"><pre><code class="html"><span class="line">body {
</span><span class="line">  &gt; div#main {
</span><span class="line">    background: $sidebar-bg $noise-bg;
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>示例：</p>

<pre><code>$$
\begin{align*}
  &amp; \phi(x,y) = \phi \left(\sum_{i=1}^n x_ie_i, \sum_{j=1}^n y_je_j \right)
  = \sum_{i=1}^n \sum_{j=1}^n x_i y_j \phi(e_i, e_j) = \\
  &amp; (x_1, \ldots, x_n) \left( \begin{array}{ccc}
      \phi(e_1, e_1) &amp; \cdots &amp; \phi(e_1, e_n) \\
      \vdots &amp; \ddots &amp; \vdots \\
      \phi(e_n, e_1) &amp; \cdots &amp; \phi(e_n, e_n)
    \end{array} \right)
  \left( \begin{array}{c}
      y_1 \\
      \vdots \\
      y_n
    \end{array} \right)
\end{align*}
$$
</code></pre>

<p>公式效果图：</p>

<script type="math/tex; mode=display">% &lt;![CDATA[

\begin{align*}
  & \phi(x,y) = \phi \left(\sum_{i=1}^n x_ie_i, \sum_{j=1}^n y_je_j \right)
  = \sum_{i=1}^n \sum_{j=1}^n x_i y_j \phi(e_i, e_j) = \\
  & (x_1, \ldots, x_n) \left( \begin{array}{ccc}
      \phi(e_1, e_1) & \cdots & \phi(e_1, e_n) \\
      \vdots & \ddots & \vdots \\
      \phi(e_n, e_1) & \cdots & \phi(e_n, e_n)
    \end{array} \right)
  \left( \begin{array}{c}
      y_1 \\
      \vdots \\
      y_n
    \end{array} \right)
\end{align*}
 %]]&gt;</script>

<h3 id="section-2">5. 添加标签云</h3>

<p>参考以下两篇文章：</p>

<ul>
  <li>
    <p><a href="http://blog.tinyxd.me/blog/2012/06/25/octopress-add-tag-cloud/" title="Octopress博客添加标签云">Octopress博客添加标签云</a></p>
  </li>
  <li>
    <p><a href="http://yang3wei.github.io/blog/2013/01/30/zhuan-zai-wei-octopress-tian-jia-biao-qian-yun/" title="为octopress添加tag Cloud">为octopress添加tag Cloud</a></p>
  </li>
</ul>

<p>主要依据第一篇的方法。</p>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Markdown入门]]></title>
    <link href="http://qingu.github.com/blog/2013/02/27/markdownru-men/"/>
    <updated>2013-02-27T20:26:00+08:00</updated>
    <id>http://qingu.github.com/blog/2013/02/27/markdownru-men</id>
    <content type="html"><![CDATA[<h3 id="section">前言</h3>
<p>github真的很强大，原来以为只是一个代码托管及项目版本控制的网站，没想到还可以搭建blog及wiki。按照网上的教程，磕磕碰碰的终于搭建好了blog。借着建这个blog的机会，学习下Markdown和git。首先，学习下Markdown标记语言，因为github上blog要求用标记语言写，不学这个blog都写不起来。</p>

<p>本文就是我参考<a href="http://wowubuntu.com/markdown/basic.html" title="Wow!Ubuntu">Wow!Ubuntu</a>和<a href="http://http://zh.wikipedia.org/wiki/Markdown" title="维基百科">维基百科</a>上教程及自己的实践写的（是用Markdown写的哦），只涉及到Markdown入门语法，学完后基本上能写blog。可以使用在线markdown编辑器学习，这样起到“所写即所得”作用，加深印象。这里介绍一个<a href="http://www.ostools.net/markdown">在线Markdown编译器</a>，可以转换成html及实时预览。好了，开始我们的Markdown学习之旅。。</p>

<!-- more -->

<h3 id="section-1">1.标题</h3>
<p>一篇文章首先是标题。Markdown支持两种标题语法，Settext和atx形式。</p>

<ul>
  <li>
    <p>Settext形式：利用底线形式，用 <code>=</code> （最高级标题） 和 <code>-</code> （第二级标题）作为底线形式标题的标记。</p>
  </li>
  <li>
    <p>atx形式：在行首插入 1 到 6 个 <code>#</code>，对应标题 1 到 6 级（从大到小顺序）。</p>
  </li>
</ul>

<p>atx比Settext提供更多规格的标题形式，atx中 <code>#</code> 和 <code>##</code> 分别对应Settext中 <code>=</code> 和 <code>-</code> 。</p>

<p>语法示例：</p>

<pre><code>Fisrt Level Header
==================
Second Level Header
-------------------
# Header 1 (equal `=`)
## Header 2 (equal `-`)
</code></pre>

<h3 id="section-2">2.引用</h3>
<p>文章中经常引用别人的话，为区别开来可以用引用标记特别注明。Markdown中使用email形式的 ‘<code>&gt;</code>‘（右尖括号号）。可以在引用段落前加一个，也可以在段落每行前面加一个。如果区块引用由几段组成，引用段落之间需要加一个 <code>&gt;</code>区分引用不同段落（这是引用标记和段落标记的组合）。</p>

<p>语法示例：</p>

<pre><code>&gt; This is a blockquote.
&gt;
&gt; This is the second paragraph in the blockquote.
&gt;
&gt; ## This is an H2 in a blockquote
</code></pre>

<h3 id="section-3">3.段落</h3>
<p>一篇文章由N个段落组成。一个段落由一个或多个连续的行构成，Markdown通过一个以上的空行区别不同的段落。只要看起来像空行，不管是由空格符还是tab组成的，一律视为空行。</p>

<p>多个空格会被看成一个空格。一般段落首行没有缩进，如果需要首行缩进的话可用<code>&amp;emsp;</code> (全方大空白)或 <code>&amp;ensp;</code> （半方大空格）。</p>

<p>语法示例：</p>

<pre><code>&amp;emsp 这是段落1
这是段落2
</code></pre>

<h3 id="section-4">4.强调</h3>
<p>Markdown使用星号 <code>*</code> 和底线 <code>_</code> 标记强调区段。在强调部分前加上标记，在强调部分结束后加上标记限制强调范围。注意星号强调标志与强调内容之间不能有空格存在，不然变成无序列表了。</p>

<p>语法示例：</p>

<pre><code>*强调部分变为斜体*  或 _强调部分变为斜体_
**加重强调部分变为粗体**  或 __加重强调变为粗体__
***特别强调部分变为粗斜体*** 或 ___特别强调部分变为粗斜体___
</code></pre>

<h3 id="section-5">5.列表</h3>
<p>列表分为无序列表和有序列表两种。
无序列表使用星号、加号、减号三种中任意一种作为无序列表的项目标记。三种符号可混用，但不建议这样做。注意列表标记和列表项目之间必须至少一个空格。</p>

<p>语法示例：</p>

<pre><code>* 无序列表中一项
* 子项，以一个tab或者4个空格缩进
* 无序列表中另一项
+ 无序列表另一项
- 无序列表另一项
</code></pre>

<p>有序列表使用数字接一个英文句点作为项目标记。注意数字和句点间不能有空格，句点和项目内容之间至少有一个空格。</p>

<p>语法示例：</p>

<pre><code>1. 有序列表一项
2. 有序列表另一项
</code></pre>

<h3 id="section-6">6.链接</h3>
<p>Markdown支持两种形式链接语法。</p>

<p>行内插入链接：</p>

<pre><code>[链接文字](链接地址)
示例： [github](http://www.github.com)
</code></pre>

<p>参考形式链接：类似于文献中最后列出的参考文献。</p>

<p>内容行内插入：</p>

<pre><code>[链接文字][链接引用标签]
</code></pre>

<p>在段落后面或文档结尾放上一下内容，生成一个链接：</p>

<pre><code>[链接引用标签]: 链接地址 "链接标题"
</code></pre>

<p>注意其中的冒号和引号都是英文符号。建议链接引用标签用数字表示，可以统计数量。
    我在<a href="http://wowubuntu.com/markdown/basic.html" title="Wow!Ubuntu">github</a>上建立了blog。
    <a href="http://wowubuntu.com/markdown/basic.html" title="Wow!Ubuntu">1</a>: http://qingu.github.com “github”</p>

<h3 id="section-7">7.图片</h3>
<p>图片引用类似于链接引用。图片可以是网络图片，也可以是本地图片，本地图片建议放在source/images目录中，按年月建立两层目录放置便于归档。本地图片的url类似为/images/year/month/img.png。</p>

<p>行内形式（title可选）：
    <img src="http://qingu.github.com/path/to/img.jpg" alt="alt text" title="title" /></p>

<p>参考形式：</p>

<p>行内引用
    ![alt text][id]</p>

<p>段落结束或文档结尾生成一个图片引用
    [id]: /path/to/img.jpg “title”</p>

<p>语法示例：</p>

<pre><code>![alt MyEmail](/images/myemail.png "MyEmail")
</code></pre>

<p>效果图：</p>

<p><img src="http://qingu.github.com/images/myemail.png" alt="alt MyEmail" title="MyEmail" /></p>

<h3 id="section-8">8.代码</h3>
<p>两种选择，一种是把代码用反引号 <code>`</code> 括起来。另一种是以制表符或至少 4 个空格缩进的行（常用于代码段）。本文中白底黑字就是用第一种方法，墨绿色底的代码块用的是第二种方法。</p>

<h3 id="section-9">9.水平分割线</h3>
<p>要生成水平分割线，可以在单独一行里输入3个或以上的短横线（减号）、星号或者下划线实现。短横线和星号之间可以输入任意空格。以下每一行都产生一条水平分割线。</p>

<pre><code>* * *
***
******
- - -
---------------------
</code></pre>

<h3 id="section-10">参考资料</h3>

<p><a href="http://wowubuntu.com/markdown/basic.html" title="Wow!Ubuntu">1</a> http://wowubuntu.com/markdown/basic.html</p>

<p><a href="http://http://zh.wikipedia.org/wiki/Markdown" title="维基百科">2</a> http://http://zh.wikipedia.org/wiki/Markdown</p>

<p><a href="http://www.ostools.net/markdown">3</a> http://www.ostools.net/markdown</p>

]]></content>
  </entry>
  
</feed>
